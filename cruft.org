#+options: ^:{}
#+title: Cruft from literate Emacs configuration with Org mode
#+author: Ryan Matlock

* Why though?
Keeping abandoned configuration info readily on hand is easier than having to
search through the commit history, and it lets me know at a glance if I've
tried something and hated it or it simply didn't work. The documentation may
also contain useful links and debugging information.

* ~core-config.org~
** General interface & minor modes
*** GUI
**** Frame sizing
*****  struggle with keybindings and prefix maps
This is the wrong way to do it, but it's probably not that far off from the
right way to do it.

~C-x f~ is bound to =set-fill-column=, which I don't really use. Consider making it
into a prefix key and using that instead of ~C-x x~ as the prefix for all of your
personal frame resizing functions.

See [[https://www.masteringemacs.org/article/mastering-key-bindings-emacs][Mastering Key Bindings in Emacs § Creating New Keymaps | Mastering Emacs]]
and [[https://emacs.stackexchange.com/a/22202][how to add a prefix key to all keybindings of a specific mode? |
emacs.stackexchange]].

#+begin_src emacs-lisp
  (define-key global-map (kbd "C-x f") nil) ;; previously set-fill-column

  (when window-system
    ;; (defvar gui-frame-map
    ;;   (let ((map (make-sparse-keymap)))
    ;;     (define-key map (kbd "s") 'std-frame)
    ;;     (define-key map (kbd "w") 'wide-frame)
    ;;     (define-key map (kbd "l") 'lrg-frame)
    ;;     (define-key map (kbd "x") 'xl-frame)
    ;;     map))

    ;; (let ((map (make-sparse-keymap)))
    ;;   (define-key map (kbd "s") 'std-frame)
    ;;   (define-key map (kbd "w") 'wide-frame)
    ;;   (define-key map (kbd "l") 'lrg-frame)
    ;;   (define-key map (kbd "x") 'xl-frame)
    ;;   (setq gui-frame-map map))

    (define-prefix-command 'gui-frame-map)
    (define-key global-map (kbd "C-x f") 'gui-frame-map)

    (let ((prefix "C-x f")
          (map (make-sparse-keymap))
          (key-func-alist '(("s" . 'std-frame)
                            ("w" . 'wide-frame)
                            ("l" . 'lrg-frame)
                            ("x" . 'xl-frame))))
      (seq-do #'(lambda (ccell)
                  (let ((key (car ccell))
                        (func (cdr ccell)))
                    (define-key map (kbd (format "%s %s" prefix key)) func)))
              key-func-alist)
      (setq gui-frame-map map)))
#+end_src

#+begin_example
  gui-frame-map’s value is
  (keymap
   (24 keymap
       (102 keymap
            (120 quote xl-frame)
            (108 quote lrg-frame)
            (119 quote wide-frame)
            (115 quote std-frame))))
#+end_example

#+begin_example
  ctl-x-map is a variable defined in ‘subr.el’.

  Its value is shown below.

  Default keymap for C-x commands.
  The normal global definition of the character C-x indirects to this keymap.

    This variable may be risky if used as a file-local variable.

  Value:
  (keymap
   #^[nil nil keymap #1=
          #^^[3 0 pop-global-mark nil list-buffers save-buffers-kill-terminal list-directory eval-last-sexp find-file nil nil indent-rigidly dired-jump kmacro-keymap downcase-region
                (keymap
                 (108 . set-language-environment)
                 (99 . universal-coding-system-argument)
                 (28 . set-input-method)
                 (88 . set-next-selection-coding-system)
                 (120 . set-selection-coding-system)
                 (112 . set-buffer-process-coding-system)
                 (107 . set-keyboard-coding-system)
                 (116 . set-terminal-coding-system)
                 (70 . set-file-name-coding-system)
                 (114 . revert-buffer-with-coding-system)
                 (102 . set-buffer-file-coding-system))
                set-goal-column delete-blank-lines mark-page read-only-mode find-file-read-only save-buffer transpose-lines upcase-region find-alternate-file write-file exchange-point-and-mark nil suspend-frame
  ...
#+end_example

#+begin_src emacs-lisp
  (define-key global-map (kbd "C-x f") nil) ;; previously set-fill-column

  (when window-system
    (define-prefix-command 'gui-frame-map)
    (define-key ctl-x-map (kbd "f") 'gui-frame-map)

    (let ((prefix "C-x f")
          (map (make-sparse-keymap))
          (key-func-alist '(("s" . 'std-frame)
                            ("w" . 'wide-frame)
                            ("l" . 'lrg-frame)
                            ("x" . 'xl-frame))))
      ;; (seq-do #'(lambda (ccell)
      ;;             (let ((key (car ccell))
      ;;                   (func (cdr ccell)))
      ;;               (define-key map (kbd (format "%s %s" prefix key)) func)))
      ;;         key-func-alist)
      (seq-do #'(lambda (ccell)
                  (let ((key (car ccell))
                        (func (cdr ccell)))
                    (define-key map (kbd key) func)))
              key-func-alist)
      (setq gui-frame-map map)))
#+end_src

Ok, =gui-frame-map= appears within the =ctl-x-map=, but I'm still not getting
defined functions yet.

#+begin_src emacs-lisp
  (define-key global-map (kbd "C-x f") nil) ;; previously set-fill-column

  (when window-system
    (let ((prefix "C-x f")
          (key-func-alist '(("s" . std-frame)
                            ("w" . wide-frame)
                            ("l" . lrg-frame)
                            ("x" . xl-frame))))
      (seq-do
       #'(lambda (ccell)
           (let ((key (car ccell))
                 (func (cdr ccell)))
             (define-key global-map (kbd (format "%s %s" prefix key)) func)))
       key-func-alist)))
#+end_src

I still haven't figured out the prefix map stuff, but this works. I'm going to
refactor things a bit.
**** ~nerd-icons~
[[https://github.com/rainstormstudio/nerd-icons.el][nerd-icons.el | GitHub]] use [[https://github.com/ryanoasis/nerd-fonts][Nerd Fonts]] icons

#+begin_src emacs-lisp
  (use-package nerd-icons
    ;; :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
    :config
    (let ((jet-brains-nf "JetBrainsMono Nerd Mono")
          (nerd-symbols-mono "Symbols Nerd Font Mono"))
      (cond ((font-available-p jet-brains-nf)
             (setq nerd-icons-font-family jet-brains-nf))
            ((font-available-p nerd-symbols-mono)
             (setq nerd-icons-font-family nerd-symbols-mono)))))
#+end_src

*** General look & feel
**** ~all-the-icons.el~ + ~all-the-icons-completion~
[[https://github.com/domtronn/all-the-icons.el][all-the-icons.el]]

[[https://github.com/iyefrat/all-the-icons-completion][all-the-icons-completion]]

#+begin_src emacs-lisp :eval no
  ;; (require 'font-lock)
  ;; (use-package font-lock+
  ;;   :straight t)
  ;; not actually needed
  ;; see https://github.com/domtronn/all-the-icons.el/pull/106

  (use-package all-the-icons
    :straight t
    :if (display-graphic-p))

  (use-package all-the-icons-completion
    :straight t
    ;; :requires (all-the-icons marginalia)
    :requires all-the-icons
    ;; :hook ((marginalia-mode . all-the-icons-completition-marginalia-setup))
    :config
    (all-the-icons-completion-mode))
#+end_src

**** ~fill-column-indicator~
[[https://www.emacswiki.org/emacs/FillColumnIndicator][fill-column-indicator]]

#+begin_src emacs-lisp
  (use-package fill-column-indicator
    :straight t
    :hook (prog-mode . fill-column-indicator-mode)
    :config (setq fci-rule-width 1))
#+end_src

Not working:
#+begin_verbatim
command-execute: Autoloading file path/to/.emacs.d/straight/build/fill-column-indicator/fill-column-indicator.elc failed to define function fill-column-indicator-mode
#+end_verbatim

I don't think I've missed this.

**** Prettier mode line
I checked Reddit to get some ideas for which mode line packages are popular
these days. A lot of people seem to be happy with Doom Emacs/[[https://github.com/seagle0128/doom-modeline][doom-modeline]], and
[[https://gitlab.com/jessieh/mood-line][mood-line]] is a lightweight alternative.

If that doesn't work out, [[https://github.com/tarsius/minions][minions]] (minor mode lighter \to separate menu) + [[https://github.com/tarsius/moody][moody]]
also looks really nice. It looks like you could actually use ~mood-line~ with
~minions~ with some tweaks; see [[https://gitlab.com/jessieh/mood-line/-/issues/21][Support Minions Mode]].

By default, ~mood-line~'s git status looks unreadable in the active
window/frame/buffer/whatever the right term is when using Solarized Dark theme
(bright yellow text over light grey background) [note: only true when
=(solarized-high-contrast-mode-line t)= ]. I think the issue can be
traced to

# #+begin_src emacs-lisp :eval no
#   (defface mood-line-status-info
#     '((t (:inherit (font-lock-keyword-face))))
#     "Face used for generic status indicators in the mode-line."
#     :group 'mood-line)
# #+end_src

so I'm going to try modifying that. Actually, looking at the Customize options,
=mood-line-status-success= uses the same bright yellow color, and
=mood-line-status-neutral= uses only a slightly darker grey than the background.

#+begin_src emacs-lisp
  (use-package mood-line
    :straight t
    ;; :requires solarized-theme
    ;; :defer t
    :config
    ;; having issues with solarized-dark-color-palette-alist :shrug:
    ;; (progn
    ;;   (when (and (member 'solarized-dark custom-enabled-themes)
    ;;              solarized-high-contrast-mode-line)
    ;;     (progn
    ;;       ;; (message "You're using Solarized Dark")
    ;;       ;; note: hex codes work just as well as color strings
    ;;       (set-face-attribute
    ;;        'mood-line-status-info
    ;;        nil
    ;;        :foreground
    ;;        (cdr (assoc 'blue-d solarized-dark-color-palette-alist)))
    ;;       (set-face-attribute
    ;;        'mood-line-status-success
    ;;        nil
    ;;        :foreground
    ;;        (cdr (assoc 'blue-d solarized-dark-color-palette-alist)))
    ;;       (set-face-attribute
    ;;        'mood-line-status-neutral
    ;;        nil
    ;;        :foreground
    ;;        (cdr (assoc 'green-d solarized-dark-color-palette-alist))))))
    ;;
    ;; stll having trouble with solarized-dark-color-palette-alist
    ;; ¯\_(ツ)_/¯
    ;;
    ;; (set-face-attribute
    ;;  'mood-line-status-info
    ;;  nil
    ;;  :foreground
    ;;  (cdr (assoc 'blue-d solarized-dark-color-palette-alist)))
    ;; (set-face-attribute
    ;;  'mood-line-status-success
    ;;  nil
    ;;  :foreground
    ;;  (cdr (assoc 'blue-d solarized-dark-color-palette-alist)))
    ;; (set-face-attribute
    ;;  'mood-line-status-neutral
    ;;  nil
    ;;  :foreground
    ;;  (cdr (assoc 'green-d solarized-dark-color-palette-alist)))
    (mood-line-mode))
#+end_src

Getting warning on startup now: ~Error (use-package): mood-line/:config:
Symbol’s value as variable is void: solarized-dark-color-palette-alist~ even
after adding =:requires solarized-theme= :shrug: Weirder still: when I run ~M-x
reload-dotemacs~, I don't get the warning and instead get the expected
behavior. Weirder still: I can run ~C-h v solarized-dark-color-palette-alist~,
get the value, and then run ~M-x reload-dotemacs~ and everything works.

*** Miscellaneous
**** ~neotree~
[[https://github.com/jaypei/emacs-neotree][neotree]] works like NerdTree for Vim (basically a directory tree that opens up
beside your buffer). These days I prefer ~treemacs~.

#+begin_src emacs-lisp
  (use-package neotree
    :straight t
    :config
    (global-set-key [f8] 'neotree-toggle))
#+end_src
*** Completions
**** ~vertico~
This is ~vertico~ with all the crufty bits still in it.

Following config taken from
https://systemcrafters.cc/emacs-tips/streamline-completions-with-vertico/ and
lightly edited.

So far I'm loving ~vertico~ + ~savehist~ for ~M-x~ commands! However, it seems like
=ido-everywhere= is still set to =t= by default for some reason. Oh, I have an
idea: I bet it's in =custom.el=! I'm starting to think the smarter/better way to
do most customizations is with =:custom= inside of =(straight-)use-package=
statements. Yep, that was it! Going forward, I'll try to move what I can out of
~custom.el~.

~vertico-directory~ provides for "Ido-like directory navigation," which sounds
nice to have again; configuration taken from [[https://github.com/minad/vertico#extensions][vertico | Extensions]].

#+begin_src emacs-lisp
  (use-package vertico
    :straight (vertico :includes vertico-directory
                       :files (:defaults "extensions/vertico-directory.el"))
    :bind (:map vertico-map
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  (use-package savehist
    :straight t
    :init
    (savehist-mode))

  ;; (use-package vertico-directory
  ;;   ;; see https://github.com/minad/vertico/issues/83#issuecomment-883762831
  ;;   :straight (vertico :includes vertico-directory
  ;;                      :files (:defaults "extensions/vertico-directory.el"))
  ;;   :after vertico
  ;;   :ensure nil
  ;;   ;; More convenient directory navigation commands
  ;;   :bind (:map vertico-map
  ;;               ("RET" . vertico-directory-enter)
  ;;               ("DEL" . vertico-directory-delete-char)
  ;;               ("M-DEL" . vertico-directory-delete-word))
  ;;   ;; Tidy shadowed file names
  ;;   :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
  ;; still not working -- look into this later
  ;; try restarting Emacs? -- nope

  ;; (use-package marginalia
  ;;   :after vertico
  ;;   :straight t
  ;;   :custom
  ;;   (marginalia-annotators '(marginalia-annotators-heavy
  ;;                            marginalia-annotators-light nil))
  ;;   :init
  ;;   (marginalia-mode))
#+end_src

#+begin_example
Error (use-package): vertico/:init: Symbol’s value as variable is void:
vertico-map Disable showing Disable logging
Warning (straight): Two different recipes given for "vertico" (:files cannot be
both ("*" (:exclude ".git")) and (:defaults "extensions/vertico-directory.el"))
Disable showing Disable logging
Error (use-package): corfu/:init: Symbol’s function definition is void:
corfu-global-mode Disable showing Disable logging
Error (use-package): auctex/:catch: Loading file
/Users/matlock/.emacs.d/straight/build/auctex/auctex.elc failed to provide
feature ‘auctex’ Disable showing Disable logging
#+end_example

Getting these warnings after restarting Emacs. Upgraded ~vertico~, commented out
~vertico-directory~ stuff, restarted, and now ~vertico~ isn't working anymore.

Somehow that really messed everything up, and I had to nuke my
~$HOME/.emacs.d/straight/~ directory, although it seems to be fine now. Going to
try to enable ~vertico-directory~ again. -- Nope, that didn't work.

Now getting these warnings on startup:

#+begin_example
Error (use-package): corfu/:init: Symbol’s function definition is void:
corfu-global-mode Disable showing Disable logging
Error (use-package): auctex/:catch: Loading file
/Users/matlock/.emacs.d/straight/build/auctex/auctex.elc failed to provide
feature ‘auctex’ Disable showing Disable logging
#+end_example

***** ~vertico-directory~
See [[https://github.com/radian-software/straight.el/issues/819#issuecomment-882039946][Can not find vertico-directory package #819 | GitHub]]

#+begin_src emacs-lisp
  ;; (straight-use-package
  ;;  '(vertico :files (:defaults "extensions/*")
  ;;            :includes (vertico-buffer
  ;;                       vertico-directory
  ;;                       vertico-flat
  ;;                       vertico-indexed
  ;;                       vertico-mouse
  ;;                       vertico-quick
  ;;                       vertico-repeat
  ;;                       vertico-reverse)
  ;;            )
  ;;  )

  (use-package vertico-directory
    :after vertico
    ;; :load-path "straight/build/vertico/extensions"
    :straight nil
    :ensure nil
    ;; More convenient directory navigation commands
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

**** ~corfu~
I'm not sure if I was actually using ~corfu~; it seemed like other systems were
handling completion for me.

[[https://github.com/minad/corfu][corfu | GitHub]]: "Corfu is the minimalistic ~completion-in-region~ counterpart of
the ~vertico~ minibuffer UI."

#+begin_src emacs-lisp
  (use-package corfu
    :straight t
    :custom
    (corfu-cycle t)                   ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-commit-predicate nil)   ;; Do not commit selected candidates on
    ;;                                ;; next input
    ;; (corfu-quit-at-boundary t)     ;; Automatically quit at word boundary
    ;; (corfu-quit-no-match t)        ;; Automatically quit if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
    ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; You may want to enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since dabbrev can be used globally (M-/).
    :init
    (global-corfu-mode))

  ;; Optionally use the `orderless' completion style. See `+orderless-dispatch'
  ;; in the Consult wiki for an advanced Orderless style dispatcher.
  ;; Enable `partial-completion' for files to allow path expansion.
  ;; You may prefer to use `initials' instead of `partial-completion'.
  (use-package orderless
    :straight t
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides
          '((file (styles . (partial-completion))))))

  ;; Use dabbrev with Corfu!
  (use-package dabbrev
    :straight t
    ;; Swap M-/ and C-M-/
    :bind (("M-/" . dabbrev-completion)
           ("C-M-/" . dabbrev-expand)))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))
#+end_src

**** TODO ~consult.el~: Consulting =completing-read= + ~recentf-mode~
[[https://github.com/minad/consult][consult | GitHub]]

Among the things that it can do is provide a list of recent files using
[[https://www.emacswiki.org/emacs/RecentFiles][recentf-mode]]. ~recentf~ doesn't quite have the behavior I remember ~ido~ having,
but I can't find anything in ~legacy-dotemacs.el~ that suggests the behavior I'm
looking for.

#+begin_src emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)
  (define-key global-map (kbd "C-x M-f") 'recentf-open-files)

  ;; (use-package consult
  ;;   :straight t)
#+end_src

**** TODO ~ivy~ + ~counsel~ + ~swiper~
[[https://github.com/abo-abo/swiper][ivy, counsel, and swiper]]: tools for minibuffer completion.

#+begin_src emacs-lisp
  (use-package ivy
    :straight t
    :config
    (ivy-mode)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
  )

  (use-package counsel
    :straight t)

  ;; (global-set-key "\C-s" 'swiper)
  ;; (global-set-key (kbd "C-c C-r") 'ivy-resume)
  ;; (global-set-key (kbd "<f6>") 'ivy-resume)
  ;; (global-set-key (kbd "M-x") 'counsel-M-x)
  ;; (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  ;; (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  ;; (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  ;; (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
  ;; (global-set-key (kbd "<f1> l") 'counsel-find-library)
  ;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  ;; (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  ;; (global-set-key (kbd "C-c g") 'counsel-git)
  ;; (global-set-key (kbd "C-c j") 'counsel-git-grep)
  ;; (global-set-key (kbd "C-c k") 'counsel-ag)
  ;; (global-set-key (kbd "C-x l") 'counsel-locate)
  ;; (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  ;; (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+end_src

This feels a little familiar, but I don't think I'm getting the behavior that I
remember in terms of opening recent buffers.

* ~core-langs.org~
** ~lsp-bridge~
[[https://github.com/manateelazycat/lsp-bridge][lsp-bridge | GitHub]] is supposedly the fastest LSP client for Emacs.

*** Dependencies

**** ~posframe~
[[https://github.com/tumashu/posframe][posframe | GitHub]]

#+begin_src emacs-lisp
  (use-package posframe
    :straight (:host github
               :repo "tumashu/posframe"
               :branch "master"))
#+end_src

**** Markdown
For when you can't use Org mode 🙃; see [[https://jblevins.org/projects/markdown-mode/][markdown-mode]].

#+begin_src emacs-lisp
  (use-package markdown-mode
    :straight t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown")
    :bind (:map markdown-mode-map
           ("C-c C-e" . markdown-do)))
#+end_src

***** ~pandoc-mode~
[[http://joostkremers.github.io/pandoc-mode/][pandoc-mode]] makes it easier to interface with ~pandoc~, which is especially
useful when editing Markdown files (Org mode has a lot of this functionality
built in).

#+begin_src emacs-lisp
  (use-package pandoc-mode
    :straight t
    :hook ((markdown-mode . pandoc-mode)))
#+end_src


**** ~yasnippet~
[[https://github.com/joaotavora/yasnippet][yasnippet]] was something I used extensively back in the day for YAML templates
and maybe some LaTeX stuff. It's probably still pretty useful.

#+begin_src emacs-lisp
  (use-package yasnippet
    :straight t
    ;; :hook
    ;; ((prog-mode . yas-minor-mode))
    :bind
    (:map yas-minor-mode-map
          ("M-TAB" . yas-expand))
    :config
    (yas-reload-all)
    (yas-global-mode 1))
#+end_src

Not really sure about ~M-TAB~ for =yas-expand=, but it was in my old config :shrug:

Still need to set snippet directory; see [[https://github.com/joaotavora/yasnippet#where-are-the-snippets][yasnippet | Where are the snippets?]]

** Python
*** COMMENT Company (COMPlete ANYthing) -- replaced by ~corfu~
~corfu~ covers this now(?); in any case, I think I was only using this with
Python.

[[https://company-mode.github.io][company-mode | GitHub]]

#+begin_src emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)
  (global-set-key (kbd "C-c C-<tab>") 'company-complete)
#+end_src

**** Python: ~company-jedi~
[[https://github.com/emacsorphanage/company-jedi][comapny-jedi | GitHub]]

#+begin_src emacs-lisp
  (defun python-company-jedi-hook ()
    (add-to-list 'company-backends 'company-jedi))
  (add-hook 'python-mode-hook 'python-company-jedi-hook)
#+end_src


*** TODO COMMENT +~pylsp~+ ~ruff-lsp~
**** Installation
# Ran

# #+begin_src shell :eval no
#   pip install 'python-lsp-server[all]'
# #+end_src

# Looking at [[https://www.mattduck.com/lsp-python-getting-started.html][Getting started with lsp-mode for Python]] (from [2020-04-26 Sun])
# plus the current config file, it looks a little hairy. I'm getting some degree
# of linting and code completion in Python right now, but I need to come back to
# this later. [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pylsp/][lsp-pylsp]] seems to have a daunting number of options.

[[https://github.com/charliermarsh/ruff-lsp][ruff-lsp | GitHub]]

Ran

#+begin_src shell
  pip3 install ruff-lsp
#+end_src

**** TODO COMMENT Configuration
[[https://emacs-lsp.github.io/lsp-mode/page/lsp-ruff-lsp/][lsp-ruff-lsp | LSP Mode]]

#+Begin_src emacs-lisp
  (eval-after-load 'lsp
    (custom-set-variables
     '(lsp-ruff-lsp-show-notifications 'onWarning)))
#+end_src

** TeX/LaTeX
*** AUCTeX
Encountered warnings with the following:

# #+begin_src emacs-lisp :eval no-export
#   (use-package auctex
#     :straight t)
# #+end_src

Stealing configuration from [[https://github.com/radian-software/straight.el/issues/836#issuecomment-927098560][Straight freezed at Building auctex forever. #836 |
hongyi-zhao reply on 2021-09-25]]

# #+begin_src emacs-lisp :eval no-export
#   (use-package auctex
#     :straight
#     (:type git :host nil :repo "https://git.savannah.gnu.org/git/auctex.git"
#            :pre-build (("./autogen.sh")
#                        ("./configure" "--without-texmf-dir" "--with-lispdir=.")
#                        ("make")))
#     :mode
#     ;; https://www.mail-archive.com/auctex@gnu.org/msg07608.html
#     ;; https://www.gnu.org/software/emacs/manual/html_node/reftex/Installation.html
#     ("\\.tex\\'" . latex-mode) ;; first activate the inferior Emacs latex mode
#     :hook
#     (LaTeX-mode . TeX-PDF-mode)
#     (LaTeX-mode . company-mode)
#     (LaTeX-mode . flyspell-mode)
#     (LaTeX-mode . flycheck-mode)
#     (LaTeX-mode . LaTeX-math-mode)
#     (LaTeX-mode . turn-on-reftex)
#     (LaTeX-mode . turn-on-cdlatex)
#     :init
#     (load "auctex.el" nil t t)
#     (load "preview-latex.el" nil t t)
#     (require 'reftex)
#     (setq-default TeX-master 'dwim)
#     (setq TeX-data-directory (straight--repos-dir "auctex")
#           TeX-lisp-directory TeX-data-directory

#           ;: Or custom-set-variables as follows.
#           ;: M-x describe-variable RET preview-TeX-style-dir RET
#           ;: `(preview-TeX-style-dir ,(concat ".:" (straight--repos-dir "auctex")
#           ;;                                  "latex:"))
#           preview-TeX-style-dir (concat ".:" (straight--repos-dir "auctex")
#                                         "latex:")

#           TeX-parse-self t ;; parse on load
#           TeX-auto-save t  ;; parse on save
#           TeX-auto-untabify t ;; Automatically remove all tabs from a file before
#           ;; saving it.

#                                           ;Type of TeX engine to use.
#                                           ;It should be one of the following symbols:
#                                           ;* ‘default’
#                                           ;* ‘luatex’
#                                           ;* ‘omega’
#                                           ;* ‘xetex’
#           TeX-engine 'xetex
#           TeX-auto-local ".auctex-auto" ;; Directory containing automatically
#           ;; generated TeX information.
#           TeX-style-local ".auctex-style" ;; Directory containing hand generated
#                                           ;; TeX information.

#         ;; ##### Enable synctex correlation.
#         ;; ##### From Okular just press `Shift + Left click' to go to the good
#         ;; ##### line.
#         ;; ##### From Evince just press `Ctrl + Left click' to go to the good
#         ;; ##### line.
#           ;; TeX-source-correlate-mode t
#           ;; TeX-source-correlate-method 'synctex
#           ;; TeX-source-correlate-start-server t

#         ;; automatically insert braces after sub/superscript in math mode
#           TeX-electric-sub-and-superscript t
#         ;; If non-nil, then query the user before saving each file with
#         ;; TeX-save-document.
#           TeX-save-query nil

#           TeX-view-program-selection '((output-pdf "PDF Tools"))
#           ))
# #+end_src

Well, that's not working either.

#+begin_example
  Error (use-package): auctex/:catch: Loading file
  /Users/matlock/.emacs.d/straight/build/auctex/auctex.elc failed to provide
  feature ‘auctex’ Disable showing Disable logging
  Warning (straight): Two different recipes given for "auctex" (:pre-build cannot
  be both nil and (("./autogen.sh") ("./configure" "--without-texmf-dir"
  "--with-lispdir=.") ("make"))) Disable showing Disable logging
  Warning (initialization): An error occurred while loading ‘/Users/matlock/.emacs’:

  error: :pre-build command error in "auctex" recipe in command "(\"./autogen.sh\")"

  To ensure normal operation, you should investigate and remove the
  cause of the error in your initialization file.  Start Emacs with
  the ‘--debug-init’ option to view a complete error backtrace. Disable showing
  Disable logging
#+end_example

It appears =autogen.sh= isn't in =.emacs.d/straight/repos/auctex/=. Per the end
of =*straight-process*=:

#+begin_example
  [Return code: 0]

  $ cd /Users/matlock/.emacs.d/straight/repos/auctex/
  $ ./autogen.sh

  Searching for programPermission denied
  [Return code: file-error]
#+end_example

For some reason, =:eval no= and =:eval no-export= don't seem to be working (in
terms of =org-babel= skipping the evaluation. See [[https://orgmode.org/manual/Evaluating-Code-Blocks.html][Org Mode Manual § 16.5
Evaluating Code Blocks]] for more info.

* ~extras.org~
** Minor modes
*** COMMENT ~yasnippet~ +-- configured under ~lsp-bridge~+
[[https://github.com/joaotavora/yasnippet][yasnippet]] was something I used extensively back in the day for YAML templates
and maybe some LaTeX stuff. It's probably still pretty useful.

#+begin_src emacs-lisp
  (use-package yasnippet
    :straight t
    ;; :hook
    ;; ((prog-mode . yas-minor-mode))
    :bind
    (:map yas-minor-mode-map
          ("M-TAB" . yas-expand))
    :config
    (yas-reload-all)
    (yas-global-mode 1))
#+end_src

Not really sure about ~M-TAB~ for =yas-expand=, but it was in my old config :shrug:

Still need to set snippet directory; see [[https://github.com/joaotavora/yasnippet#where-are-the-snippets][yasnippet | Where are the snippets?]]

* Package graveyard
(from the before times)
- [[https://github.com/auto-complete/auto-complete][auto-complete]]
- [[https://github.com/technomancy/better-defaults][better-defaults]]
- [[https://github.com/zk-phi/electric-case][electric-case]]
- [[https://github.com/davidshepherd7/electric-operator][electric-operator]]
- [[https://github.com/xwl/electric-spacing][electric-spacing]] (does the same thing as ~electric-operator~ ?)
- [[https://github.com/remvee/elein][elein]]
- [[https://elpy.readthedocs.io/en/latest/][elpy]] (Emacs Python Develpment Environment) (\to ~core-langs.org~ ?)
- [[https://github.com/ikazuhiro/emoji-display][emoji-display]] (use ~emojify~ instead)
- [[https://github.com/defunkt/gist.el][gist]]
