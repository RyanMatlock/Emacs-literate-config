#+options: ^:{}
#+title: Literate Emacs configuration with Org mode
#+subtitle: Core configuration
#+author: Ryan Matlock

* Warnings, issues, and other problems + features to consider
Going to try to keep this relatively up-to-date with current issues with my
configuration. Hopefully I'll empty this section and have everything working
the way I want it at some point---and keep it that way!

** ~*Warnings*~

** ~*Messages*~

*** TODO ~org-iedit-in-src-block~

#+begin_example
File mode specification error: (void-variable org-iedit-in-src-block)
#+end_example

** Other

*** TODO restore ~custom.el~ settings as much as possible
You seem to have clobbered your ~custom.el~​/​~customize~ settings (I think by
merging back into git main or something like that), and it's messed up your
modeline and the way Org mode hides things like tildes. Fix it, and ensure that
you can't mess this up again, maybe by keeping ~custom.el~ out of this repo and
only symlinking to it.

*** TODO get =smartparens= to behave like =paredit=
Still having trouble with =turn-on-smartparens-strict-mode= for Lisp modes, and
I haven't figured out where to stuff =sp-use-paredit-bindings= (although maybe
that's because it's called interactively? that doesn't seem like it would be a
problem though).

*** TODO fuzzy file search like the old days with ~ivy~​(?)
Remember when you could ~C-x C-f~ for a file that you'd recently worked on, and
it didn't matter if it was in a different directory? That was a great feature
that I'm missing from my current configuration.

** Features to add [2/4]
- [X] complete the switch from ~package.el~ to ~straight.el~
  - [X] automatically install missing packages on startup (finding out the hard
        way that migrating this config to a new machine is a PITA)
- [X] get meta key working properly on M1 Mac Mini
- [ ] oBnOxIoUs CaSe (aka alternating case) region command (this may already
  exist, but I'm going to 1) respect other Emacs users enough to assume that it
  doesn't, and 2) try to write it myself because it seems straightforward but
  also good Emacs Lisp practice).
- [ ] [[https://github.com/abo-abo/hydra][hydra]] for fancy keybindings

*** TODO ~vertico-directory~
Not sure how to get this to work with straight.

* TODO Switches for additional configuration
See [[* Load additional org configuration files][code for handling processing of additional config files]] below.

+Since these are boolean, they should probably end in =-p=. Currently have ~C-c ;~
bound to =org-toggle-comment= but I want to use the appropriate ~iedit~ function,
so fix that first, then fix this.+

# #+begin_src emacs-lisp :eval no
#   (setq core-config-core-langs-switch nil)
#   (setq core-config-extras-switch t)
# #+end_src

# Figure out a smarter way of doing the above by using code like the following:

# #+begin_src emacs-lisp :eval no
#   ;; (defvar additional-config-files-alist
#   ;;   (("./core-langs.org" . t)
#   ;;    ("./extras.org" . t))
#   ;;   "Avoids repeating myself with analyzing switches for each file...")

#   ;; (defvar additional-config-files-nested-alist
#   ;;   (('core-langs
#   ;;     . (('name . "Core langs")
#   ;;        ('path . "./core-langs.org")
#   ;;        ('enable . t)))
#   ;;    ('extras
#   ;;     . (('name . "Extras")
#   ;;        ('path . "./extras.org")
#   ;;        ('enable . t)))
#   ;;    ('experimental
#   ;;     . (('name . "Experimental")
#   ;;        ('path . "./experimental-config.org")
#   ;;        ('enable . nil))))
#   ;;   "maybe a better way of doing this?")
# #+end_src

# It looks like I may be better off using a [[http://xahlee.info/emacs/emacs/elisp_hash_table.html][hash table]] or [[http://xahlee.info/emacs/emacs/elisp_property_list.html][property list (plist)]]
# instead of an [[http://xahlee.info/emacs/emacs/elisp_association_list.html][association list (alist)]] :thinking: ...or not?

This seems to work well, and it's pretty clear what's going on.

#+begin_src emacs-lisp
  (setq config-additional-org-config-files
    '(((name . "Core languages")
       (path . "./core-langs.org")
       (enable . t))
      ((name . "Extras")
       (path . "./extras.org")
       (enable . t))
      ((name . "Experimental configuration")
       (path . "./experimental-config.org")
       (enable . nil))))
#+end_src

+That's almost working as expected, although the relative path to this file
isn't being picked up as I'd expect. It's looking for something like
~$HOME/core-langs.org~ instead of ~$HOME/config/emacs/core-langs.org~.+ Fixed: kind
of a hack, but I hard coded ~~/config/emacs~ into =expand-file-name= below.


* TODO COMMENT Customize
It seems like the less I use ~customize~ outside of the literate configuration
files, the better because I can always use =(use-package ... :custom ...)= or
=setq= and annotate everything using Org mode. See [[https://emacs.stackexchange.com/questions/102/advantages-of-setting-variables-with-setq-instead-of-custom-el][Advantages of setting
variables with setq instead of custom.el? | emacs.stackexchange]] for a good
(albeit old) discussion of the relative merits of each. +I think this ought to
be loaded after everything else so customization override anything hard coded
into these config files.+ Moving this file led to weirdness/ugliness, so I'll
have to dig through the configuration. Bleh.

+There are probably a number of settings you can/should move into this,
although I'm curious how much of a pressing need there is given that with a
literate =.emacs= config, I can explain my reasoning for a setting.+

#+begin_src emacs-lisp :eval no
  (setq custom-file (expand-file-name "~/config/emacs/custom.el"))
  (load custom-file)
#+end_src

~custom.el~ must have gotten clobbered by a git merge. I guess the smart thing
to do would be to keep it in a separate directory so that doesn't happen in the
future, or I could see how easy it is to keep settings synced across devices.

* General interface & minor modes
** TODO ~package.el~ \to ~straight.el~
See https://github.com/raxod502/straight.el

I think the better way of doing this might be to move the relevant =use-package=
command to the natural place in the config file instead of all in one big list.

Old info:
=dotemacs.el= takes care of ~package~, ~use-package~, MELPA, and the ~org-babel~ stuff
necessary to evaluate the Emacs Lisp blocks in this file; see
https://cestlaz.github.io/posts/using-emacs-10-org-init/. However, if using
this config file on a new machine, the lack of installed packages will lead to
errors.

** TODO Save last n ~*Messages*~ buffers
It's helpful to automatically have a log of sorts, kind of like
~.bash_history~. Having this first ensures that it's done when setting up this
configuration on a new machine.

** Startup behavior
*** ~*scratch*~ behavior
#+begin_src emacs-lisp
  (setq initial-major-mode 'text-mode)
  (setq initial-scratch-message nil)
#+end_src

*** Turn off welcome screen
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

** TODO General look & feel
*** Solarized Dark theme
[[https://github.com/bbatsov/solarized-emacs][solarized-emacs]]

Note: you need to =setq= various properties /before/ you load the theme,
otherwise you'll get unexpected behaviors.

#+begin_src emacs-lisp
  (use-package solarized-theme
    :straight t
    :config
    (setq solarized-distinct-fringe-background t)
    (setq solarized-high-contrast-mode-line nil)
    (setq solarized-scale-org-headlines nil)
    (setq solarized-use-more-italic t)
    (setq solarized-use-variable-pitch nil)
    (load-theme 'solarized-dark t))
#+end_src

*** Set columns to wrap at 80 characters
Note: the fixed width font size for verbatim/code is slightly wider than
Inconsolata, so either change the face or make the window slightly wider maybe?
You ought to set one value as a number and then do the appropriate math with
that value rather than what you've done with hard-coding 79 and 80 characters
into this configuration.

see [[https://www.gnu.org/software/emacs/manual/html_node/efaq/Turning-on-auto_002dfill-by-default.html][Turn on ~auto-fill-mode~ by default]]

#+begin_src emacs-lisp
  ;; (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (setq-default fill-column 79)
  (setq-default auto-fill-function 'do-auto-fill)
#+end_src

*** TODO ~fill-column-indicator~
[[https://www.emacswiki.org/emacs/FillColumnIndicator][fill-column-indicator]]

# #+begin_src emacs-lisp
#   (use-package fill-column-indicator
#     :straight t
#     :hook (prog-mode . fill-column-indicator-mode)
#     :config (setq fci-rule-width 1))
# #+end_src

# Not working:
# #+begin_verbatim
# command-execute: Autoloading file path/to/.emacs.d/straight/build/fill-column-indicator/fill-column-indicator.elc failed to define function fill-column-indicator-mode
# #+end_verbatim

*** GUI
- no menu bar; see see http://emacswiki.org/emacs/MenuBar#toc1
- no tool bar
- no scroll bar
- 96% opacity (matches OS X Terminal); see see
  http://stackoverflow.com/questions/21946382/how-to-get-transparent-window-in-gnu-emacs-on-osx-mavericks
- default frame size: 80w (+ padding b/c verbatim/code font for Org mode is
  slightly wider than Inconsolata) x 45h
- define ~std-frame~ to return to default 80w x 45h
- define ~lrg-frame~, which accommodates two side-by-side windows
- define ~xl-frame~, which accommodates three side-by-side-by-side windows
- use Inconsolata size 15 font
- set unicode font to Unifont
- +use Solarized Dark theme; see+
  +https://emacs.stackexchange.com/questions/10246/emacs-always-ask-to-trust-colour-theme-at-startup+
- disable mouse inputs (except scrolling?); see
  http://stackoverflow.com/questions/4906534/disable-mouse-clicks-in-emacs
- disable =C-z=, which minimizes Emacs in GUI mode
- disable ~visible-bell~; see
  http://stackoverflow.com/questions/36805713/emacs-blank-square-on-mac-os-x/36813418#36813418

#+begin_src emacs-lisp
  (when window-system
    (menu-bar-mode -1)  ;; not working?
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (set-frame-parameter (selected-frame) 'alpha '(96 96))
    (add-to-list 'default-frame-alist '(alpha 96 96))
    (defvar gui-config-frame-width-padding 4)
    (defvar gui-config-frame-width (+ fill-column
                                      gui-config-frame-width-padding
                                      1))
    (defvar gui-config-frame-height 45)
    (set-frame-size (selected-frame)
                    gui-config-frame-width
                    gui-config-frame-height)
    (defun side-by-side ()
      "resizes the frame to accommodate two windows side-by-side"
      (interactive)
      (set-frame-size (selected-frame)
                      ;; used to be + 3, but I think there are some side columns
                      ;; that take away screen real estate now?
                      (+ (* gui-config-frame-width 2) 7)
                      gui-config-frame-height))
    (defun std-frame ()
      "reverts framesize to standard"
      (interactive)
      (set-frame-size (selected-frame)
                      (+ 1 gui-config-frame-width)
                      gui-config-frame-height))
    (defun gui-config-calculate-frame-width (num-windows)
      "calculate how wide the frame should be for a number of windows"
      (let ((inter-window-space 2))
        (+ (* gui-config-frame-width num-windows)
           (* inter-window-space (- num-windows 1)))))
    (defun lrg-frame ()
      "resize frame for 2 side-by-side windows (same as side-by-side function,
       which is being kept for now for the sake of legacy)"
      (interactive)
      (let ((num-windows 2))
        (set-frame-size (selected-frame)
                        (gui-config-calculate-frame-width num-windows)
                        gui-config-frame-height)))
    (defun xl-frame ()
      "resize frame for 3 side-by-side-by-side windows + extra height"
      (interactive)
      (let ((num-windows 3)
            (height-multiplier 1.3))
        (set-frame-size (selected-frame)
                        (gui-config-calculate-frame-width num-windows)
                        (floor (* gui-config-frame-height height-multiplier)))))
    (defvar gui-config-font-face "Inconsolata")
    (defvar gui-config-font-size 15)
    (set-fontset-font t 'unicode "Unifont" nil 'prepend)
    (set-frame-font (concat gui-config-font-face
                            "-"
                            (number-to-string gui-config-font-size)))
    (dolist (k '([mouse-1] [down-mouse-1] [drag-mouse-1] [double-mouse-1]
                 [triple-mouse-1] [mouse-2] [down-mouse-2] [drag-mouse-2]
                 [double-mouse-2] [triple-mouse-2] [mouse-3] [down-mouse-3]
                 [drag-mouse-3] [double-mouse-3] [triple-mouse-3] [mouse-4]
                 [down-mouse-4] [drag-mouse-4] [double-mouse-4]
                 [triple-mouse-4] [mouse-5] [down-mouse-5] [drag-mouse-5]
                 [double-mouse-5] [triple-mouse-5]))
      (global-unset-key k))
    (global-unset-key (kbd "C-z"))
    (setq visible-bell nil))
#+end_src

*** Prettier mode line
I checked Reddit to get some ideas for which mode line packages are popular
these days. A lot of people seem to be happy with Doom Emacs/[[https://github.com/seagle0128/doom-modeline][doom-modeline]], and
[[https://gitlab.com/jessieh/mood-line][mood-line]] is a lightweight alternative.

If that doesn't work out, [[https://github.com/tarsius/minions][minions]] (minor mode lighter \to separate menu) + [[https://github.com/tarsius/moody][moody]]
also looks really nice. It looks like you could actually use ~mood-line~ with
~minions~ with some tweaks; see [[https://gitlab.com/jessieh/mood-line/-/issues/21][Support Minions Mode]].

By default, ~mood-line~'s git status looks unreadable in the active
window/frame/buffer/whatever the right term is when using Solarized Dark theme
(bright yellow text over light grey background) [note: only true when
=(solarized-high-contrast-mode-line t)= ]. I think the issue can be
traced to

# #+begin_src emacs-lisp :eval no
#   (defface mood-line-status-info
#     '((t (:inherit (font-lock-keyword-face))))
#     "Face used for generic status indicators in the mode-line."
#     :group 'mood-line)
# #+end_src

so I'm going to try modifying that. Actually, looking at the Customize options,
=mood-line-status-success= uses the same bright yellow color, and
=mood-line-status-neutral= uses only a slightly darker grey than the background.

#+begin_src emacs-lisp
  (use-package mood-line
    :straight t
    ;; :requires solarized-theme
    ;; :defer t
    :config
    ;; having issues with solarized-dark-color-palette-alist :shrug:
    ;; (progn
    ;;   (when (and (member 'solarized-dark custom-enabled-themes)
    ;;              solarized-high-contrast-mode-line)
    ;;     (progn
    ;;       ;; (message "You're using Solarized Dark")
    ;;       ;; note: hex codes work just as well as color strings
    ;;       (set-face-attribute
    ;;        'mood-line-status-info
    ;;        nil
    ;;        :foreground
    ;;        (cdr (assoc 'blue-d solarized-dark-color-palette-alist)))
    ;;       (set-face-attribute
    ;;        'mood-line-status-success
    ;;        nil
    ;;        :foreground
    ;;        (cdr (assoc 'blue-d solarized-dark-color-palette-alist)))
    ;;       (set-face-attribute
    ;;        'mood-line-status-neutral
    ;;        nil
    ;;        :foreground
    ;;        (cdr (assoc 'green-d solarized-dark-color-palette-alist))))))
    ;;
    ;; stll having trouble with solarized-dark-color-palette-alist
    ;; ¯\_(ツ)_/¯
    ;;
    ;; (set-face-attribute
    ;;  'mood-line-status-info
    ;;  nil
    ;;  :foreground
    ;;  (cdr (assoc 'blue-d solarized-dark-color-palette-alist)))
    ;; (set-face-attribute
    ;;  'mood-line-status-success
    ;;  nil
    ;;  :foreground
    ;;  (cdr (assoc 'blue-d solarized-dark-color-palette-alist)))
    ;; (set-face-attribute
    ;;  'mood-line-status-neutral
    ;;  nil
    ;;  :foreground
    ;;  (cdr (assoc 'green-d solarized-dark-color-palette-alist)))
    (mood-line-mode))
#+end_src

Getting warning on startup now: ~Error (use-package): mood-line/:config:
Symbol’s value as variable is void: solarized-dark-color-palette-alist~ even
after adding =:requires solarized-theme= :shrug: Weirder still: when I run ~M-x
reload-dotemacs~, I don't get the warning and instead get the expected
behavior. Weirder still: I can run ~C-h v solarized-dark-color-palette-alist~,
get the value, and then run ~M-x reload-dotemacs~ and everything works.

*** ~exec-path-from-shell~ to fix ~exec-path~​/​~PATH~ behavior in MacOS GUI
[[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] fixes behavior of how environment variables are loaded in
MacOS GUI Emacs.

[Note that you need to use [[https://www.gnu.org/software/emacs/manual/html_node/eintr/progn.html][progn]] in order to evaluate the series of
s-expressions in =:config=.]

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :config (progn
              (when (memq window-system '(mac ns x))
                (exec-path-from-shell-initialize))
              (when (daemonp)
                (exec-path-from-shell-initialize))
              (exec-path-from-shell-copy-env "PYTHONPATH")))
#+end_src

**** TODO read ~.bashrc~ & use bash as default ANSI term
Bear in mind that on your MacBook Pro, ~bash~ (the Homebrew version you use) is
located at ~/usr/local/bin/bash~, but your M1 Mac Mini, it's located at
~/opt/homebrew/bin/bash~, so maybe that's an issue? Probably helpful to know
which sort of device you're on.

https://osxdaily.com/2011/07/15/get-cpu-info-via-command-line-in-mac-os-x/

#+begin_src bash :eval no
  $ sysctl -n machdep.cpu.brand_string
  Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz
#+end_src

[[https://emacs.stackexchange.com/questions/14858/how-to-check-in-elisp-if-a-string-is-a-substring-of-another-string][How to check in elisp if a string is a substring of another string? |
emacs.stackexchange]]

#+begin_src emacs-lisp :eval no
  (string-match-p (regexp-quote "Intel")
                  "Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz")
#+end_src

Alternately, you may simply want to check for the existence of one or the other
binaries, and then settle on ~/bin/bash~ if neither exists ¯\_(ツ)_/¯

[[https://stackoverflow.com/a/37523213][How to define a default shell for emacs | stackoverflow]]

#+begin_src emacs-lisp
  (defvar shell-paths-alist
    '((homebrew-apple-silicon-bash . "/opt/homebrew/bin/bash")
      (homebrew-intel-mac-bash . "/usr/local/bin/bash")
      (builtin-bash . "/bin/bash"))
    "Alist of form  ((descriptive-name . /path/to/shell) ...) where
  /path/to/shell is a preferred shell for shell-file-name.")

  (defun set-default-shell-file-name (sh-paths-alist &optional warn-p)
    "Set shell-file-name to first existing file in paths-alist. If warn-p is t and
  no path in sh-paths-alist is valid, then a warning will be raised."
    (let ((sh-path-alist (car sh-paths-alist)))
      (cond ((and sh-path-alist (file-exists-p (cdr sh-path-alist)))
             (progn
               (setq-default shell-file-name (cdr sh-path-alist))
               (message (format "Using %s for shell-file-name at %s."
                                (car sh-path-alist)
                                (cdr sh-path-alist)))))
            (sh-path-alist
             (set-default-shell-file-name (cdr sh-paths-alist) warn-p))
            (warn-p
             (warn (format "No valid shell path in %s" sh-paths-alist))))))
  (when (memq window-system '(mac ns x))
    (set-default-shell-file-name shell-paths-alist t))
#+end_src

When I finally decide to join the modern era and use zsh or fish, it will be
easy to =cons= onto =shell-paths-alist=.

*** TODO COMMENT ~all-the-icons.el~ + ~all-the-icons-completion~
[[https://github.com/domtronn/all-the-icons.el][all-the-icons.el]]

[[https://github.com/iyefrat/all-the-icons-completion][all-the-icons-completion]]

#+begin_src emacs-lisp :eval no
  ;; (require 'font-lock)
  ;; (use-package font-lock+
  ;;   :straight t)
  ;; not actually needed
  ;; see https://github.com/domtronn/all-the-icons.el/pull/106

  (use-package all-the-icons
    :straight t
    :if (display-graphic-p))

  (use-package all-the-icons-completion
    :straight t
    ;; :requires (all-the-icons marginalia)
    :requires all-the-icons
    ;; :hook ((marginalia-mode . all-the-icons-completition-marginalia-setup))
    :config
    (all-the-icons-completion-mode))
#+end_src

*** ~whitespace~
[[https://www.emacswiki.org/emacs/WhiteSpace][whitespace]] package: highlight lines >80 characters wide, [[https://www.emacswiki.org/emacs/WhiteSpace#h5o-9][highlight ~TAB~
characters]] (~untabify~ on saving should take care of this, but IIRC makefiles
require tabs, and maybe I'll run into some situations where I want to be able
to see them).

#+begin_src emacs-lisp
  (use-package whitespace
    :straight t
    :hook
    (prog-mode . whitespace-mode)
    (org-mode . whitespace-mode)
    (tex-mode . whitespace-mode)
    (latex-mode . whitespace-mode)
    (LaTeX-mode . whitespace-mode)
    :config
    (setq whitespace-display-characters
          ;; display <tab> as »
          '((tab-mark ?\t [?\xBB ?\t] [?\\ ?\t])))
    (setq whitespace-line-column
          ;; 80 characters
          (+ fill-column 1))
    (setq whitespace-style '(face
                             trailing
                             lines-tail
                             tabs
                             tab-mark)))
#+end_src

*** TODO Tab/space handling -- improve this
Tip: ~M-x~ [[http://pragmaticemacs.com/emacs/convert-tabs-to-spaces/][untabify]] works on a region, ~C-u M-x untabify~ works on a whole
buffer. Maybe make a function, =safe-untabify-buffer=, that warns if you attempt
to =untabify= in a mode that requires tabs?

+Use spaces instead of tabs (generally); provide function to ``untabify''
buffer, see [[http://stackoverflow.com/questions/24832699/emacs-24-untabify-on-save-for-everything-except-makefiles/24857101#24857101][Emacs 24: untabify on save for everything *except* makefiles |
stackoverflow]]. Note: don't use on makefiles, which *require* tabs instead of
spaces.+

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  ;; (defvar tabbed-mode-list
  ;;   '('makefile-mode)
  ;;   "docstring")
  ;; (defun untabify-buffer ()
  ;;   (unless (derived-mode-p 'makefile-mode)
  ;;     (untabify (point-min) (point-max))))
#+end_src

I used to run =untabify-except-makefiles= on every save, but that's really not
necessary, so I'm going to remove that feature.

#+begin_src emacs-lisp :eval no
  (defun untabify-except-makefiles ()
    (unless (derived-mode-p 'makefile-mode)
      (untabify (point-min) (point-max))))
  (add-hook 'before-save-hook 'untabify-except-makefiles)
#+end_src

*** TODO ~column-number-mode~ / ~display-line-numbers-mode~
[[https://www.gnu.org/software/emacs/manual/html_node/efaq/Displaying-the-current-line-or-column.html][column-number-mode]]

[[https://www.emacswiki.org/emacs/LineNumbers][display-line-number-mode]] enable this??

#+begin_src emacs-lisp
  (setq column-number-mode t)
#+end_src

*** ~emojify~
[[https://github.com/iqbalansari/emacs-emojify][emojify]] enables emojis (e.g. 🙂), GitHub-style emojis (e.g. ~:smile:~), and ASCII
emojis (e.g. ~:)~)

#+begin_src emacs-lisp
  (use-package emojify
    :straight t
    :hook (after-init . global-emojify-mode)
    :config (setq emojify-display-style 'image))
#+end_src

Note that the =gitmoji= =:​memo:= symbol is the same as ~emojify~'s =:​pencil:=, and
=gitmoji='s =:​pencil:= symbol is the same as ~emojify~'s =:​pencil2:=.

#+begin_src emacs-lisp
  (setq emojify-user-emojis
        '((":memo:" .
           (("name" . "Memo")
            ("image" .
             "~/.emacs.d/emojis/emojione-v2.2.6-22/1f4dd.png")
            ("style" . "github")))
          (":adhesive_bandage:" .
           (("name" . "Adhesive Bandage")
            ("image" .
             "~/.emacs.d/emojis/user-added/adhesive_bandage.png")
            ("style" . "github")))))
  (when (featurep 'emojify)
    (emojify-set-emoji-data))
#+end_src

*** ~highlight-indent-guides~
[[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]] shows indentation level. I used to do this with a pipe
character, but I think the ='fill= and ='column= options look better now.

#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :straight t
    :hook (prog-mode . highlight-indent-guides-mode)
    :config (progn
              ;; old way of doing it
              ;; (setq highlight-indent-guides-method 'character)
              ;; (setq highlight-indent-guides-character ?\|)
              ;; an alternative
              ;; (setq highlight-indent-guides-method 'column)
              ;; this one looks pretty cool
              (setq highlight-indent-guides-method 'fill)))
#+end_src

*** Auto-indentation on =RET= for various modes
See http://www.emacswiki.org/emacs/AutoIndentation

#+begin_src emacs-lisp
  (defun set-newline-and-indent ()
    (local-set-key (kbd "RET") 'newline-and-indent))
  (add-hook 'html-mode-hook 'set-newline-and-indent)
  (add-hook 'lisp-mode-hook 'set-newline-and-indent)
  (add-hook 'LaTeX-mode-hook 'set-newline-and-indent)
  (add-hook 'c-mode-common-hook 'set-newline-and-indent)
#+end_src

*** TODO Global font lock mode -- move to custom??
This basically enables syntax highlighting by allowing for different faces for
keywords, comments, etc.; see
https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html

#+begin_src emacs-lisp
  (global-font-lock-mode 1)
#+end_src

** Preferred global keybindings
*** Meta key behavior for Mac
See https://www.emacswiki.org/emacs/MetaKeyProblems#h5o-18

#+begin_src emacs-lisp
  (setq mac-option-modifier 'meta)
#+end_src

(Works on M1 Mac Mini (9.1?), although I don't think this was necessary on a
late 2019 MacBook Pro 16".)

*** Iedit: edit multiple occcurrences simultaneously
This has been /such/ an important extension that I don't think I could live
without it. Really can't overstate how useful it is; see
[[https://github.com/victorhge/iedit][iedit | GitHub]]. Per documentation's suggestion, =iedit-mode= is bound to ~C-c ;~.

#+begin_src emacs-lisp
  (use-package iedit
    :straight t
    :bind ("C-c ;" . iedit-mode))
#+end_src

*** Reload =.emacs=
See
http://stackoverflow.com/questions/24810079/key-binding-to-reload-emacs-after-changing-it

#+begin_src emacs-lisp
  (defun reload-dotemacs ()
    (interactive)
    (load-file "~/.emacs"))
  (global-set-key (kbd "C-c <f12>") 'reload-dotemacs)
#+end_src

*** Copy selection without killing
See
http://stackoverflow.com/questions/3158484/emacs-copying-text-without-killing-it
and http://www.emacswiki.org/emacs/KeyboardMacros

#+begin_src emacs-lisp
  (global-set-key (kbd "M-w") 'kill-ring-save)
#+end_src

*** Switch focus to previous window with =C-x p=
This complements ~other-window~, which is bound to =C-x o=.

#+begin_src emacs-lisp
(global-set-key (kbd "C-x p") 'previous-multiframe-window)
#+end_src

*** Count words in region
Documented in old =.emacs= as "~count-words-region~ \to ~count-words~" :shrug:

#+begin_src emacs-lisp
  (global-set-key (kbd "M-=") 'count-words)
  (put 'narrow-to-region 'disabled nil)
#+end_src

** TODO Preferred multi-mode keybindings
*** TODO Fix auto-identation for multiple modes
This is probably no longer the best way to achieve this.

See http://www.emacswiki.org/emacs/AutoIndentation

#+begin_src emacs-lisp
  (defun set-newline-and-indent ()
    (local-set-key (kbd "RET") 'newline-and-indent))
  (add-hook 'html-mode-hook 'set-newline-and-indent)
  (add-hook 'lisp-mode-hook 'set-newline-and-indent)
  (add-hook 'LaTeX-mode-hook 'set-newline-and-indent)
  ;; (add-hook 'css-mode 'set-newline-and-indent)
  (add-hook 'c-mode-common-hook 'set-newline-and-indent)
#+end_src

** TODO Company (COMPlete ANYthing) (\to ~core-langs.org~ or delete)
~corfu~ might cover this now? In any case, I think I was only using this with
Python, so it ought to be moved to ~core-langs.org~.

# #+begin_src emacs-lisp
#   (add-hook 'after-init-hook 'global-company-mode)
#   (global-set-key (kbd "C-c C-<tab>") 'company-complete)
# #+end_src

*** Python: company-jedi

# #+begin_src emacs-lisp
#   (defun python-company-jedi-hook ()
#     (add-to-list 'company-backends 'company-jedi))
#   (add-hook 'python-mode-hook 'python-company-jedi-hook)
# #+end_src

** TODO Flycheck
** TODO ~ispell~ with ~aspell~
Still need to sync ~aspell~ dictionaries across computers!

See
http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html
and
http://emacs-fu.blogspot.com/2009/12/automatically-checking-your-spelling.html
and http://blog.binchen.org/posts/effective-spell-check-in-emacs.html.

Found a very old blog post ([[http://emacs-fu.blogspot.com/2008/12/running-some-external-program-only-if.html][running some external program only if it exists |
Emacs-fu]]) that should allow me to bug myself if I don't have an ispell program
installed.

#+begin_src emacs-lisp
  (setq ispell-program-name "aspell"
        ispell-extra-args '("--sug-mode=ultra"))
  (unless (executable-find ispell-program-name)
    (display-warning
     :warning
     (format "ispell program not found: %s" ispell-program-name)))
#+end_src

** ~git~
~git~ is important enough to include in ~core-config~.

*** ~git-modes~
~git-modes~ allows for syntax highlighting in ~.gitignore~ and ~.gitconfig~
files. See https://github.com/magit/git-modes.

#+begin_src emacs-lisp
  (use-package git-modes
    :straight t)
  (add-to-list 'auto-mode-alist
               (cons "/gitignore" 'gitignore-mode))
  (add-to-list 'auto-mode-alist
               (cons "/gitconfig" 'gitconfig-mode))
#+end_src

*** Magit
[[https://magit.vc][Magit]] is a ~git~ ``porcelain'' essential to my Emacs experience and arguably one
of Emacs's killer apps.

#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :bind ("C-c 0" . magit-status))
  (use-package magit-filenotify
    :straight t)
  ;; (global-set-key (kbd "C-c 0") 'magit-status)
#+end_src

** TODO Completions: ~vertico~ + ~corfu~
I used to use a combination of ~ido~ and ~ivy~, but having seen a ~vertico~ demo, I
thought I'd give it a try. ~ido~ is supposedly a bit outdated now anyway.

*** TODO ~vertico~
Following config taken from
https://systemcrafters.cc/emacs-tips/streamline-completions-with-vertico/ and
lightly edited.

So far I'm loving ~vertico~ + ~savehist~ for ~M-x~ commands! However, it seems like
=ido-everywhere= is still set to =t= by default for some reason. Oh, I have an
idea: I bet it's in =custom.el=! I'm starting to think the smarter/better way to
do most customizations is with =:custom= inside of =(straight-)use-package=
statements. Yep, that was it! Going forward, I'll try to move what I can out of
~custom.el~.

~vertico-directory~ provides for "Ido-like directory navigation," which sounds
nice to have again; configuration taken from [[https://github.com/minad/vertico#extensions][vertico | Extensions]].

#+begin_src emacs-lisp
  (use-package vertico
    :straight t
    :bind (:map vertico-map
           ("C-f" . vertico-exit)
           :map minibuffer-local-map
           ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  (use-package savehist
    :straight t
    :init
    (savehist-mode))

  ;; (use-package vertico-directory
  ;;   ;; see https://github.com/minad/vertico/issues/83#issuecomment-883762831
  ;;   :straight (vertico :includes vertico-directory
  ;;                      :files (:defaults "extensions/vertico-directory.el"))
  ;;   :after vertico
  ;;   :ensure nil
  ;;   ;; More convenient directory navigation commands
  ;;   :bind (:map vertico-map
  ;;               ("RET" . vertico-directory-enter)
  ;;               ("DEL" . vertico-directory-delete-char)
  ;;               ("M-DEL" . vertico-directory-delete-word))
  ;;   ;; Tidy shadowed file names
  ;;   :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
  ;; still not working -- look into this later
  ;; try restarting Emacs? -- nope

  ;; (use-package marginalia
  ;;   :after vertico
  ;;   :straight t
  ;;   :custom
  ;;   (marginalia-annotators '(marginalia-annotators-heavy
  ;;                            marginalia-annotators-light nil))
  ;;   :init
  ;;   (marginalia-mode))
#+end_src

#+begin_example
Error (use-package): vertico/:init: Symbol’s value as variable is void:
vertico-map Disable showing Disable logging
Warning (straight): Two different recipes given for "vertico" (:files cannot be
both ("*" (:exclude ".git")) and (:defaults "extensions/vertico-directory.el"))
Disable showing Disable logging
Error (use-package): corfu/:init: Symbol’s function definition is void:
corfu-global-mode Disable showing Disable logging
Error (use-package): auctex/:catch: Loading file
/Users/matlock/.emacs.d/straight/build/auctex/auctex.elc failed to provide
feature ‘auctex’ Disable showing Disable logging
#+end_example

Getting these warnings after restarting Emacs. Upgraded ~vertico~, commented out
~vertico-directory~ stuff, restarted, and now ~vertico~ isn't working anymore.

Somehow that really messed everything up, and I had to nuke my
~$HOME/.emacs.d/straight/~ directory, although it seems to be fine now. Going to
try to enable ~vertico-directory~ again. -- Nope, that didn't work.

Now getting these warnings on startup:

#+begin_example
Error (use-package): corfu/:init: Symbol’s function definition is void:
corfu-global-mode Disable showing Disable logging
Error (use-package): auctex/:catch: Loading file
/Users/matlock/.emacs.d/straight/build/auctex/auctex.elc failed to provide
feature ‘auctex’ Disable showing Disable logging
#+end_example

*** ~corfu~
``Corfu is the minimalistic ~completion-in-region~ counterpart of the ~vertico~
minibuffer UI.'' -- https://github.com/minad/corfu

#+begin_src emacs-lisp
  (use-package corfu
    :straight t
    :custom
    (corfu-cycle t)                   ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-commit-predicate nil)   ;; Do not commit selected candidates on
    ;;                                ;; next input
    ;; (corfu-quit-at-boundary t)     ;; Automatically quit at word boundary
    ;; (corfu-quit-no-match t)        ;; Automatically quit if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
    ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; You may want to enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since dabbrev can be used globally (M-/).
    :init
    (global-corfu-mode))

  ;; Optionally use the `orderless' completion style. See `+orderless-dispatch'
  ;; in the Consult wiki for an advanced Orderless style dispatcher.
  ;; Enable `partial-completion' for files to allow path expansion.
  ;; You may prefer to use `initials' instead of `partial-completion'.
  (use-package orderless
    :straight t
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides
          '((file (styles . (partial-completion))))))

  ;; Use dabbrev with Corfu!
  (use-package dabbrev
    :straight t
    ;; Swap M-/ and C-M-/
    :bind (("M-/" . dabbrev-completion)
           ("C-M-/" . dabbrev-expand)))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))
#+end_src

** TODO Project handling: ~projectile~
[[https://github.com/bbatsov/projectile][projectile]]: per [[https://youtu.be/bFS0V_4YfhY][Lukewh's short projectile introduction | YouTube]], it's useful
simply for navigating between and within projects, as defined by the presence
of a ~.git~ folder or something similar.

#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :config
    (projectile-mode +1)
    ;; recommended MacOS keybinding
    ;; (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    ;; (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-x p") 'projectile-commander))
#+end_src

Issue (tangential): tried using recommended ~s-p~ keybinding, and it appears that
~⌘~ + ~p~ is read as ~M-p~. I think ~⌘~ should be the super key, ~s-~, but maybe I'm
wrong?

Issue 2: =projectile-command-map= doesn't seem to be the right function to
invoke. ~M-x projectile-commander~ seems to work, so try binding that? Yep, that
seems to do the trick. Now I just need to remember what the commands do.

** TODO LSP (Language Server Protocol)
See [[https://www.mattduck.com/lsp-python-getting-started.html][Getting started with ~lsp-mode~ for Python | matt duck]] (posted
[2020-04-26 Sun])

https://github.com/emacs-lsp/lsp-haskell

https://haskell-language-server.readthedocs.io/en/latest/installation.html

https://abailly.github.io/posts/a-modern-haskell-env.html

#+begin_src bash :eval no
  $ which haskell-language-server-wrapper
  $HOME/.ghcup/bin/haskell-language-server-wrapper
#+end_src

#+begin_src emacs-lisp
  (use-package haskell-mode
    :straight t)

  (use-package lsp-mode
    :straight t
      :config
      (progn (lsp-register-custom-settings
              '(("pyls.plugins.pyls_mypy.enabled" t t)
                ("pyls.plugins.pyls_mypy.live_mode" nil t)
                ("pyls.plugins.pyls_black.enabled" t t)
                ("pyls.plugins.pyls_isort.enabled" t t)
                ("pyls.plugins.flake8.enabled" t t))))
      :hook
      ((python-mode . lsp)
       (haskell-mode . lsp)
       (haskell-literate-mode . lsp))
      :commands lsp)

  (use-package lsp-haskell
    :ensure t
    :config
    (setq lsp-haskell-server-path "haskell-language-server-wrapper")
    (setq lsp-haskell-server-args ())
    ;; Comment/uncomment this line to see interactions between lsp client/server.
    ;; (setq lsp-log-io t)
    )

  (add-hook 'lsp-after-initialize-hook
            #'(lambda ()
                (lsp--set-configuration
                 '(:haskell
                   (:plugin
                    (:tactics
                     (:config
                      (:timeout_duration 5))))))))

  (use-package lsp-ui
    :commands lsp-ui-mode)
#+end_src

** TODO TRAMP
*** TODO Fix problem with hanging -- confused about this/move to custom?
#+begin_src emacs-lisp
(eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
#+end_src

Maybe this should be updated to =/usr/local/bin/bash= or I should figure out how
to symlink =/usr/local/bin/bash= to =/bin/bash=; if so, the above
~explicit-shell-file-name~ in ANSI term section should be updated

*** TODO Use SSH -- move to custom?
See
https://www.gnu.org/software/emacs/manual/html_node/tramp/Default-Method.html

#+begin_src emacs-lisp
  (setq tramp-default-method "ssh")
#+end_src

** Direct text handling
*** Enable ~downcase-region~, ~upcase-region~
The latter was hanging out in my Python configuration section for some
reason :shrug:. Later, it appeared to be added to the base =~/.emacs= file.

#+begin_src emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+end_src

*** ~unfill~
``Functions providing the inverse of Emacs' fill-paragraph and fill-region'' --
[[https://github.com/purcell/unfill][unfill | GitHub]]. Provides functions =unfill-region=, =unfill-paragraph=, and
=unfill-toggle=.

#+begin_src emacs-lisp
  (use-package unfill
    :straight t)
#+end_src

** Miscellaneous
*** Disable "Package ~cl~ is deprecated" warning on startup
See https://github.com/kiwanami/emacs-epc/issues/35. Might be a good idea to
investigate this at some point and actually fix it instead of applying a
bandaid.

#+begin_src emacs-lisp
  (setq byte-compile-warnings '(cl-functions))
#+end_src

*** ~beacon~
[[https://github.com/Malabarba/beacon][beacon]] highlights the cursor when scrolling. Seems helpful!

#+begin_src emacs-lisp
  (use-package beacon
    :straight t
    :config
    (beacon-mode 1))
#+end_src

*** ~neotree~
[[https://github.com/jaypei/emacs-neotree][neotree]] works like NerdTree for Vim (basically a directory tree that opens up
beside your buffer).

#+begin_src emacs-lisp
  (use-package neotree
    :straight t
    :config
    (global-set-key [f8] 'neotree-toggle))
#+end_src

** TODO Silly stuff
*** Shrug emoticon
#+begin_src emacs-lisp
  (defun shrug-emoticon ()
    "insert ¯\\_(ツ)_/¯ anywhere in your code (preferably comments)"
    (interactive)
    ;; note that the backslash needs to be escaped
    (insert "¯\\_(ツ)_/¯"))
#+end_src

*** Magic 8-ball
Works just like a magic 8-ball with its default configuration. Read the
documentation for customization options.

Note that the prefix, =C-u=, changes the behavior (by adding "[​=<timestamp>=​]
=<question>= =<response>=" to the ~kill ring~).

#+begin_src emacs-lisp
  (straight-use-package
   '(eight-ball
     :type git
     :host github
     :repo "RyanMatlock/eight-ball"))
  (require 'eight-ball)
  (global-set-key (kbd "C-c 8") 'eight-ball)
#+end_src

*** TODO ~fortune~

*** TODO Define ~obnoxious-case-region~
Type a line normally and cOnVeRt It To ThIs. Maybe pass a prefix argument to
shift if it starts uppercase or lowercase?

* TODO Emacs Lisp

** REPL

#+begin_src emacs-lisp
  (use-package elisp-slime-nav)
#+end_src

Update: These days I'm using [[https://www.emacswiki.org/emacs/InferiorEmacsLispMode][IELM]] (Inferior Emacs Lisp Mode), which works
really well. Not sure that ~elisp-slime-nav~ is useful, but I'll keep this here
for now.

*** Eldoc hints
See [[https://www.n16f.net/blog/making-ielm-more-comfortable/][Making IELM More Comfortable | Nicolas Martyanoff — Brain dump]] (nice
because it's recent---dated [2023-04-08 Sat])

Eldoc mode gives you hints in the minibuffer.

#+begin_src emacs-lisp
  (add-hook 'ielm-mode-hook 'eldoc-mode)
#+end_src

*** IELM keybindings

#+begin_src emacs-lisp
  (with-eval-after-load 'ielm
    (progn
      (define-key ielm-map (kbd "C-c M-<return>") 'ielm-return-for-effect)
      (define-key ielm-map (kbd "M-<return>") 'ielm-return)
      (define-key ielm-map (kbd "<return>") 'sp-newline)))
#+end_src

tl;dr:
- While working on Exercism's Emacs Lisp track and using IELM to experiment, I
  was using ~M-x ielm-return~ to evaluate expressions, which was a little
  tedious but not /terrible/ given how I have my =execute-extended-command=
  (i.e. ~M-x~) history set up
- Paredit mode had =paredit-RET= bound to ~M-<return>~, and according to [[https://stackoverflow.com/a/16614083][Why
  can't I change paredit keybindings | stackoverflow]], paredit mode doesn't play
  nicely with the user trying to rebind keys ([[https://github.com/Fuco1/smartparens][smartparens]] is supposedly better
  in that regard)
- I want =<return>= to insert a newline, =M-<return>= to evaluate an
  s-expression, and =C-c M-<return>= to evaluate an sexp for side
  effects/without printing the result
- =ielm-map= is an alias to =inferior-emacs-lisp-mode-map= (per
  https://github.com/eXLabT/emacs-lisp/blob/master/ielm.elc)
- =with-eval-after-load= works, =eval-after-load= doesn't, and I don't really
  understand why at the moment.
- [[https://stackoverflow.com/a/15869858][Bind command to C-RET in Emacs | stackoverflow]] has great advice for how to
  format =kbd='s argument: ~C-h k~ the key combination you want to use and see
  what Emacs calls it combination, e.g. ~C-h k C-RET~ gives ~C-<return>~, so
  you can use =(kbd "C-<return>")= when you want to bind a command to ~C-RET~.

#+begin_quote
Good to know: ~C-c M-o~ is bound to =comint-clear-buffer=, and ~C-c C-l~ is
bound to =comint-dynamic-list-input-ring=, which is basically the history of
the input.
#+end_quote

** Parentheses
*** TODO +Paredit+ smartparens
Balance parentheses automatically; see http://www.emacswiki.org/emacs/ParEdit.

# #+begin_src emacs-lisp
#   (use-package paredit
#     :straight t
#     :hook ((emacs-lisp-mode . paredit-mode)
#            (lisp-mode . paredit-mode)
#            (common-lisp-mode . paredit-mode)
#            (lisp-interaction-mode . paredit-mode)
#            (geiser-repl-mode . paredit-mode)
#            (slime-repl-mode . paredit-mode)
#            (ielm-mode . paredit-mode)
#            (scheme-mode . paredit-mode)))
# #+end_src

# #+begin_src emacs-lisp
#   (define-key paredit-mode-map (kbd "<ret>") nil)
#   (define-key paredit-mode-map (kbd "C-j") 'paredit-newline)
#   (define-key inferior-emacs-lisp-mode-map (kbd "<ret>") 'ielm-return)
# #+end_src

Per [[https://stackoverflow.com/a/16614083][Why can't I change paredit keybindings]] (which is almost 10 years old at the
time of visiting this), I should use [[https://github.com/Fuco1/smartparens][smartparens]] instead of paredit because of
the convoluted way paredit handles keybindings (no wonder you've been having so
much trouble!).

#+begin_src emacs-lisp
  (use-package smartparens
    :straight t
    :hook ((emacs-lisp-mode . 'turn-on-smartparens-strict-mode)
           (lisp-mode . 'turn-on-smartparens-strict-mode)
           (comint-mode . 'turn-on-smartparens-strict-mode))
    :config (require 'smartparens-config))

  ;; (sp-with-modes sp--lisp-modes
  ;;   'turn-on-smartparens-strict-mode)

  ;; (let ((barf-slurp ((format "C-S-%s")))))
  ;; (define-key smartparens-mode-map (kbd "C-S-right") 'sp-forward-slurp-sexp)
  ;; (define-key smartparens-mode-map (kbd "C-S-left"))

  ;; sp-use-paredit-bindings
#+end_src

#+begin_example
  Warning (defvaralias): Overwriting value of ‘inferior-emacs-lisp-mode-hook’ by
  aliasing to ‘ielm-mode-hook’ Disable showing Disable logging
#+end_example

This might be an issue.

Per [[https://github.com/NicolasPetton/emacs/blob/b176d169347925d57ca63ab63b85d92e49a53c81/lisp/ielm.el#L64][https://github.com/NicolasPetton/emacs/blob/master/lisp/ielm.el#L64]], you
could use =comint-mode-hook= and =comint-mode-map= instead of the IELM
equivalents.

I like that this doesn't have such a pesky way of handling keybindings, +but I
need to ensure that single quotes aren't added in pairs in Lisp modes,+ and I
need to enable it by default in those modes. That said, paredit seems more
assertive in preventing unbalanced parentheses, so I might need to do more
tweaking. It looks like I need to update the keybindings so slurp and barf
behave like paredit mode.

It looks like part of the smartparens documentation covers [[https://github.com/Fuco1/smartparens/wiki/Paredit-and-smartparens][paredit and
smartparens]].

Here's what I want
- [ ] enable =sp-use-paredit-bindings= in Lisp modes and possibly globally (at
  least for now; perhaps at some point I'll want to update that) ---
  =smartparens-strict-mode= actually seems to handle slurping and barfing th
  way I'm used to

*** ~rainbow-delimiters~
[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]: useful for more than just Lisp, this mode color codes
parentheses, brackets, and braces by their depth. Saw it (or something like it)
in some screencast, and I need it. Update: used this for awhile, and I don't
know how I ever lived without it.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook ((prog-mode . rainbow-delimiters-mode)
           (comint-mode . rainbow-delimiters-mode)))
#+end_src

Note: =comint-mode-hook= should affect modes that inherit from =comint-mode=, for
example, IELM.

** TODO ~eshell~
Seeing as how ~eshell~ natively accepts Emacs Lisp, this seems like a fine
section under which to put this.

*** TODO Fancy prompt
EmacsWiki has some ideas for how to change thee [[https://www.emacswiki.org/emacs/EshellPrompt][eshell prompt]] to make it more
like your bash prompt, or even do some cool things like fish.

* TODO Org mode
** Keybindings
By default

| key   | binding            | desired behavior    |
|-------+--------------------+---------------------|
| ~TAB~   | =org-cycle=          | =completion-at-point= |
| ~C-c ;~ | =org-toggle-comment= | +=iedit-...=+ nothing |

| variable              | value |
|-----------------------+-------|
| =org-cycle-emulate-tab= | =t=     |

But I want to bind ~TAB~ to =org-cycle= for headlines and =completion-at-point= for
everything else.

I'm constantly accidentally typing ~C-c ;~ when I mean to type ~C-c '~, so I want
=org-toggle-comment= to feel more intentional. I never use
=org-table-create-or-convert-from-region=, and even if I needed to use it from
time to time, I can always call it with ~M-x ...~ rather than keep it bound to a
key.

#+begin_src emacs-lisp
  (defun org-iedit-in-src-block ()
    "Use this in Org mode to ensure iedit-mode only works in src block

  Note: manually calling 「M-x iedit-mode⸥ will still work anywhere"
    (interactive)
    (when (org-in-src-block-p t)
      (iedit-mode)))
#+end_src

=org-iedit-in-src-block= works as expected.

#+begin_src emacs-lisp
  (defun org-mode-keymap-rebindings ()
    "My preferred Org mode key (un/re)bindings."
    ;; doesn't work
    ;; (define-key org-mode-map (kbd "C-c ;") nil)
    ;; (define-key org-mode-map (kbd "C-c |") org-toggle-comment)
    (local-set-key (kbd "C-c ;") org-iedit-in-src-block)
    (local-set-key (kbd "C-c |") org-toggle-comment))

  (add-hook 'org-mode-hook 'org-mode-keymap-rebindings)

  ;; this doesn't work either ¯\_(ツ)_/¯
  ;; (add-hook 'org-mode-hook
  ;;           (lambda ()
  ;;             (local-set-key (kbd "C-c ;") org-iedit-in-src-block)))
#+end_src

These keybindings don't work as expected.

** ~org-tempo~
Enable old-style template blocks, e.g. make ~<s TAB~ create ~src~ blocks again; see
[[https://emacs.stackexchange.com/a/46992][Why do easy templates, .e.g, "< s TAB" in org 9.2 not work? | Emacs
StackExchange]]. Additional [[https://config.daviwil.com/emacs#block-templates][block templates]] courtesy of [[https://config.daviwil.com/emacs][daviwil's Emacs
config]]. See [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][Babel: Languages]] for list of supported languages and their ~src~
block identifiers.

#+begin_src emacs-lisp
  (require 'org-tempo)

  ;; daviwil's strategy:
  ;; (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  ;; ...
  ;; (add-to-list 'org-structure-template-alist '("py" . "src python"))

  ;; more elegant way of doing it(?)
  ;; note: cdr needs to have 'src␣' prepended in order to work.
  (setq org-structure-template-alist-extensions
    '(("el"  . "emacs-lisp")
      ("hs"  . "haskell")
      ("ltx" . "latex")
      ("org" . "org")
      ("py"  . "python")
      ;; ("rst" . "rust")  ;; not currently supported
      ("sql" . "sql")
      ("sh"  . "shell")
      ("esh" . "eshell")))

  (dolist (cell org-structure-template-alist-extensions)
    (add-to-list 'org-structure-template-alist
                 (cons (car cell)
                       (format "src %s" (cdr cell)))))
#+end_src

** =org-pretty-entities=
[[https://orgmode.org/manual/Special-Symbols.html][org-pretty-entities]] automatically converts appearance of things like ~\​to~ to →
and ~\​alpha~ to α. This can be toggled with ~C-c C-x \~
(=org-toggle-pretty-entities=).

#+begin_src emacs-lisp
  (setq org-pretty-entities t)
#+end_src

** Toggle =:eval no= for =src= blocks
Stolen from [[https://emacs.stackexchange.com/a/13897/9013][How to toggle Org-mode source code block ":eval no" status | Emacs
StackExchange]]

#+begin_src emacs-lisp
  (defun org-toggle-src-eval-no ()
    "Will toggle ':eval no' on the src block begin line"

    (defun in-src-block-p ()
      "Returns t when the point is inside a source code block"
      (string= "src" (org-in-block-p '("src"))))

    (defun beginning-src ()
      "Find the beginning of the src block

  Note: pathological case: if a block within src block contains \"#+BEGIN_SRC\"
  and cursor is before that line, \":eval no\" won't toggle in correct
  location"
      (let ((case-fold-search t)) (search-backward "#+BEGIN_SRC")))

    (defun toggle-eval-no ()
      "Handles the toggling of ' :eval no'"
       (save-excursion
        (end-of-line)
        (let ((case-fold-search t)) (search-backward "#+BEGIN_SRC")
         (if (search-forward " :eval no" (line-end-position) "f")
             (replace-match "")
           (insert " :eval no")))))

    (if (in-src-block-p) (toggle-eval-no)))

  (defun add-org-toggle-src-key ()
    (local-set-key (kbd "C-c t")
                   (lambda () (interactive) (org-toggle-src-eval-no))))

  (add-hook 'org-mode-hook 'add-org-toggle-src-key)
#+end_src

** alphabetical lists
See [[https://orgmode.org/manual/Plain-Lists.html#FOOT11][Org Manual §2.6 Plain Lists -- Fn 11]].

#+begin_src emacs-lisp
  (setq org-list-allow-alphabetical t)
#+end_src

** TODO Export

*** TODO HTML -- default stylesheet

*** TODO LaTeX
**** TODO Dates
I think I just want these rendered like the surrounding text.

#+begin_src emacs-lisp
  (setq org-latex-active-timestamp-format "\\text{%s}")
  (setq org-latex-inactive-timestamp-format "\\text{%s}")
#+end_src

Also want to change the behavior of exporting dates as =[<ISO 8601> <%a>]= to
=%B %-d, %Y=. Looks like I may need to change =org-timestamp-custom-formats=, but
the documentation is a little spotty.

* Load additional org configuration files
See [[* Switches for additional configuration][configuration switches]] to see what's loaded.

Old/dumb way of doing it:

# #+begin_src emacs-lisp :eval no
#   (when core-config-core-langs-switch
#     (progn
#       ;; (org-babel-load-file
#       ;;  (expand-file-name "~/config/emacs/core-langs.org"))
#       (message "Core langs config loaded.")))
#   (when core-config-extras-switch
#     (progn
#       ;; (org-babel-load-file (expand-file-name "~/config/emacs/extras.org"))
#       (message "Extras config loaded.")))
# #+end_src

# #+begin_src emacs-lisp :eval no
#   ;; there's probably a nicer way of doing it without the let
#   (dolist (config-file-alist config-additional-org-config-files)
#     (let ((name (alist-get 'name config-file-alist))
#           (full-path (expand-file-name (alist-get 'path config-file-alist)))
#           (enable (alist-get 'enable config-file-alist)))
#       (when enable
#         (progn
#           (org-babel-load-file full-path)
#           (message (format "%s successfully loaded." name))))))
# #+end_src


New/fancier/better way of doing it:

#+begin_src emacs-lisp
  (dolist (config-file-alist config-additional-org-config-files)
    (let ((name (alist-get 'name config-file-alist))
          (full-path (expand-file-name (alist-get 'path config-file-alist)
                                       "~/config/emacs"))
          (enable (alist-get 'enable config-file-alist)))
      (when enable
        (if (file-readable-p full-path)
            (progn
              (org-babel-load-file full-path)
              (message (format "%s loaded." name)))
          (display-warning
           :warning
           (format "%s NOT loaded (%s missing or unreadable)."
                   name
                   full-path))))))
#+end_src

* Package graveyard
- [[https://github.com/auto-complete/auto-complete][auto-complete]]
- [[https://github.com/technomancy/better-defaults][better-defaults]]
- [[https://github.com/zk-phi/electric-case][electric-case]]
- [[https://github.com/davidshepherd7/electric-operator][electric-operator]]
- [[https://github.com/xwl/electric-spacing][electric-spacing]] (does the same thing as ~electric-operator~ ?)
- [[https://github.com/remvee/elein][elein]]
- [[https://elpy.readthedocs.io/en/latest/][elpy]] (Emacs Python Develpment Environment) (\to ~core-langs.org~ ?)
- [[https://github.com/ikazuhiro/emoji-display][emoji-display]] (use ~emojify~ instead)
- [[https://github.com/defunkt/gist.el][gist]]

* Sanity check
Check that bottom of this file was reached and evaluated successfully.

#+begin_src emacs-lisp
  (message "Bottom of core-config.org reached and evaluated.")
#+end_src
