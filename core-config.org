#+options: ^:{}
#+title: Literate Emacs configuration with Org mode
#+subtitle: Core configuration
#+author: Ryan Matlock

* Warnings, issues, and other problems + features to consider
Going to try to keep this relatively up-to-date with current issues with my
configuration. Hopefully I'll empty this section and have everything working
the way I want it at some point---and keep it that way!

** ~*Warnings*~

** ~*Messages*~

** Other
*** OPTIONAL get =smartparens= to behave like =paredit=
Still having trouble with =turn-on-smartparens-strict-mode= for Lisp modes, and
I haven't figured out where to stuff =sp-use-paredit-bindings= (although maybe
that's because it's called interactively? that doesn't seem like it would be a
problem though).

Note: when I manually enable =turn-on-smartparens-strict-mode= and
=sp-use-paredit-bindings=, I've noticed that I've had issues with ~C-u 0 C-k~
not working the way I expect it to. I've found that ~C-k~ is bound to
=sp-kill-hybrid-sexp=, so I need to look into that, although I remember coming
across some comments about some smartparens kill function that annoyed several
people enough to switch back to paredit.

*** TODO study this amazing literate config file
[[https://panadestein.github.io/emacsd/][Panadestein's literate Emacs config]]

*** TODO fix minibuffer character wrap width

*** TODO Save last $n$ ~*Messages*~ buffers
It's helpful to automatically have a log of sorts, kind of like
~.bash_history~. Having this first ensures that it's done when setting up this
configuration on a new machine.

*** DONE packages to look into [0/0]

** Features to add [2/4]
- [X] complete the switch from ~package.el~ to ~straight.el~
  - [X] automatically install missing packages on startup (finding out the hard
        way that migrating this config to a new machine is a PITA)
- [X] get meta key working properly on M1 Mac Mini
- [ ] oBnOxIoUs CaSe (aka alternating case) region command (this may already
  exist, but I'm going to 1) respect other Emacs users enough to assume that it
  doesn't, and 2) try to write it myself because it seems straightforward but
  also good Emacs Lisp practice).
- [ ] [[https://github.com/abo-abo/hydra][hydra]] for fancy keybindings

* Switches for additional configuration
See [[* Load additional org configuration files][code for handling processing of additional config files]] below.

#+begin_src emacs-lisp
  (setq emacs-config-directory (expand-file-name "~/config/emacs/"))
  (setq emacs-config-additional-files-alist
        '(("core-langs.org" . t)
          ("extras.org" . t)
          ("experimental.org" . nil)))
#+end_src

* Customize
It seems like the less I use ~customize~ outside of the literate configuration
files, the better because I can always use =(use-package ... :custom ...)= or
=setq= and annotate everything using Org mode. See [[https://emacs.stackexchange.com/questions/102/advantages-of-setting-variables-with-setq-instead-of-custom-el][Advantages of setting
variables with setq instead of custom.el? | emacs.stackexchange]] for a good
(albeit old) discussion of the relative merits of each. +I think this ought to
be loaded after everything else so customization override anything hard coded
into these config files.+ Moving this file led to weirdness/ugliness, so I'll
have to dig through the configuration. Bleh.

+There are probably a number of settings you can/should move into this,
although I'm curious how much of a pressing need there is given that with a
literate =.emacs= config, I can explain my reasoning for a setting.+

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" emacs-config-directory))
  (load custom-file)
#+end_src

While ~custom.el~ isn't literate, which is kind of a bummer, it does seem like it
can elegantly ensure that certain setting are confined to one location. Maybe
it's a good idea to move as many settings as possible out over time, and then
leave things like =custom-set-faces=. As it stands, ~custom.el~ is only 149 lines
long, which isn't too bad, and it looks like it could be shrunk further.

#+begin_example
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(org-level-1 ((t (:inherit default :foreground "#cb4b16" :weight bold))))
   '(org-level-2 ((t (:inherit default :foreground "#859900" :weight semi-bold))))
   '(org-level-3 ((t (:inherit default :foreground "#268bd2" :weight semi-bold)))))
#+end_example

* General interface & minor modes
** ~so-long~ -- say goodbye to poor performance with minified files
From [[https://elpa.gnu.org/packages/so-long.html][so-long | GNU ELPA]]:

#+begin_quote
When the lines in a file are so long that performance could suffer to an
unacceptable degree, we say "so long" to the slow modes and options enabled in
that buffer, and invoke something much more basic in their place.
#+end_quote

#+begin_src emacs-lisp
  (use-package so-long
    :straight nil
    :hook
    (after-init-hook . global-so-long-mode))
#+end_src

** Startup behavior
*** ~*scratch*~ behavior
#+begin_src emacs-lisp
  (setq initial-major-mode 'text-mode)
  (setq initial-scratch-message nil)
#+end_src

*** Turn off welcome screen
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

** Cleaner directories (make Emacs produce less clutter)
See [[https://youtu.be/XZjyJG-sFZI][Teach Emacs to Keep Your Folders Clean | System Crafters | YouTube]] ([[https://github.com/daviwil/emacs-from-scratch/blob/master/show-notes/Emacs-Tips-Cleaning.org][show
notes]])

#+begin_src emacs-lisp
  (setq emacs-temp-directory (expand-file-name "~/.emacs-tmp/"))

  (defun make-emacs-temp-subdirectories ()
      "Create subdirectories in 'emacs-temp-directory'."
    (seq-do #'(lambda (dir)
                (make-directory (expand-file-name dir emacs-temp-directory) t))
            '("backups/" "auto-saves/sessions/")))

  (make-emacs-temp-subdirectories)

  (setq backup-directory-alist
        (list (cons "." (expand-file-name "backups/" emacs-temp-directory))))

  (setq auto-save-list-file-prefix
        (expand-file-name "auto-saves/sessions/" emacs-temp-directory)
        auto-save-file-name-transforms
        `((".*" ,(expand-file-name "auto-saves/" emacs-temp-directory) t)))

  (defun clean-emacs-temp-files ()
    "Delete temporary files in 'emacs-temp-directory'."
    (interactive)
    (when (yes-or-no-p
           (format "Do you really want to delete everything in '%s'? "
                   emacs-temp-directory))
      (delete-directory emacs-temp-directory t)
      (message "Temporary files deleted.")
      (make-emacs-temp-subdirectories)))
#+end_src

#+begin_quote
Aside: I just learned about the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html][backquote]] in Emacs Lisp---very cool!
#+end_quote

As referenced at the bottom of the show notes, [[https://github.com/emacscollective/no-littering][no-littering]] looks like a good
option to keep Emacs cleaner.

** TODO General look & feel
*** Solarized Dark theme
[[https://github.com/bbatsov/solarized-emacs][solarized-emacs]]

Note: you need to =setq= various properties /before/ you load the theme,
otherwise you'll get unexpected behaviors.

#+begin_src emacs-lisp
  (use-package solarized-theme
    :straight t
    :config
    (setq solarized-distinct-fringe-background t)
    (setq solarized-high-contrast-mode-line nil)
    (setq solarized-scale-org-headlines nil)
    (setq solarized-use-more-italic t)
    (setq solarized-use-variable-pitch nil)
    (load-theme 'solarized-dark t))
#+end_src

*** Set columns to wrap at 80 characters
Note: the fixed width font size for verbatim/code is slightly wider than
Inconsolata, so either change the face or make the window slightly wider maybe?
You ought to set one value as a number and then do the appropriate math with
that value rather than what you've done with hard-coding 79 and 80 characters
into this configuration.

see [[https://www.gnu.org/software/emacs/manual/html_node/efaq/Turning-on-auto_002dfill-by-default.html][Turn on ~auto-fill-mode~ by default]]

#+begin_src emacs-lisp
  ;; (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (setq-default fill-column 79)
  (setq-default auto-fill-function 'do-auto-fill)
#+end_src

*** TODO GUI
- no menu bar; see [[http://emacswiki.org/emacs/MenuBar][Menu Bar | Emacs Wiki]]
- no tool bar
- no scroll bar
- 96% opacity (matches OS X Terminal); see see
  [[http://stackoverflow.com/questions/21946382/how-to-get-transparent-window-in-gnu-emacs-on-osx-mavericks][how to get transparent window in GNU Emacs on OSX? | stackoverflow]]
- default frame size: 80w (+ padding b/c verbatim/code font for Org mode is
  slightly wider than Inconsolata) x 45h
- enable =global-display-fill-column-indicator-mode=, which draws a line at the
  fill column; see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Displaying-Boundaries.html][Displaying Boundaries | GNU Emacs Manual]] (replaces
  [[https://www.emacswiki.org/emacs/FillColumnIndicator][fill-column-indicator.el | Emacs Wiki]])
- define ~std-frame~ to return to default 80w x 45h
- define ~lrg-frame~, which accommodates two side-by-side windows
- define ~xl-frame~, which accommodates three side-by-side-by-side windows
- disable =C-z=, which minimizes Emacs in GUI mode
- disable ~visible-bell~; see [[http://stackoverflow.com/questions/36805713/emacs-blank-square-on-mac-os-x/36813418#36813418][Emacs blank square on Mac OS X | stackoverflow]]

Update: I think you've been doing this (sort of) incorrectly because you
haven't been taking full advantage of =default-frame-alist=.

#+begin_src emacs-lisp
  (when window-system
    (menu-bar-mode -1)  ;; not working?
    (tool-bar-mode -1)
    (scroll-bar-mode -1)

    (add-to-list 'default-frame-alist '(vertical-scroll-bars . nil))
    (setq gui-config-frame-transparency 96)
    (set-frame-parameter
     (selected-frame) 'alpha `(,gui-config-frame-transparency
                               ,gui-config-frame-transparency))
    (add-to-list 'default-frame-alist `(alpha ,gui-config-frame-transparency
                                              ,gui-config-frame-transparency))
    (setq gui-config-frame-width-padding 4)
    (setq gui-config-frame-width (1+ (+ fill-column
                                          gui-config-frame-width-padding)))
    (setq gui-config-frame-height 45)
    (add-to-list 'default-frame-alist `(width . ,gui-config-frame-width))
    (add-to-list 'default-frame-alist `(height . ,gui-config-frame-height))
    ;; (defun side-by-side ()
    ;;   "resizes the frame to accommodate two windows side-by-side"
    ;;   (interactive)
    ;;   (set-frame-size (selected-frame)
    ;;                   ;; used to be + 3, but I think there are some side columns
    ;;                   ;; that take away screen real estate now?
    ;;                   (+ (* gui-config-frame-width 2) 7)
    ;;                   gui-config-frame-height))
    (setq gui-config-accessory-frame-width 32)
    (defun std-frame ()
      "reverts framesize to standard"
      (interactive)
      (set-frame-size (selected-frame)
                      gui-config-frame-width
                      gui-config-frame-height))
    (defun gui-config-calculate-frame-width (num-windows)
      "calculate how wide the frame should be for a number of windows"
      (let ((inter-window-space 2))
        (+ (* gui-config-frame-width num-windows)
           (* inter-window-space (1- num-windows)))))
    (defun lrg-frame (&optional accessory-frame-p)
      "resize frame for 2 side-by-side windows (same as side-by-side function,
       which is being kept for now for the sake of legacy)"
      (interactive "P")
      (let* ((num-windows 2)
             (width (gui-config-calculate-frame-width num-windows)))
        (set-frame-size (selected-frame)
                        (if accessory-frame-p
                            (+ 2 gui-config-accessory-frame-width width)
                          width)
                        gui-config-frame-height)))
    (defun xl-frame ()
      "resize frame for 3 side-by-side-by-side windows + extra height"
      (interactive)
      (let ((num-windows 3)
            (height-multiplier 1.3))
        (set-frame-size (selected-frame)
                        (gui-config-calculate-frame-width num-windows)
                        (floor (* gui-config-frame-height height-multiplier)))))
    ;; C-z previously bound to suspend-frame (minimizes the window); C-x C-z
    ;; still bound to suspend-frame
    (define-key global-map (kbd "C-z") nil)
    ;; s-t previously bound to ns-popup-font-panel
    (define-key global-map (kbd "s-t") nil)
    (setq visible-bell nil)
    (std-frame))
#+end_src

*** TODO Fonts
You may want to install fonts with [[https://github.com/Homebrew/homebrew-cask-fonts][homebrew-cask-fonts | GitHub]], so if you
wanted to be insane, you could set fundamental, text, and Org modes Computer
Modern Roman with something like

#+begin_example
    (set-face-attribute
     'default nil :family "CMU Serif" :weight 'normal :slant 'normal)
#+end_example

 with a hook or something and then a monospace font for =prog-mode=.

- use Inconsolata size 15 font (maybe try JetBrains Mono?) see [[https://emacsredux.com/blog/2021/12/22/check-if-a-font-is-available-with-emacs-lisp/][Check if a Font
  is Available with Emacs Lisp | Emacs Redux]] for font switching goodness
- set unicode font to Unifont

Issue with JetBrains Mono being italic (but still bold when it ought to
be). Output from ~M-x describe-font~:

#+begin_example
  name (opened by): -*-JetBrains Mono-normal-italic-normal-*-14-*-*-*-m-0-iso10646-1
         full name: JetBrains Mono:pixelsize=14:weight=normal:slant=italic:width=normal:spacing=100:scalable=true
#+end_example

For comparison, here's Inconsolata:

#+begin_example
  name (opened by): -*-Inconsolata-normal-normal-normal-*-15-*-*-*-m-0-iso10646-1
         full name: Inconsolata:pixelsize=15:weight=normal:slant=normal:width=normal:spacing=100:scalable=true
#+end_example

[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Attributes.html][Face Attributes | GNU Emacs Manual]]

~M-x describe-face~ over default text (with JetBrains Mono):

#+begin_example
             Family: JetBrains Mono
            Foundry: nil
              Width: normal
             Height: 140
             Weight: normal
              Slant: italic
         Foreground: #839496
  DistantForeground: unspecified
         Background: #002b36
          Underline: nil
           Overline: nil
     Strike-through: nil
                Box: nil
            Inverse: nil
            Stipple: nil
               Font: #<font-object -*-JetBrains Mono-normal-italic-normal-*-14-*-*-*-m-0-iso10646-1>
            Fontset: -*-JetBrains Mono-normal-italic-normal-*-14-*-*-*-m-0-fontset-auto2
             Extend: nil
            Inherit: nil
#+end_example

So I just need to fix the slant.

Tried =(set-face-attribute 'default nil :slant 'normal)= (see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Attribute-Functions.html#index-set_002dface_002dattribute][Face Attribute
Functions § =set-face-attribute= | GNU Emacs Manual]])

#+begin_example
             Family: JetBrains Mono
            Foundry: nil
              Width: normal
             Height: 140
             Weight: normal
              Slant: italic
         Foreground: #839496
  DistantForeground: unspecified
         Background: #002b36
          Underline: nil
           Overline: nil
     Strike-through: nil
                Box: nil
            Inverse: nil
            Stipple: nil
               Font: #<font-object -*-JetBrains Mono-normal-italic-normal-*-14-*-*-*-m-0-iso10646-1>
            Fontset: -*-JetBrains Mono-normal-italic-normal-*-14-*-*-*-m-0-fontset-auto2
             Extend: nil
            Inherit: nil
#+end_example

Still slanted.

Cruft

#+begin_example
  ;; (setq gui-config-fonts-plist
  ;;       '((:name "JetBrains Mono" :size 14 :weight "Regular")
  ;;         (:name "Inconsolata" :size 15 :weight "Regular")
  ;;         (:name "Fira Code" :size 14)
  ;;         (:name "Consolas" :size 15)
  ;;         (:name "Courier New" :size 15)))
  ;; (setq gui-config-font-styles-alist
  ;;       '((:base . "Regular")
  ;;         (:comment . "Italic")
  ;;         (:def . "Bold")
  ;;         (:heading1 . "ExtraBold")
  ;;         (:heading2 . "Bold")
  ;;         (:heading3 . "SemiBold")
  ;;         (:heading4 . "SemiBold")))
#+end_example

#+begin_src emacs-lisp
  (setq gui-config-fonts-alist
        '(("JetBrains Mono" . 14)
          ("Inconsolata" . 15)
          ("Fira Code" . 14)
          ("Consolas" . 15)
          ("Courier New" . 15)))
  (defun font-available-p (font-name)
    "Check if FONT-NAME is available on device."
    (member font-name (font-family-list)))
  (let* ((font-names (mapcar #'car gui-config-fonts-alist))
         (available-fonts (seq-filter #'font-available-p font-names))
         (name (car available-fonts))
         (size (cdr (assoc name gui-config-fonts-alist))))
    (setq gui-config-font (format "%s-%d" name size))
    (set-frame-font gui-config-font)
    ;; (set-face-attribute 'default t :slant 'unspecified)
    ;; (set-face-attribute 'default nil :slant 'normal)
    ;; (set-face-attribute
    ;;  'default nil :family "Inconsolata" :slant 'normal)
    (set-face-attribute
     'default nil :family "JetBrains Mono" :slant 'normal)
    ;; (set-face-attribute
    ;;  'default nil :family "CMU Serif" :weight 'normal :slant 'normal)
    (set-face-attribute
     'font-lock-comment-face nil :slant 'italic)

    (message (format "Set font to %s." gui-config-font)))

  (set-fontset-font t 'unicode "Unifont" nil 'prepend)
  ;; (add-to-list 'default-frame-alist `(font . ,gui-config-font))
#+end_src

*** ~s-N~ opens ~*scratch*~ buffer
I think I may start using frames to hold related sets of buffers to make
context switching easier (i.e. I can switch between frames instead of
constantly loading related sets of buffers into my usual two window setup).

#+begin_src emacs-lisp
  (setq make-new-frame-default-buffer "*scratch*")
  (setq make-new-frame-alternate-buffer "*Buffer List*")

  (defun make-new-frame (&optional alt-buffer)
    "Open a new frame using 'make-frame', and switch to buffer specified by
  'make-new-frame-default-buffer' unless a prefix argument is passed, in which
  case the buffer specified by 'make-new-frame-alternate-buffer' is selected."
    (interactive "P")
    (let ((target-buffer
           (if alt-buffer make-new-frame-alternate-buffer
             make-new-frame-default-buffer)))
      (make-frame)
      (switch-to-buffer target-buffer)))

  (define-key global-map (kbd "s-N") 'make-new-frame)
  ;; s-n previously bound to make-frame
  (define-key global-map (kbd "s-n") nil)
#+end_src

This is a good place to remind myself that =delete-frame= is bound to ~C-x 5 0~.

*** TODO ~treemacs~
[[https://github.com/Alexander-Miller/treemacs][treemacs | GitHub]]: a tree layout file explorer (like you see in other
editors/IDEs)

#+begin_src emacs-lisp
  (use-package treemacs
    :straight t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  ;; (use-package treemacs-evil
  ;;   :after (treemacs evil)
  ;;   :straight t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :straight t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :straight t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :straight t)

  ;; (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  ;;   :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  ;;   :straight t
  ;;   :config (treemacs-set-scope-type 'Perspectives))

  ;; (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  ;;   :after (treemacs)
  ;;   :straight t
  ;;   :config (treemacs-set-scope-type 'Tabs))
#+end_src

*** Prettier mode line
I checked Reddit to get some ideas for which mode line packages are popular
these days. A lot of people seem to be happy with Doom Emacs/[[https://github.com/seagle0128/doom-modeline][doom-modeline]], and
[[https://gitlab.com/jessieh/mood-line][mood-line]] is a lightweight alternative.

If that doesn't work out, [[https://github.com/tarsius/minions][minions]] (minor mode lighter \to separate menu) + [[https://github.com/tarsius/moody][moody]]
also looks really nice. It looks like you could actually use ~mood-line~ with
~minions~ with some tweaks; see [[https://gitlab.com/jessieh/mood-line/-/issues/21][Support Minions Mode]].

By default, ~mood-line~'s git status looks unreadable in the active
window/frame/buffer/whatever the right term is when using Solarized Dark theme
(bright yellow text over light grey background) [note: only true when
=(solarized-high-contrast-mode-line t)= ]. I think the issue can be
traced to

# #+begin_src emacs-lisp :eval no
#   (defface mood-line-status-info
#     '((t (:inherit (font-lock-keyword-face))))
#     "Face used for generic status indicators in the mode-line."
#     :group 'mood-line)
# #+end_src

so I'm going to try modifying that. Actually, looking at the Customize options,
=mood-line-status-success= uses the same bright yellow color, and
=mood-line-status-neutral= uses only a slightly darker grey than the background.

#+begin_src emacs-lisp
  (use-package mood-line
    :straight t
    ;; :requires solarized-theme
    ;; :defer t
    :config
    ;; having issues with solarized-dark-color-palette-alist :shrug:
    ;; (progn
    ;;   (when (and (member 'solarized-dark custom-enabled-themes)
    ;;              solarized-high-contrast-mode-line)
    ;;     (progn
    ;;       ;; (message "You're using Solarized Dark")
    ;;       ;; note: hex codes work just as well as color strings
    ;;       (set-face-attribute
    ;;        'mood-line-status-info
    ;;        nil
    ;;        :foreground
    ;;        (cdr (assoc 'blue-d solarized-dark-color-palette-alist)))
    ;;       (set-face-attribute
    ;;        'mood-line-status-success
    ;;        nil
    ;;        :foreground
    ;;        (cdr (assoc 'blue-d solarized-dark-color-palette-alist)))
    ;;       (set-face-attribute
    ;;        'mood-line-status-neutral
    ;;        nil
    ;;        :foreground
    ;;        (cdr (assoc 'green-d solarized-dark-color-palette-alist))))))
    ;;
    ;; stll having trouble with solarized-dark-color-palette-alist
    ;; ¯\_(ツ)_/¯
    ;;
    ;; (set-face-attribute
    ;;  'mood-line-status-info
    ;;  nil
    ;;  :foreground
    ;;  (cdr (assoc 'blue-d solarized-dark-color-palette-alist)))
    ;; (set-face-attribute
    ;;  'mood-line-status-success
    ;;  nil
    ;;  :foreground
    ;;  (cdr (assoc 'blue-d solarized-dark-color-palette-alist)))
    ;; (set-face-attribute
    ;;  'mood-line-status-neutral
    ;;  nil
    ;;  :foreground
    ;;  (cdr (assoc 'green-d solarized-dark-color-palette-alist)))
    (mood-line-mode))
#+end_src

Getting warning on startup now: ~Error (use-package): mood-line/:config:
Symbol’s value as variable is void: solarized-dark-color-palette-alist~ even
after adding =:requires solarized-theme= :shrug: Weirder still: when I run ~M-x
reload-dotemacs~, I don't get the warning and instead get the expected
behavior. Weirder still: I can run ~C-h v solarized-dark-color-palette-alist~,
get the value, and then run ~M-x reload-dotemacs~ and everything works.

*** ~exec-path-from-shell~ to fix ~exec-path~​/​~PATH~ behavior in MacOS GUI
[[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] fixes behavior of how environment variables are loaded in
MacOS GUI Emacs.

+[Note that you need to use [[https://www.gnu.org/software/emacs/manual/html_node/eintr/progn.html][progn]] in order to evaluate the series of
s-expressions in =:config=.]+  False!

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :config
    (when (or (daemonp)
              (memq window-system '(mac ns x)))
      (exec-path-from-shell-initialize))
    (exec-path-from-shell-copy-env "PYTHONPATH"))
#+end_src

**** TODO read ~.bashrc~ & use bash as default ANSI term
Bear in mind that on your MacBook Pro, ~bash~ (the Homebrew version you use) is
located at ~/usr/local/bin/bash~, but your M1 Mac Mini, it's located at
~/opt/homebrew/bin/bash~, so maybe that's an issue? Probably helpful to know
which sort of device you're on.

https://osxdaily.com/2011/07/15/get-cpu-info-via-command-line-in-mac-os-x/

#+begin_src bash :eval no
  $ sysctl -n machdep.cpu.brand_string
  Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz
#+end_src

[[https://emacs.stackexchange.com/questions/14858/how-to-check-in-elisp-if-a-string-is-a-substring-of-another-string][How to check in elisp if a string is a substring of another string? |
emacs.stackexchange]]

#+begin_src emacs-lisp :eval no
  (string-match-p (regexp-quote "Intel")
                  "Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz")
#+end_src

Alternately, you may simply want to check for the existence of one or the other
binaries, and then settle on ~/bin/bash~ if neither exists ¯\_(ツ)_/¯

[[https://stackoverflow.com/a/37523213][How to define a default shell for emacs | stackoverflow]]

Looking through [[http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs/][What's the best spell check setup in emacs]], I came across the
function =executable-find=, so that might be better than =file-exists-p=; on
the other hand, maybe explicitly calling out the path is what I want. On the
third hand (or back to the first hand), basically any machine I'm on is going
to have ~bash~, so maybe it's better to go with whatever the =PATH= variable
thinks I ought to use.

#+begin_example
  ELISP> (executable-find "bash")
  "/usr/local/bin/bash"
  ELISP> (executable-find "fake-foobar")
  nil
#+end_example

It works how you'd want it to for the latter case.

#+begin_src emacs-lisp
  (defvar preferred-shells
    '("bash"
      "sh")
    "List of shells from most to least preferred.")

  (let* ((found-shells (mapcar #'executable-find preferred-shells))
         (preferred-shell (car-safe found-shells)))
    (cond (preferred-shell
           (progn
             (setq-default shell-file-name preferred-shell)
             (message (format "Using shell %s" preferred-shell))))
          (t (error
              (format "No valid shell found among %s." preferred-shells)))))
#+end_src

When I finally decide to join the modern era and use zsh or fish, it will be
easy to =cons= onto =shell-paths-alist=.

*** TODO COMMENT ~all-the-icons.el~ + ~all-the-icons-completion~
[[https://github.com/domtronn/all-the-icons.el][all-the-icons.el]]

[[https://github.com/iyefrat/all-the-icons-completion][all-the-icons-completion]]

#+begin_src emacs-lisp :eval no
  ;; (require 'font-lock)
  ;; (use-package font-lock+
  ;;   :straight t)
  ;; not actually needed
  ;; see https://github.com/domtronn/all-the-icons.el/pull/106

  (use-package all-the-icons
    :straight t
    :if (display-graphic-p))

  (use-package all-the-icons-completion
    :straight t
    ;; :requires (all-the-icons marginalia)
    :requires all-the-icons
    ;; :hook ((marginalia-mode . all-the-icons-completition-marginalia-setup))
    :config
    (all-the-icons-completion-mode))
#+end_src

*** ~whitespace~
[[https://www.emacswiki.org/emacs/WhiteSpace][whitespace]] package: highlight lines >80 characters wide, [[https://www.emacswiki.org/emacs/WhiteSpace#h5o-9][highlight ~TAB~
characters]] (~untabify~ on saving should take care of this, but IIRC makefiles
require tabs, and maybe I'll run into some situations where I want to be able
to see them).

#+begin_src emacs-lisp
  (use-package whitespace
    :straight t
    :hook
    ((prog-mode . whitespace-mode)
     ;; (org-mode . whitespace-mode)
     (tex-mode . whitespace-mode)
     (latex-mode . whitespace-mode)
     (LaTeX-mode . whitespace-mode))
    :config
    (setq whitespace-display-characters
          ;; display <tab> as »
          '((tab-mark ?\t [?\xBB ?\t] [?\\ ?\t])))
    (setq whitespace-line-column
          ;; 80 characters
          (+ fill-column 1))
    (setq whitespace-style '(face
                             trailing
                             lines-tail
                             tabs
                             tab-mark)))
#+end_src

=whitespace-mode= is a little weird in Org mode; as an example, shortened links
can make text appear that it's over 80 characters per line when it isn't
visually exceeding that limit.

*** TODO Tab/space handling -- improve this
Tip: ~M-x~ [[http://pragmaticemacs.com/emacs/convert-tabs-to-spaces/][untabify]] works on a region, ~C-u M-x untabify~ works on a whole
buffer. Maybe make a function, =safe-untabify-buffer=, that warns if you attempt
to =untabify= in a mode that requires tabs?

+Use spaces instead of tabs (generally); provide function to ``untabify''
buffer, see [[http://stackoverflow.com/questions/24832699/emacs-24-untabify-on-save-for-everything-except-makefiles/24857101#24857101][Emacs 24: untabify on save for everything *except* makefiles |
stackoverflow]]. Note: don't use on makefiles, which *require* tabs instead of
spaces.+

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  ;; (defvar tabbed-mode-list
  ;;   '('makefile-mode)
  ;;   "docstring")
  ;; (defun untabify-buffer ()
  ;;   (unless (derived-mode-p 'makefile-mode)
  ;;     (untabify (point-min) (point-max))))
#+end_src

I used to run =untabify-except-makefiles= on every save, but that's really not
necessary, so I'm going to remove that feature.

#+begin_src emacs-lisp :eval no
  (defun untabify-except-makefiles ()
    (unless (derived-mode-p 'makefile-mode)
      (untabify (point-min) (point-max))))
  (add-hook 'before-save-hook 'untabify-except-makefiles)
#+end_src

*** TODO ~column-number-mode~ / ~display-line-numbers-mode~
[[https://www.gnu.org/software/emacs/manual/html_node/efaq/Displaying-the-current-line-or-column.html][column-number-mode]]

[[https://www.emacswiki.org/emacs/LineNumbers][display-line-number-mode]] enable this??

#+begin_src emacs-lisp
  (setq column-number-mode t)
#+end_src

*** ~emojify~
[[https://github.com/iqbalansari/emacs-emojify][emojify]] enables emojis (e.g. 🙂), GitHub-style emojis (e.g. ~:smile:~), and ASCII
emojis (e.g. ~:)~)

#+begin_src emacs-lisp
  (use-package emojify
    :straight t
    :hook (after-init . global-emojify-mode)
    :config (setq emojify-display-style 'image))
#+end_src

Note that the =gitmoji= =:​memo:= symbol is the same as ~emojify~'s =:​pencil:=, and
=gitmoji='s =:​pencil:= symbol is the same as ~emojify~'s =:​pencil2:=.

#+begin_src emacs-lisp
  (setq emojify-user-emojis
        '((":memo:" .
           (("name" . "Memo")
            ("image" .
             "~/.emacs.d/emojis/emojione-v2.2.6-22/1f4dd.png")
            ("style" . "github")))
          (":adhesive_bandage:" .
           (("name" . "Adhesive Bandage")
            ("image" .
             "~/.emacs.d/emojis/user-added/adhesive_bandage.png")
            ("style" . "github")))))
  (when (featurep 'emojify)
    (emojify-set-emoji-data))
#+end_src

*** ~highlight-indent-guides~
[[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]] shows indentation level. I used to do this with a pipe
character, but I think the ='fill= and ='column= options look better now.

#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :straight t
    :hook (prog-mode . highlight-indent-guides-mode)
    :config (progn
              ;; old way of doing it
              ;; (setq highlight-indent-guides-method 'character)
              ;; (setq highlight-indent-guides-character ?\|)
              ;; an alternative
              ;; (setq highlight-indent-guides-method 'column)
              ;; this one looks pretty cool
              (setq highlight-indent-guides-method 'fill)))
#+end_src

*** Auto-indentation on =RET= for various modes
See http://www.emacswiki.org/emacs/AutoIndentation

#+begin_src emacs-lisp
  (defun set-newline-and-indent ()
    (local-set-key (kbd "RET") 'newline-and-indent))
  (add-hook 'html-mode-hook 'set-newline-and-indent)
  (add-hook 'lisp-mode-hook 'set-newline-and-indent)
  (add-hook 'LaTeX-mode-hook 'set-newline-and-indent)
  (add-hook 'c-mode-common-hook 'set-newline-and-indent)
#+end_src

*** TODO Global font lock mode -- move to custom??
This basically enables syntax highlighting by allowing for different faces for
keywords, comments, etc.; see
https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html

#+begin_src emacs-lisp
  (global-font-lock-mode 1)
#+end_src

** Preferred global keybindings
*** Disable mouse clicks
See [[http://stackoverflow.com/questions/4906534/disable-mouse-clicks-in-emacs][Disable mouse clicks in Emacs | stackoverflow]]

Old way:

#+begin_example
  (dolist (k '([mouse-1] [down-mouse-1] [drag-mouse-1] [double-mouse-1]
                 [triple-mouse-1] [mouse-2] [down-mouse-2] [drag-mouse-2]
                 [double-mouse-2] [triple-mouse-2] [mouse-3] [down-mouse-3]
                 [drag-mouse-3] [double-mouse-3] [triple-mouse-3] [mouse-4]
                 [down-mouse-4] [drag-mouse-4] [double-mouse-4]
                 [triple-mouse-4] [mouse-5] [down-mouse-5] [drag-mouse-5]
                 [double-mouse-5] [triple-mouse-5]))
      (global-unset-key k))
#+end_example

Idea:

#+begin_example
  ELISP> (mapcar #'make-symbol (mapcar #'(lambda (action) (format "[%s-1]" action)) '("mouse" "down-mouse")))
  (\[mouse-1\] \[down-mouse-1\])
#+end_example

#+begin_example
  ELISP> (equal [mouse-1] (make-symbol "[mouse-1]"))
  nil
#+end_example

Bummer.

See [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Mouse-Buttons.html][Mouse Buttons | GNU Emacs Manual]] and [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Vectors.html][Vectors | GNU Emacs Lisp Reference]].

Wait, we're good:

#+begin_example
  ELISP> (type-of (make-symbol "[mouse-1]"))
  symbol
  ELISP> (type-of [mouse-1])
  vector
  ELISP> (vector (make-symbol "mouse-1"))
  [mouse-1]
  ELISP> (eq [mouse-1] (vector (make-symbol "mouse-1")))
  nil
  ELISP> (equal [mouse-1] (vector (make-symbol "mouse-1")))
  nil
#+end_example

Or not. :\ Let's try it anyway.

New way:

#+begin_src emacs-lisp
  (let* ((mouse-buttons (number-sequence 1 5))
         (mouse-actions '("mouse"
                          "down-mouse"
                          "drag-mouse"
                          "double-mouse"
                          "triple-mouse"))
         (mouse-clicks
          (apply #'append
                 (mapcar
                  #'(lambda (n)
                      (mapcar
                       #'(lambda (action)
                           (vector (make-symbol (format "%s-%d" action n))))
                       mouse-actions))
                  mouse-buttons))))
    (seq-do #'(lambda (key) (define-key global-map key nil)) mouse-clicks))
#+end_src

It seems to work!

*** Meta key behavior for Mac
See https://www.emacswiki.org/emacs/MetaKeyProblems#h5o-18

#+begin_src emacs-lisp
  (setq mac-option-modifier 'meta)
#+end_src

(Works on M1 Mac Mini (9.1?), although I don't think this was necessary on a
late 2019 MacBook Pro 16".)

*** Iedit: edit multiple occcurrences simultaneously
This has been /such/ an important extension that I don't think I could live
without it. Really can't overstate how useful it is; see
[[https://github.com/victorhge/iedit][iedit | GitHub]]. Per documentation's suggestion, =iedit-mode= is bound to ~C-c ;~.

#+begin_src emacs-lisp
  (use-package iedit
    :straight t
    :bind ("C-c ;" . iedit-mode))
#+end_src

Here's something I just noticed in the documentation: "With digit prefix
argument 0, only occurrences in current function are matched."

*** Reload =.emacs=
See [[http://stackoverflow.com/questions/24810079/key-binding-to-reload-emacs-after-changing-it][Key binding to reload .emacs after changing it? | stackoverflow]]

#+begin_src emacs-lisp
  (defun reload-dotemacs ()
    (interactive)
    (load-file "~/.emacs"))
  (define-key global-map (kbd "C-c <f12>") 'reload-dotemacs)
#+end_src

*** Copy selection without killing
See
http://stackoverflow.com/questions/3158484/emacs-copying-text-without-killing-it
and http://www.emacswiki.org/emacs/KeyboardMacros

#+begin_src emacs-lisp
  (global-set-key (kbd "M-w") 'kill-ring-save)
#+end_src

*** Switch focus to previous window with =C-x p=
This complements ~other-window~, which is bound to =C-x o=.

#+begin_src emacs-lisp
(global-set-key (kbd "C-x p") 'previous-multiframe-window)
#+end_src

*** Count words in region
Documented in old =.emacs= as "~count-words-region~ \to ~count-words~" :shrug:

#+begin_src emacs-lisp
  (global-set-key (kbd "M-=") 'count-words)
  (put 'narrow-to-region 'disabled nil)
#+end_src

** TODO Preferred multi-mode keybindings
*** TODO Fix auto-identation for multiple modes
This is probably no longer the best way to achieve this.

See http://www.emacswiki.org/emacs/AutoIndentation

#+begin_src emacs-lisp
  (defun set-newline-and-indent ()
    (local-set-key (kbd "RET") 'newline-and-indent))
  (add-hook 'html-mode-hook 'set-newline-and-indent)
  (add-hook 'lisp-mode-hook 'set-newline-and-indent)
  (add-hook 'LaTeX-mode-hook 'set-newline-and-indent)
  ;; (add-hook 'css-mode 'set-newline-and-indent)
  (add-hook 'c-mode-common-hook 'set-newline-and-indent)
#+end_src

** TODO Flycheck
** TODO ~ispell~ with ~aspell~
Still need to sync ~aspell~ dictionaries across computers!

See
http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html
and
http://emacs-fu.blogspot.com/2009/12/automatically-checking-your-spelling.html
and http://blog.binchen.org/posts/effective-spell-check-in-emacs.html.

Found a very old blog post ([[http://emacs-fu.blogspot.com/2008/12/running-some-external-program-only-if.html][running some external program only if it exists |
Emacs-fu]]) that should allow me to bug myself if I don't have an ispell program
installed.

see [[https://emacs.stackexchange.com/questions/450/intelligent-spell-checking-in-org-mode][Intelligent spell-checking in org-mode | emacs.stackexchange]]

#+begin_src emacs-lisp
  (setq ispell-program-name "aspell"
        ispell-extra-args '("--sug-mode=ultra"))
  (unless (executable-find ispell-program-name)
    (display-warning
     :warning
     (format "ispell program not found: %s" ispell-program-name)))
#+end_src

** ~git~
~git~ is important enough to include in ~core-config~.

*** ~git-modes~
~git-modes~ allows for syntax highlighting in ~.gitignore~ and ~.gitconfig~
files. See https://github.com/magit/git-modes.

#+begin_src emacs-lisp
  (use-package git-modes
    :straight t)
  (add-to-list 'auto-mode-alist
               (cons "/gitignore" 'gitignore-mode))
  (add-to-list 'auto-mode-alist
               (cons "/gitconfig" 'gitconfig-mode))
#+end_src

*** Magit
[[https://magit.vc][Magit]] is a ~git~ ``porcelain'' essential to my Emacs experience and arguably one
of Emacs's killer apps.

#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :bind ("C-c 0" . magit-status))
  (use-package magit-filenotify
    :straight t)
  ;; (global-set-key (kbd "C-c 0") 'magit-status)
#+end_src

** TODO Completions: ~vertico~ + ~corfu~
I used to use a combination of ~ido~ and ~ivy~, but having seen a ~vertico~ demo, I
thought I'd give it a try. ~ido~ is supposedly a bit outdated now anyway.

*** TODO ~vertico~
Following config taken from
https://systemcrafters.cc/emacs-tips/streamline-completions-with-vertico/ and
lightly edited.

So far I'm loving ~vertico~ + ~savehist~ for ~M-x~ commands! However, it seems like
=ido-everywhere= is still set to =t= by default for some reason. Oh, I have an
idea: I bet it's in =custom.el=! I'm starting to think the smarter/better way to
do most customizations is with =:custom= inside of =(straight-)use-package=
statements. Yep, that was it! Going forward, I'll try to move what I can out of
~custom.el~.

~vertico-directory~ provides for "Ido-like directory navigation," which sounds
nice to have again; configuration taken from [[https://github.com/minad/vertico#extensions][vertico | Extensions]].

#+begin_src emacs-lisp
  (use-package vertico
    :straight (vertico :includes vertico-directory
                       :files (:defaults "extensions/vertico-directory.el"))
    :bind (:map vertico-map
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  (use-package savehist
    :straight t
    :init
    (savehist-mode))

  ;; (use-package vertico-directory
  ;;   ;; see https://github.com/minad/vertico/issues/83#issuecomment-883762831
  ;;   :straight (vertico :includes vertico-directory
  ;;                      :files (:defaults "extensions/vertico-directory.el"))
  ;;   :after vertico
  ;;   :ensure nil
  ;;   ;; More convenient directory navigation commands
  ;;   :bind (:map vertico-map
  ;;               ("RET" . vertico-directory-enter)
  ;;               ("DEL" . vertico-directory-delete-char)
  ;;               ("M-DEL" . vertico-directory-delete-word))
  ;;   ;; Tidy shadowed file names
  ;;   :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
  ;; still not working -- look into this later
  ;; try restarting Emacs? -- nope

  ;; (use-package marginalia
  ;;   :after vertico
  ;;   :straight t
  ;;   :custom
  ;;   (marginalia-annotators '(marginalia-annotators-heavy
  ;;                            marginalia-annotators-light nil))
  ;;   :init
  ;;   (marginalia-mode))
#+end_src

#+begin_example
Error (use-package): vertico/:init: Symbol’s value as variable is void:
vertico-map Disable showing Disable logging
Warning (straight): Two different recipes given for "vertico" (:files cannot be
both ("*" (:exclude ".git")) and (:defaults "extensions/vertico-directory.el"))
Disable showing Disable logging
Error (use-package): corfu/:init: Symbol’s function definition is void:
corfu-global-mode Disable showing Disable logging
Error (use-package): auctex/:catch: Loading file
/Users/matlock/.emacs.d/straight/build/auctex/auctex.elc failed to provide
feature ‘auctex’ Disable showing Disable logging
#+end_example

Getting these warnings after restarting Emacs. Upgraded ~vertico~, commented out
~vertico-directory~ stuff, restarted, and now ~vertico~ isn't working anymore.

Somehow that really messed everything up, and I had to nuke my
~$HOME/.emacs.d/straight/~ directory, although it seems to be fine now. Going to
try to enable ~vertico-directory~ again. -- Nope, that didn't work.

Now getting these warnings on startup:

#+begin_example
Error (use-package): corfu/:init: Symbol’s function definition is void:
corfu-global-mode Disable showing Disable logging
Error (use-package): auctex/:catch: Loading file
/Users/matlock/.emacs.d/straight/build/auctex/auctex.elc failed to provide
feature ‘auctex’ Disable showing Disable logging
#+end_example

**** ~vertico-directory~
See [[https://github.com/radian-software/straight.el/issues/819#issuecomment-882039946][Can not find vertico-directory package #819 | GitHub]]

#+begin_src emacs-lisp
  ;; (straight-use-package
  ;;  '(vertico :files (:defaults "extensions/*")
  ;;            :includes (vertico-buffer
  ;;                       vertico-directory
  ;;                       vertico-flat
  ;;                       vertico-indexed
  ;;                       vertico-mouse
  ;;                       vertico-quick
  ;;                       vertico-repeat
  ;;                       vertico-reverse)
  ;;            )
  ;;  )

  (use-package vertico-directory
    :after vertico
    ;; :load-path "straight/build/vertico/extensions"
    :straight nil
    :ensure nil
    ;; More convenient directory navigation commands
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

*** ~corfu~
``Corfu is the minimalistic ~completion-in-region~ counterpart of the ~vertico~
minibuffer UI.'' -- https://github.com/minad/corfu

#+begin_src emacs-lisp
  (use-package corfu
    :straight t
    :custom
    (corfu-cycle t)                   ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-commit-predicate nil)   ;; Do not commit selected candidates on
    ;;                                ;; next input
    ;; (corfu-quit-at-boundary t)     ;; Automatically quit at word boundary
    ;; (corfu-quit-no-match t)        ;; Automatically quit if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
    ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; You may want to enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since dabbrev can be used globally (M-/).
    :init
    (global-corfu-mode))

  ;; Optionally use the `orderless' completion style. See `+orderless-dispatch'
  ;; in the Consult wiki for an advanced Orderless style dispatcher.
  ;; Enable `partial-completion' for files to allow path expansion.
  ;; You may prefer to use `initials' instead of `partial-completion'.
  (use-package orderless
    :straight t
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides
          '((file (styles . (partial-completion))))))

  ;; Use dabbrev with Corfu!
  (use-package dabbrev
    :straight t
    ;; Swap M-/ and C-M-/
    :bind (("M-/" . dabbrev-completion)
           ("C-M-/" . dabbrev-expand)))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))
#+end_src

*** TODO COMMENT ~consult.el~: Consulting =completing-read= + ~recentf-mode~
[[https://github.com/minad/consult][consult]]

Among the things that it can do is provide a list of recent files using
[[https://www.emacswiki.org/emacs/RecentFiles][recentf-mode]]. ~recentf~ doesn't quite have the behavior I remember ~ido~ having,
but I can't find anything in ~legacy-dotemacs.el~ that suggests the behavior I'm
looking for.

#+begin_src emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)
  (define-key global-map (kbd "C-x M-f") 'recentf-open-files)

  ;; (use-package consult
  ;;   :straight t)
#+end_src

*** TODO COMMENT ~ivy~ + ~counsel~ + ~swiper~
[[https://github.com/abo-abo/swiper][ivy, counsel, and swiper]]: tools for minibuffer completion.

#+begin_src emacs-lisp
  (use-package ivy
    :straight t
    :config
    (ivy-mode)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
  )

  (use-package counsel
    :straight t)

  ;; (global-set-key "\C-s" 'swiper)
  ;; (global-set-key (kbd "C-c C-r") 'ivy-resume)
  ;; (global-set-key (kbd "<f6>") 'ivy-resume)
  ;; (global-set-key (kbd "M-x") 'counsel-M-x)
  ;; (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  ;; (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  ;; (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  ;; (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
  ;; (global-set-key (kbd "<f1> l") 'counsel-find-library)
  ;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  ;; (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  ;; (global-set-key (kbd "C-c g") 'counsel-git)
  ;; (global-set-key (kbd "C-c j") 'counsel-git-grep)
  ;; (global-set-key (kbd "C-c k") 'counsel-ag)
  ;; (global-set-key (kbd "C-x l") 'counsel-locate)
  ;; (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  ;; (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+end_src

This feels a little familiar, but I don't think I'm getting the behavior that I
remember in terms of opening recent buffers.

*** ~ido~ + ~flx~: the =find-file= behavior I've missed
I saw that I had [[https://github.com/lewang/flx][flx]] and ~flx-ido~ in the commented-out =custom-set-variables=
block of ~legacy-dotemacs.el~, so maybe that's how I got the file completion I
miss so much.

See [[http://xahlee.info/emacs/emacs/emacs_ido_setup.html][Ido Mode Setup | Xah Lee]] for vertical display and [[https://masteringemacs.org/article/introduction-to-ido-mode][Introduction to Ido
Mode | Mastering Emacs]] for info on =ido-file-extensions-order=.

#+begin_src emacs-lisp
  (use-package ido
    :straight t
    :config
    ;; (ido-mode 1)
    ;; (ido-everywhere 1)
    (setf (nth 2 ido-decorations) "\n")
    (setq ido-file-extensions-order '(".org"
                                      ".el"
                                      ".py"
                                      ".tex"
                                      ".yaml"
                                      ".js"
                                      ".md"
                                      ".txt"))
    :bind
    (:map global-map
          ("C-c 2" . ido-mode)))

  (use-package flx-ido
    :straight t
    :config
    (flx-ido-mode 1)
    (setq ido-enable-flex-matching t)
    (setq ido-use-faces nil))
#+end_src

Ok, this actually gives me the recent file matching I remember, and +C-x C-f C-x
C-f+ ~C-x C-f C-f~ (although ~C-x C-f C-x C-f~ works too) brings up ~vertico~
matching, so maybe there's some nice way of merging the two. Actually, with the
vertical display, maybe I don't even need to do that.

Now that I'm playing around with it a little, I see that I can use
~vertico~-style commands to navigate through the options, i.e. ~C-n~ and ~C-p~ don't
let me scroll through the options once I've narrowed them.

New decision: ~C-c 2~ is globally bound to =ido-mode=, which is off by default. The
main issue is that while ~ido~ is nice for opening buffers, I find it more
annoying than ~vertico~ for switching between buffers, which is something I do
more frequently.

** TODO Project handling: ~projectile~
[[https://github.com/bbatsov/projectile][projectile]]: per [[https://youtu.be/bFS0V_4YfhY][Lukewh's short projectile introduction | YouTube]], it's useful
simply for navigating between and within projects, as defined by the presence
of a ~.git~ folder or something similar.

#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :config
    (projectile-mode +1)
    ;; recommended MacOS keybinding
    ;; (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    ;; (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-x p") 'projectile-commander))
#+end_src

Issue (tangential): tried using recommended ~s-p~ keybinding, and it appears that
~⌘~ + ~p~ is read as ~M-p~. I think ~⌘~ should be the super key, ~s-~, but maybe I'm
wrong?

Issue 2: =projectile-command-map= doesn't seem to be the right function to
invoke. ~M-x projectile-commander~ seems to work, so try binding that? Yep, that
seems to do the trick. Now I just need to remember what the commands do.

** TODO TRAMP
*** TODO COMMENT Fix problem with hanging
#+begin_src emacs-lisp
(eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
#+end_src

I haven't used TRAMP in a bit, so I have no idea if this is still an issue. It
may be that this is the =$SHELL= value on the client device, in which case it
seems like a good idea.

*** Use SSH
See [[https://www.gnu.org/software/emacs/manual/html_node/tramp/Default-Method.html][Selecting a Default Method | Configuring TRAMP | TRAMP User Manual]]

#+begin_src emacs-lisp
  (setq tramp-default-method "ssh")
#+end_src

** Direct text handling
*** Enable ~downcase-region~, ~upcase-region~
The latter was hanging out in my Python configuration section for some
reason :shrug:. Later, it appeared to be added to the base =~/.emacs= file.

#+begin_src emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+end_src

*** ~unfill~
``Functions providing the inverse of Emacs' fill-paragraph and fill-region'' --
[[https://github.com/purcell/unfill][unfill | GitHub]]. Provides functions =unfill-region=, =unfill-paragraph=, and
=unfill-toggle=.

#+begin_src emacs-lisp
  (use-package unfill
    :straight t)
#+end_src

** Miscellaneous
*** Disable "Package ~cl~ is deprecated" warning on startup
See https://github.com/kiwanami/emacs-epc/issues/35. Might be a good idea to
investigate this at some point and actually fix it instead of applying a
bandaid.

#+begin_src emacs-lisp
  (setq byte-compile-warnings '(cl-functions))
#+end_src

*** ~beacon~
[[https://github.com/Malabarba/beacon][beacon]] highlights the cursor when scrolling. Seems helpful!

#+begin_src emacs-lisp
  (use-package beacon
    :straight t
    :config
    (beacon-mode 1))
#+end_src

*** ~neotree~
[[https://github.com/jaypei/emacs-neotree][neotree]] works like NerdTree for Vim (basically a directory tree that opens up
beside your buffer).

#+begin_src emacs-lisp
  (use-package neotree
    :straight t
    :config
    (global-set-key [f8] 'neotree-toggle))
#+end_src

** TODO Silly stuff
*** Shrug emoticon
#+begin_src emacs-lisp
  (defun shrug-emoticon ()
    "insert ¯\\_(ツ)_/¯ anywhere in your code (preferably comments)"
    (interactive)
    ;; note that the backslash needs to be escaped
    (insert "¯\\_(ツ)_/¯"))
#+end_src

*** Magic 8-ball
Works just like a magic 8-ball with its default configuration. Read the
documentation for customization options.

Note that the prefix, =C-u=, changes the behavior (by adding "[​=<timestamp>=​]
=<question>= =<response>=" to the ~kill ring~).

#+begin_src emacs-lisp
  (straight-use-package
   '(eight-ball
     :type git
     :host github
     :repo "RyanMatlock/eight-ball"))
  (require 'eight-ball)
  (global-set-key (kbd "C-c 8") 'eight-ball)
#+end_src

*** TODO ~fortune~

*** TODO Define ~obnoxious-case-region~
Type a line normally and cOnVeRt It To ThIs. Maybe pass a prefix argument to
shift if it starts uppercase or lowercase?

* TODO Emacs Lisp
** REPL

#+begin_src emacs-lisp
  (use-package elisp-slime-nav)
#+end_src

Update: These days I'm using [[https://www.emacswiki.org/emacs/InferiorEmacsLispMode][IELM]] (Inferior Emacs Lisp Mode), which works
really well. Not sure that ~elisp-slime-nav~ is useful, but I'll keep this here
for now.

*** Eldoc hints
See [[https://www.n16f.net/blog/making-ielm-more-comfortable/][Making IELM More Comfortable | Nicolas Martyanoff — Brain dump]] (nice
because it's recent---dated [2023-04-08 Sat])

Eldoc mode gives you hints in the minibuffer.

#+begin_src emacs-lisp
  (add-hook 'ielm-mode-hook 'eldoc-mode)
#+end_src

*** IELM keybindings

#+begin_src emacs-lisp
  (with-eval-after-load 'ielm
    (progn
      (define-key ielm-map (kbd "C-c M-<return>") 'ielm-return-for-effect)
      (define-key ielm-map (kbd "M-<return>") 'ielm-return)
      (define-key ielm-map (kbd "<return>") 'newline)
      (when 'paredit-mode
        (message "paredit-mode is available"
                 (define-key ielm-map (kbd "C-c <tab>") 'ielm-return)))))
#+end_src

tl;dr:
- While working on Exercism's Emacs Lisp track and using IELM to experiment, I
  was using ~M-x ielm-return~ to evaluate expressions, which was a little
  tedious but not /terrible/ given how I have my =execute-extended-command=
  (i.e. ~M-x~) history set up
- Paredit mode had =paredit-RET= bound to ~M-<return>~, and according to [[https://stackoverflow.com/a/16614083][Why
  can't I change paredit keybindings | stackoverflow]], paredit mode doesn't play
  nicely with the user trying to rebind keys ([[https://github.com/Fuco1/smartparens][smartparens]] is supposedly better
  in that regard)
- I want =<return>= to insert a newline, =M-<return>= to evaluate an
  s-expression, and =C-c M-<return>= to evaluate an sexp for side
  effects/without printing the result
- =ielm-map= is an alias to =inferior-emacs-lisp-mode-map= (per
  https://github.com/eXLabT/emacs-lisp/blob/master/ielm.elc)
- =with-eval-after-load= works, =eval-after-load= doesn't, and I don't really
  understand why at the moment.
- [[https://stackoverflow.com/a/15869858][Bind command to C-RET in Emacs | stackoverflow]] has great advice for how to
  format =kbd='s argument: ~C-h k~ the key combination you want to use and see
  what Emacs calls it combination, e.g. ~C-h k C-RET~ gives ~C-<return>~, so
  you can use =(kbd "C-<return>")= when you want to bind a command to ~C-RET~.

#+begin_quote
Good to know: ~C-c M-o~ is bound to =comint-clear-buffer=, and ~C-c C-l~ is
bound to =comint-dynamic-list-input-ring=, which is basically the history of
the input.
#+end_quote

** Completion: use =ielm-auto-complete=
See [[https://emacs.stackexchange.com/a/30783][Emacs - elisp code autocompletion in emacs-lisp-mode | emacs.stackexchange]]

#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'ielm-auto-complete)
#+end_src

** Parentheses
*** TODO +ParEdit+ +smartparens+ ParEdit
**** Basic config
Balance parentheses automatically; see [[http://www.emacswiki.org/emacs/ParEdit][ParEdit | EmacsWiki]].

#+begin_src emacs-lisp
  (use-package paredit
    :straight t
    :hook ((emacs-lisp-mode . paredit-mode)
           ;; (eshell-mode . paredit-mode) ;; shadows <RET>
           (lisp-mode . paredit-mode)
           (common-lisp-mode . paredit-mode)
           (lisp-interaction-mode . paredit-mode)
           (geiser-repl-mode . paredit-mode)
           (slime-repl-mode . paredit-mode)
           (ielm-mode . paredit-mode)
           (lisp-data-mode . paredit-mode)
           (scheme-mode . paredit-mode)))
#+end_src

Per [[https://stackoverflow.com/a/16614083][Why can't I change paredit keybindings]] (which is almost 10 years old at the
time of visiting this), I should use [[https://github.com/Fuco1/smartparens][smartparens]] instead of paredit because of
the convoluted way paredit handles keybindings (no wonder you've been having so
much trouble!).

**** COMMENT smartparens

#+begin_src emacs-lisp
  (use-package smartparens
    :straight t
    ;; :hook ((emacs-lisp-mode . 'turn-on-smartparens-strict-mode)
    ;;        (lisp-mode . 'turn-on-smartparens-strict-mode)
    ;;        (comint-mode . 'turn-on-smartparens-strict-mode))
    :config
    (require 'smartparens-config)
    ;; (sp-with-modes sp--lisp-modes
    ;;   (turn-on-smartparens-strict-mode)
    ;;   (sp-use-paredit-bindings))
    )

  ;; (sp-with-modes sp--lisp-modes
  ;;   'turn-on-smartparens-strict-mode)

  ;; (let ((barf-slurp ((format "C-S-%s")))))
  ;; (define-key smartparens-mode-map (kbd "C-S-right") 'sp-forward-slurp-sexp)
  ;; (define-key smartparens-mode-map (kbd "C-S-left"))

  ;; sp-use-paredit-bindings
#+end_src

**** Issues

#+begin_example
  Error (use-package): smartparens/:config: Invalid function: (require
  'smartparens-config) Disable showing Disable logging
  Error (use-package): smartparens/:config: Wrong number of arguments: (0 . 0), 1
  Disable showing Disable logging
#+end_example

That issue seemed to come up when I had

# #+begin_src emacs-lisp :eval no
#   :config
#   (require 'smartparens-config)
#   (sp-with-modes sp--lisp-modes
#     (turn-on-smartparens-strict-mode)
#     (sp-use-paredit-bindings))

#   ;; or

#   :config (progn
#             (require 'smartparens-config)
#             (sp-with-modes sp--lisp-modes
#               (turn-on-smartparens-strict-mode)
#               (sp-use-paredit-bindings)))
# #+end_src

#+begin_example
  Warning (defvaralias): Overwriting value of ‘inferior-emacs-lisp-mode-hook’ by
  aliasing to ‘ielm-mode-hook’ Disable showing Disable logging
#+end_example

This might be an issue.

Per [[https://github.com/NicolasPetton/emacs/blob/b176d169347925d57ca63ab63b85d92e49a53c81/lisp/ielm.el#L64][https://github.com/NicolasPetton/emacs/blob/master/lisp/ielm.el#L64]], you
could use =comint-mode-hook= and =comint-mode-map= instead of the IELM
equivalents.

I like that this doesn't have such a pesky way of handling keybindings, +but I
need to ensure that single quotes aren't added in pairs in Lisp modes,+ and I
need to enable it by default in those modes. That said, paredit seems more
assertive in preventing unbalanced parentheses, so I might need to do more
tweaking. It looks like I need to update the keybindings so slurp and barf
behave like paredit mode.

It looks like part of the smartparens documentation covers [[https://github.com/Fuco1/smartparens/wiki/Paredit-and-smartparens][paredit and
smartparens]].

Here's what I want
- [ ] enable =sp-use-paredit-bindings= in Lisp modes and possibly globally (at
  least for now; perhaps at some point I'll want to update that) ---
  =smartparens-strict-mode= actually seems to handle slurping and barfing th
  way I'm used to

**** COMMENT Stolen from [[https://github.com/Fuco1/.emacs.d/blob/master/files/smartparens.el][author's config]]

#+begin_src emacs-lisp
  (sp-with-modes 'org-mode
    (sp-local-pair "=" "=" :wrap "C-=")
    (sp-local-pair "~" "~" :wrap "M-`")
    ;; yeah, I'm bringing 「」 back
    (sp-local-pair "「" "」" :wrap "C-c e"))

  ;; conflict with RefTeX?
  ;; (sp-with-modes '(tex-mode plain-tex-mode latex-mode LaTeX-mode)
  ;;   (sp-local-pair "\\left(" "\\right)" :wrap "C-c (")
  ;;   (sp-local-pair "\\left[" "\\right]" :wrap "C-c ["))

  (--each sp--lisp-modes
    (eval-after-load it
      '(turn-on-smartparens-strict-mode)))
#+end_src

This still isn't calling =turn-on-smartparens-strict-mode= for some reason.

Since I couldn't find an =apropos= entry for it,

#+begin_example
  ELISP> sp--lisp-modes
  (cider-repl-mode clojure-mode clojurec-mode clojurescript-mode clojurex-mode
                   common-lisp-mode emacs-lisp-mode eshell-mode fennel-mode
                   fennel-repl-mode geiser-repl-mode gerbil-mode inf-clojure-mode
                   inferior-emacs-lisp-mode inferior-lisp-mode
                   inferior-scheme-mode lisp-interaction-mode lisp-mode
                   monroe-mode racket-mode racket-repl-mode
                   scheme-interaction-mode scheme-mode slime-repl-mode
                   sly-mrepl-mode stumpwm-mode)
#+end_example

so that's really everything.

I'm also having issues with

#+begin_example
    (sp-local-pair "~「" "」~" :wrap "C-c M-`")
    (sp-local-pair "=「" "」=" :wrap "C-c r")
#+end_example

#+begin_example
  Debugger entered--Lisp error: (wrong-type-argument char-or-string-p nil)
    sp-wrap-with-pair("=「")
    (lambda (&optional arg) (interactive "*P") (sp-wrap-with-pair "=「"))(nil)
    funcall-interactively((lambda (&optional arg) (interactive "*P") (sp-wrap-with-pair "=「")) nil)
    call-interactively((lambda (&optional arg) (interactive "*P") (sp-wrap-with-pair "=「")) nil nil)
    command-execute((lambda (&optional arg) (interactive "*P") (sp-wrap-with-pair "=「")))
#+end_example

*** ~rainbow-delimiters~
[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]: useful for more than just Lisp, this mode color codes
parentheses, brackets, and braces by their depth. Saw it (or something like it)
in some screencast, and I need it. Update: used this for awhile, and I don't
know how I ever lived without it.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook ((prog-mode . rainbow-delimiters-mode)
           (tex-mode . rainbow-delimiters-mode)
           (latex-mode . rainbow-delimiters-mode)
           (LaTeX-mode . rainbow-delimiters-mode)
           (comint-mode . rainbow-delimiters-mode)))
#+end_src

Note: =comint-mode-hook= should affect modes that inherit from =comint-mode=, for
example, IELM.

** TODO ~eshell~
Seeing as how ~eshell~ natively accepts Emacs Lisp, this seems like a fine
section under which to put this.

*** TODO Fancy prompt
EmacsWiki has some ideas for how to change thee [[https://www.emacswiki.org/emacs/EshellPrompt][eshell prompt]] to make it more
like your bash prompt, or even do some cool things like fish.

* TODO Org mode
** Main config
Per [[https://panadestein.github.io/emacsd/#org55146ca][Panadestein's Emacs's config | Org mode]], it seems like I can put this all
the way down here and remove =(use-package org)= from ~dotemacs.el~. I'm not
ready to make that change yet, but when I do, it'll go here.

#+begin_src emacs-lisp
  (use-package org
    :straight t
    :init
    (defun display-ansi-colors ()
      "Fixes kernel output in emacs-jupyter"
      (ansi-color-apply-on-region (point-min) (point-max)))
    :hook
    (org-mode . (lambda ()
                  (progn
                    ;; not sure what this does
                    ;; (add-hook
                    ;;  'after-save-hook #'org-babel-tangle :append :local)
                    (add-hook
                     'org-babel-after-execute-hook #'display-ansi-colors))))
    :config
    ;; (require 'ox-beamer)
    ;; (require 'ol-bibtex)
    (add-to-list 'org-modules 'org-tempo)
    (org-babel-do-load-languages
     'org-babel-load-languages '((python . t)
                                 ;; (jupyter . t)
                                 (scheme . t)
                                 (haskell . t)
                                 (lisp . t)
                                 (emacs-lisp . t)
                                 ;; (clojure . t)
                                 (C . t)
                                 (org . t)
                                 ;; (gnuplot . t)
                                 (sql . t)
                                 (eshell . t)
                                 (awk . t)
                                 (latex . t)
                                 (shell . t)))
    ;; (setq org-babel-clojure-backend 'cider)
    ;; (setq org-latex-pdf-process '("latexmk -shell-escape -pdf -outdir=%o %f"))
    ;; (setq org-preview-latex-default-process 'imagemagick)
    ;; (setq org-src-window-setup 'current-window)
    ;; (setq org-startup-indented t)
    (setq
     ;; org-latex-listings 'minted
     org-latex-packages-alist
     '(
       ;; ("" "minted")
       ("" "siunitx")))
    ;; (add-to-list 'org-latex-default-packages-alist
    ;;              (concat "\\PassOptionsToPackage"
    ;;                      "{colorlinks=true,allcolors=magenta}{hyperref}"))
    (customize-set-value
     'org-latex-hyperref-template
     (concat "\\hypersetup{\n"
             "pdfauthor={%a},\n"
             "pdftitle={%t},\n"
             "pdfkeywords={%k},\n"
             "pdfsubject={%d},\n"
             "pdfcreator={%c},\n"
             "pdflang={%L},\n"
             "colorlinks=true,\n"
             "allcolors=magenta}"))
    (setq org-startup-with-inline-images t)
    (setq org-todo-keywords
          '((sequence "TODO(t)"
                      "BROKEN(b)"
                      "PARTIAL(p)"
                      "VERIFY(v)"
                      "URGENT(u)"
                      "|"
                      "DONE(d)"
                      "OPTIONAL(o)"
                      "DELEGATED(e)"
                      "CANCELLED(c)")))
    (setq org-todo-keyword-faces
          '(("TODO" . "cyan")
            ("BROKEN" . "red")
            ("PARTIAL" . "green")
            ("VERIFY" . "gold")
            ("URGENT" . "orange")
            ("DONE" . "forest green")
            ("OPTIONAL" . "dark cyan")
            ("DELEGATED" . "sea green")
            ("CANCELLED" . "deep sky blue")))
    (setq org-format-latex-options
          (plist-put org-format-latex-options :scale 2.0))
    (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images))
#+end_src

Some explanations:
- =org-src-window-setup=: [[https://stackoverflow.com/questions/20909393/how-to-open-a-code-block-using-emacs-org-mode-in-a-specific-window][How to open a code block using emacs org-mode in a
  specific window | stackoverflow]] (you don't want it in =current-window=, and
  the default behavior seems to work the way you like it)
- =org-format-latex-options=: [[https://stackoverflow.com/a/11272625][How to make formule bigger in org-mode of
  Emacs? | stackoverflow]]
- +[[https://emacs.stackexchange.com/a/46226][How to change style of hyperlinks within PDF published from org-mode
  document? | stackoverflow]]: =... \\PassOptionsToPackage{hyperref} ...=+
  Actually, that answer looks wrong, but [[https://emacs.stackexchange.com/a/61200][changing the hyperref tamplate |
  stackoverflow]] (=org-latex-hyperref-template=) looks promising
- had an issue where =minted= appeared to break listings export---*look into
  this!*

** Keybindings
*** Still relevant?
By default

| key   | binding            | desired behavior    |
|-------+--------------------+---------------------|
| ~TAB~   | =org-cycle=          | =completion-at-point= |
| ~C-c ;~ | =org-toggle-comment= | +=iedit-...=+ nothing |

| variable              | value |
|-----------------------+-------|
| =org-cycle-emulate-tab= | =t=     |

But I want to bind ~TAB~ to =org-cycle= for headlines and =completion-at-point= for
everything else.

I'm constantly accidentally typing ~C-c ;~ when I mean to type ~C-c '~, so I want
=org-toggle-comment= to feel more intentional. I never use
=org-table-create-or-convert-from-region=, and even if I needed to use it from
time to time, I can always call it with ~M-x ...~ rather than keep it bound to a
key.

*** =iedit-mode= only available in ~src~ blocks

#+begin_src emacs-lisp
  (defun org-iedit-only-in-src-block ()
    "Ensure iedit-mode only works in Org src block.

  Note: manually calling 「M-x iedit-mode⸥ will still work anywhere"
    (interactive)
    (cond ((org-in-src-block-p t) (iedit-mode))
          (t (progn (ding)
                    (message "You're not in an Org src block.")))))

  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "C-c ;") 'org-iedit-only-in-src-block))
#+end_src

Note about =org-in-src-block-p=:

#+begin_quote
(org-in-src-block-p &optional INSIDE ELEMENT)

Whether point is in a code source block.
When INSIDE is non-nil, don’t consider we are within a source
block when point is at #+BEGIN_SRC or #+END_SRC.
When ELEMENT is provided, it is considered to be element at point.
#+end_quote

=(org-in-src-block-p t)= is in fact the behavior I want and not a newbie
mistake lingering on in here.

The reason I had an issue with =(void-variable org-iedit-in-src-block)= for so
long was that I forgot (read: didn't know that I needed to) quote the function
in =define-key= or =local-set-key=, but now everything works as it should.

** ~org-tempo~
[[https://orgmode.org/manual/Structure-Templates.html][Org structure templates]] (~C-c c-,~: =org-insert-structure-template=)

#+begin_src emacs-lisp
  ;; daviwil's strategy:
  ;; (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  ;; ...
  ;; (add-to-list 'org-structure-template-alist '("py" . "src python"))

  ;; more elegant way of doing it(?)
  ;; note: cdr needs to have 'src␣' prepended in order to work.
  (with-eval-after-load 'org
    (progn
      (setq org-structure-template-src-alist-extensions
            '(("el"  . "emacs-lisp")
              ("hs"  . "haskell")
              ("ltx" . "latex")
              ("org" . "org")
              ("py"  . "python")
              ("rust" . "rustic")
              ("sql" . "sql")
              ("sh"  . "shell")
              ("esh" . "eshell")
              ("yaml" . "yaml")
              ("json" . "json")))

      (seq-do
       #'(lambda (src-cell)
           (let* ((key (car src-cell))
                  (name (format "src %s" (cdr src-cell)))
                  (entry (cons key name)))
             (add-to-list 'org-structure-template-alist entry)))
       org-structure-template-src-alist-extensions)))

#+end_src

[Note: for Rust support, use [[https://github.com/brotzeit/rustic][rustic]]; see [[https://stackoverflow.com/a/62934702][Literate Programming with rust and org
mode | stackoverflow]].]

** =org-pretty-entities=
[[https://orgmode.org/manual/Special-Symbols.html][org-pretty-entities]] automatically converts appearance of things like ~\​to~ to →
and ~\​alpha~ to α. This can be toggled with ~C-c C-x \~
(=org-toggle-pretty-entities=).

#+begin_src emacs-lisp
  (setq org-pretty-entities t)
#+end_src

** Toggle =:eval no= for =src= blocks
Stolen from [[https://emacs.stackexchange.com/a/13897/9013][How to toggle Org-mode source code block ":eval no" status | Emacs
StackExchange]]

#+begin_src emacs-lisp
  (defun org-toggle-src-eval-no ()
    "Will toggle \":eval no\" on the src block begin line"
    (interactive)
    (defun in-src-block-p ()
      "Returns t when the point is inside a source code block"
      (string= "src" (org-in-block-p '("src"))))

    (defun beginning-src ()
      "Find the beginning of the src block

  Note: pathological case: if a block within src block contains \"#+BEGIN_SRC\"
  and cursor is before that line, \":eval no\" won't toggle in correct
  location"
      (let ((case-fold-search t)) (search-backward "#+BEGIN_SRC")))

    (defun toggle-eval-no ()
      "Handles the toggling of ' :eval no'"
       (save-excursion
        (end-of-line)
        (let ((case-fold-search t)) (search-backward "#+BEGIN_SRC")
         (if (search-forward " :eval no" (line-end-position) "f")
             (replace-match "")
           (insert " :eval no")))))

    (if (in-src-block-p) (toggle-eval-no)))

  (defun add-org-toggle-src-key ()
    (local-set-key (kbd "C-c t")
                   #'org-toggle-src-eval-no))

  (add-hook 'org-mode-hook 'add-org-toggle-src-key)
#+end_src

** alphabetical lists
See [[https://orgmode.org/manual/Plain-Lists.html#FOOT11][Org Manual §2.6 Plain Lists -- Fn 11]].

#+begin_src emacs-lisp
  (setq org-list-allow-alphabetical t)
#+end_src

** TODO Export

*** TODO HTML -- default stylesheet

*** TODO LaTeX
**** TODO Dates
I think I just want these rendered like the surrounding text.

#+begin_src emacs-lisp
  (setq org-latex-active-timestamp-format "\\text{%s}")
  (setq org-latex-inactive-timestamp-format "\\text{%s}")
#+end_src

Also want to change the behavior of exporting dates as =[<ISO 8601> <%a>]= to
=%B %-d, %Y=. Looks like I may need to change =org-timestamp-custom-formats=, but
the documentation is a little spotty.

* Load additional org configuration files
See [[* Switches for additional configuration][configuration switches]] to see what's loaded.

Newest/fanciest/best way of doing it:

#+begin_src emacs-lisp
  (seq-do
   #'(lambda (ccell)
       (let* ((file (car ccell))
              (name (upcase-initials
                     (replace-regexp-in-string "-" " " (file-name-base file))))
              (path (expand-file-name file emacs-config-directory))
              (enable (cdr ccell)))
         (when enable
           (cond ((file-readable-p path)
                  (org-babel-load-file path)
                  (message "%s loaded." name))
                 (t (warn (format "%s NOT loaded ('%s' missing or unreadable)."
                                  name
                                  path)))))))
   emacs-config-additional-files-alist)
#+end_src

* Package graveyard
- [[https://github.com/auto-complete/auto-complete][auto-complete]]
- [[https://github.com/technomancy/better-defaults][better-defaults]]
- [[https://github.com/zk-phi/electric-case][electric-case]]
- [[https://github.com/davidshepherd7/electric-operator][electric-operator]]
- [[https://github.com/xwl/electric-spacing][electric-spacing]] (does the same thing as ~electric-operator~ ?)
- [[https://github.com/remvee/elein][elein]]
- [[https://elpy.readthedocs.io/en/latest/][elpy]] (Emacs Python Develpment Environment) (\to ~core-langs.org~ ?)
- [[https://github.com/ikazuhiro/emoji-display][emoji-display]] (use ~emojify~ instead)
- [[https://github.com/defunkt/gist.el][gist]]

* Sanity check
Check that bottom of this file was reached and evaluated successfully.

#+begin_src emacs-lisp
  (message "Bottom of core-config.org reached and evaluated.")
#+end_src
