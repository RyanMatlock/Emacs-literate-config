#+title: Literate Emacs configuration with Org mode
#+subtitle: Core configuration
#+author: Ryan Matlock

As of [2021-04-19], my Emacs configuration file, which probably began life
around seven years ago, is over 1700 lines long, full of cruft, and difficult
to manage. It's time to start over---with Org mode!

Now on [2022-01-13], it's time to separate core features I want from certain
mode-specific and more obscure customizations, which should hopefully make this
more portable onto new machines. (TODO: test this on Mac OS and some flavor of
Linux).

* Usage
** Escape hatch
In case you need to go back to your old configuration:

#+begin_src sh :eval no
  ln -s /path/to/legacy-dotemacs.el ~/.emacs
#+end_src

Then either reload =.emacs= or restart Emacs. Looks like you shouldn't need to do
this though.

** TODO How this works -- correct this
=.emacs= is symlinked to =dotemacs.el=, which loads the necessary +~package~+ and
~use-package~ packages in order for ~org-babel-load-file~ to process this file,
+=README.org=+, which contains all the Emacs Lisp configuration goodness (excluding
the stuff handled by ~customize-variable~).

** Configuration organization
*** ~core-config.org~

Also includes main editing commands for
- Org mode (but not Org-roam)
- Emacs Lisp
- git
so that this file can be easily edited without loading additional extensions.

*** ~core-langs.org~
Includes configuration for
- Haskell
- Python
- Rust
- TeX/LaTeX
and related tools.

*** ~extras.org~

* TODO Switches for additional configuration
Since these are boolean, they should probably end in =-p=. Currently have ~C-c ;~
bound to =org-toggle-comment= but I want to use the appropriate ~iedit~ function,
so fix that first, then fix this.

#+begin_src emacs-lisp
  (setq core-config-core-langs-switch nil)
  (setq core-config-extras-switch t)
#+end_src

* Problems
* Features to add/look into & changes to make [1/5]
- [ ] complete the switch from ~package.el~ to ~straight.el~
  - [ ] automatically install missing packages on startup (finding out the hard
        way that migrating this config to a new machine is a PITA)
- [X] get meta key working properly on M1 Mac Mini
- [ ] oBnOxIoUs CaSe region command (this may already exist, but I'm going
  to 1) respect other Emacs users enough to assume that it doesn't, and 2) try
  to write it myself because it seems straightforward but also good Emacs Lisp
  practice).
- [ ] [[https://github.com/abo-abo/hydra][hydra]] for fancy keybindings
- [ ] ~setq~ vs ~customize-variable~; move stuff to =custom.el= if the latter makes
  sense for much of your configuration

* Customize
It seems like the less I use ~customize~ outside of the literate configuration
files, the better because I can always use =(use-package ... :custom ...)= or
=setq= and annotate everything using Org mode. See [[https://emacs.stackexchange.com/questions/102/advantages-of-setting-variables-with-setq-instead-of-custom-el][Advantages of setting
variables with setq instead of custom.el? | emacs.stackexchange]] for a good
(albeit old) discussion of the relative merits of each. +I think this ought to
be loaded after everything else so customization override anything hard coded
into these config files.+ Moving this file led to weirdness/ugliness, so I'll
have to dig through the configuration. Bleh.

+There are probably a number of settings you can/should move into this,
although I'm curious how much of a pressing need there is given that with a
literate =.emacs= config, I can explain my reasoning for a setting.+

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "~/config/emacs/custom.el"))
  (load custom-file)
#+end_src

* General interface & minor modes
** TODO ~package.el~ \to ~straight.el~
See https://github.com/raxod502/straight.el

I think the better way of doing this might be to move the relevant =use-package=
command to the natural place in the config file instead of all in one big list.

Old info:
=dotemacs.el= takes care of ~package~, ~use-package~, MELPA, and the ~org-babel~ stuff
necessary to evaluate the Emacs Lisp blocks in this file; see
https://cestlaz.github.io/posts/using-emacs-10-org-init/. However, if using
this config file on a new machine, the lack of installed packages will lead to
errors.

** Startup behavior
*** ~*scratch*~ behavior
#+begin_src emacs-lisp
  (setq initial-major-mode 'text-mode)
  (setq initial-scratch-message nil)
#+end_src

*** Turn off welcome screen
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

** TODO General look & feel

*** Solarized Dark theme
[[https://github.com/bbatsov/solarized-emacs][solarized-emacs]]

#+begin_src emacs-lisp
  (use-package solarized-theme
    :straight t
    :config (progn
              (load-theme 'solarized-dark t)
              (setq solarized-distinct-fringe-background t)
              (setq solarized-high-contrast-mode-line t)
              (setq solarized-scale-org-headlines nil)
              (setq solarized-use-more-italic t)
              (setq solarized-use-variable-pitch nil)))
#+end_src

*** GUI
- no menu bar; see see http://emacswiki.org/emacs/MenuBar#toc1
- no tool bar
- no scroll bar
- 96% opacity (matches OS X Terminal); see see
  http://stackoverflow.com/questions/21946382/how-to-get-transparent-window-in-gnu-emacs-on-osx-mavericks
- default frame size: 80w x 45h
- define ~std-frame~ to return to default 80w x 45h
- define ~lrg-frame~, which accommodates two side-by-side windows
- define ~xl-frame~, which accommodates three side-by-side-by-side windows
- use Inconsolata size 15 font
- set unicode font to Unifont
- +use Solarized Dark theme; see+
  +https://emacs.stackexchange.com/questions/10246/emacs-always-ask-to-trust-colour-theme-at-startup+
- disable mouse inputs (except scrolling?); see
  http://stackoverflow.com/questions/4906534/disable-mouse-clicks-in-emacs
- disable =C-z=, which minimizes Emacs in GUI mode
- disable ~visible-bell~; see
  http://stackoverflow.com/questions/36805713/emacs-blank-square-on-mac-os-x/36813418#36813418

#+begin_src emacs-lisp
  (when window-system
    (menu-bar-mode -1)  ;; not working?
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (set-frame-parameter (selected-frame) 'alpha '(96 96))
    (add-to-list 'default-frame-alist '(alpha 96 96))
    (defvar gui-config-frame-width 80) ;; BAD!! refer to column-fill-width?
    (defvar gui-config-frame-height 45)
    (set-frame-size (selected-frame)
                    gui-config-frame-width
                    gui-config-frame-height)
    (defun side-by-side ()
    "resizes the frame to accommodate two windows side-by-side"
    (interactive)
    (set-frame-size (selected-frame)
                    ;; used to be + 3, but I think there are some side columns
                    ;; that take away screen real estate now?
                    (+ (* gui-config-frame-width 2) 7)
                    gui-config-frame-height))
    (defun std-frame ()
      "reverts framesize to standard"
      (interactive)
      (set-frame-size (selected-frame)
                      (+ 1 gui-config-frame-width)
                      gui-config-frame-height))
    (defun gui-config-calculate-frame-width (num-windows)
      "calculate how wide the frame should be for a number of windows"
      (let ((inter-window-space 2))
        (+ (* gui-config-frame-width num-windows)
           (* inter-window-space (- num-windows 1)))))
    (defun lrg-frame ()
      "resize frame for 2 side-by-side windows (same as side-by-side function,
       which is being kept for now for the sake of legacy)"
      (interactive)
      (let ((num-windows 2))
        (set-frame-size (selected-frame)
                        (gui-config-calculate-frame-width num-windows)
                        gui-config-frame-height)))
    (defun xl-frame ()
      "resize frame for 3 side-by-side-by-side windows + extra height"
      (interactive)
      (let ((num-windows 3)
            (height-multiplier 1.3))
        (set-frame-size (selected-frame)
                        (gui-config-calculate-frame-width num-windows)
                        (floor (* gui-config-frame-height height-multiplier)))))
    (defvar gui-config-font-face "Inconsolata")
    (defvar gui-config-font-size 15)
    (set-fontset-font t 'unicode "Unifont" nil 'prepend)
    (set-frame-font (concat gui-config-font-face
                            "-"
                            (number-to-string gui-config-font-size)))
    (dolist (k '([mouse-1] [down-mouse-1] [drag-mouse-1] [double-mouse-1]
                 [triple-mouse-1] [mouse-2] [down-mouse-2] [drag-mouse-2]
                 [double-mouse-2] [triple-mouse-2] [mouse-3] [down-mouse-3]
                 [drag-mouse-3] [double-mouse-3] [triple-mouse-3] [mouse-4]
                 [down-mouse-4] [drag-mouse-4] [double-mouse-4]
                 [triple-mouse-4] [mouse-5] [down-mouse-5] [drag-mouse-5]
                 [double-mouse-5] [triple-mouse-5]))
      (global-unset-key k))
    (global-unset-key (kbd "C-z"))
    (setq visible-bell nil))
#+end_src

*** ~exec-path-from-shell~ to fix ~exec-path~​/​~PATH~ behavior in MacOS GUI
[[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] fixes behavior of how environment variables are loaded in
MacOS GUI Emacs.

[Note that you need to use [[https://www.gnu.org/software/emacs/manual/html_node/eintr/progn.html][progn]] in order to evaluate the series of
s-expressions in =:config=.]

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :config (progn
              (when (memq window-system '(mac ns x))
                (exec-path-from-shell-initialize))
              (when (daemonp)
                (exec-path-from-shell-initialize))
              (exec-path-from-shell-copy-env "PYTHONPATH")))
#+end_src

*** Prettier mode line
I checked Reddit to get some ideas for which mode line packages are popular
these days. A lot of people seem to be happy with Doom Emacs/[[https://github.com/seagle0128/doom-modeline][doom-modeline]], and
[[https://gitlab.com/jessieh/mood-line][mood-line]] is a lightweight alternative.

If that doesn't work out, [[https://github.com/tarsius/minions][minions]] (minor mode lighter \to separate menu) + [[https://github.com/tarsius/moody][moody]]
also looks really nice. It looks like you could actually use ~mood-line~ with
~minions~ with some tweaks; see [[https://gitlab.com/jessieh/mood-line/-/issues/21][Support Minions Mode]].

By default, ~mood-line~'s git status looks unreadable in the active
window/frame/buffer/whatever the right term is when using Solarized Dark theme
(bright yellow text over light grey background) [note: only true when
=(solarized-high-contrast-mode-line t)= ]. I think the issue can be
traced to

#+begin_src emacs-lisp :eval no
  (defface mood-line-status-info
    '((t (:inherit (font-lock-keyword-face))))
    "Face used for generic status indicators in the mode-line."
    :group 'mood-line)
#+end_src

so I'm going to try modifying that. Actually, looking at the Customize options,
=mood-line-status-success= uses the same bright yellow color, and
=mood-line-status-neutral= uses only a slightly darker grey than the background.

#+begin_src emacs-lisp
  (use-package mood-line
    :straight t
    :config
    (progn
      (when (and (member 'solarized-dark custom-enabled-themes)
                 solarized-high-contrast-mode-line)
        (progn
          ;; (message "You're using Solarized Dark")
          ;; note: hex codes work just as well as color strings
          (set-face-attribute
           'mood-line-status-info
           nil
           :foreground
           (cdr (assoc 'blue-d solarized-dark-color-palette-alist)))
          (set-face-attribute
           'mood-line-status-success
           nil
           :foreground
           (cdr (assoc 'blue-d solarized-dark-color-palette-alist)))
          (set-face-attribute
           'mood-line-status-neutral
           nil
           :foreground
           (cdr (assoc 'green-d solarized-dark-color-palette-alist)))))
      (mood-line-mode)))
#+end_src

*** TODO Set columns to wrap at 80 characters -- move to custom?
Note: the fixed width font size for verbatim/code is slightly wider than
Inconsolata, so either change the face or make the window slightly wider maybe?
You ought to set one value as a number and then do the appropriate math with
that value rather than what you've done with hard-coding 79 and 80 characters
into this configuration.

"BuT mOnItOrS aRe So WiDe ThEsE dAyS!!1" Yeah, but it's convenient being able
to have multiple windows side-by-side in a relatively compact space, plus
Python's PEP 8 is right.

#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(setq-default fill-column 79)
#+end_src

*** TODO ~whitespace~ -- move to custom??
Highlight lines over 80 chars long; see
http://emacsredux.com/blog/2013/05/31/highlight-lines-that-exceed-a-certain-length-limit/
and
http://stackoverflow.com/questions/6344474/how-can-i-make-emacs-highlight-lines-that-go-over-80-chars 

#+begin_src emacs-lisp
  (require 'whitespace)
  (setq whitespace-line-column 80)
  (setq whitespace-style '(face lines-tail))

  (define-global-minor-mode my-global-whitespace-mode whitespace-mode
    (lambda ()
      (when (derived-mode-p 'prog-mode)
        (whitespace-mode))))
  (my-global-whitespace-mode 1)
#+end_src

*** TODO Tab/space handling -- improve this
Tip: ~M-x~ [[http://pragmaticemacs.com/emacs/convert-tabs-to-spaces/][untabify]] works on a region, ~C-u M-x untabify~ works on a whole
buffer. Maybe make a function, =safe-untabify-buffer=, that warns if you attempt
to =untabify= in a mode that requires tabs?

+Use spaces instead of tabs (generally); provide function to ``untabify''
buffer, see [[http://stackoverflow.com/questions/24832699/emacs-24-untabify-on-save-for-everything-except-makefiles/24857101#24857101][Emacs 24: untabify on save for everything *except* makefiles |
stackoverflow]]. Note: don't use on makefiles, which *require* tabs instead of
spaces.+

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  ;; (defvar tabbed-mode-list
  ;;   '('makefile-mode)
  ;;   "docstring")
  ;; (defun untabify-buffer ()
  ;;   (unless (derived-mode-p 'makefile-mode)
  ;;     (untabify (point-min) (point-max))))
#+end_src

I used to run =untabify-except-makefiles= on every save, but that's really not
necessary, so I'm going to remove that feature.

#+begin_src emacs-lisp :eval no
  (defun untabify-except-makefiles ()
    (unless (derived-mode-p 'makefile-mode)
      (untabify (point-min) (point-max))))
  (add-hook 'before-save-hook 'untabify-except-makefiles)
#+end_src


*** TODO ~column-number-mode~ / ~display-line-numbers-mode~
[[https://www.gnu.org/software/emacs/manual/html_node/efaq/Displaying-the-current-line-or-column.html][column-number-mode]]

[[https://www.emacswiki.org/emacs/LineNumbers][display-line-number-mode]] enable this??

#+begin_src emacs-lisp
  (setq column-number-mode t)
#+end_src

*** ~emojify~
[[https://github.com/iqbalansari/emacs-emojify][emojify]] enables emojis (e.g. 🙂), GitHub-style emojis (e.g. ~:smile:~), and ASCII
emojis (e.g. ~:)~)

#+begin_src emacs-lisp
  (use-package emojify
    :straight t
    :hook (after-init . global-emojify-mode)
    :config (setq emojify-display-style 'image))
#+end_src

Note that the =gitmoji= =:​memo:= symbol is the same as ~emojify~'s =:​pencil:=, and
=gitmoji='s =:​pencil:= symbol is the same as ~emojify~'s =:​pencil2:=.

#+begin_src emacs-lisp
  (setq emojify-user-emojis
        '((":memo:" .
           (("name" . "Memo")
            ("image" .
             "~/.emacs.d/emojis/emojione-v2.2.6-22/1f4dd.png")
            ("style" . "github")))
          (":adhesive_bandage:" .
           (("name" . "Adhesive Bandage")
            ("image" .
             "~/.emacs.d/emojis/user-added/adhesive_bandage.png")
            ("style" . "github")))))
  (when (featurep 'emojify)
    (emojify-set-emoji-data))
#+end_src

*** ~highlight-indent-guides~
[[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]] shows indentation level. I used to do this with a pipe
character, but I think the ='fill= and ='column= options look better now.

#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :straight t
    :hook (prog-mode . highlight-indent-guides-mode)
    :config (progn
              ;; old way of doing it
              ;; (setq highlight-indent-guides-method 'character)
              ;; (setq highlight-indent-guides-character ?\|)
              ;; an alternative
              ;; (setq highlight-indent-guides-method 'column)
              ;; this one looks pretty cool
              (setq highlight-indent-guides-method 'fill)))
#+end_src

*** Auto-indentation on =RET= for various modes
See http://www.emacswiki.org/emacs/AutoIndentation

#+begin_src emacs-lisp
  (defun set-newline-and-indent ()
    (local-set-key (kbd "RET") 'newline-and-indent))
  (add-hook 'html-mode-hook 'set-newline-and-indent)
  (add-hook 'lisp-mode-hook 'set-newline-and-indent)
  (add-hook 'LaTeX-mode-hook 'set-newline-and-indent)
  (add-hook 'c-mode-common-hook 'set-newline-and-indent)
#+end_src

*** TODO Global font lock mode -- move to custom??
This basically enables syntax highlighting by allowing for different faces for
keywords, comments, etc.; see
https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html

#+begin_src emacs-lisp
  (global-font-lock-mode 1)
#+end_src

** Preferred global keybindings
*** Meta key behavior for Mac
See https://www.emacswiki.org/emacs/MetaKeyProblems#h5o-18

#+begin_src emacs-lisp
  (setq mac-option-modifier 'meta)
#+end_src

(Works on M1 Mac Mini (9.1?), although I don't think this was necessary on a
late 2019 MacBook Pro 16".)

*** Iedit: edit multiple occcurrences simultaneously
This has been /such/ an important extension that I don't think I could live
without it. Really can't overstate how useful it is; see
[[https://github.com/victorhge/iedit][iedit | GitHub]]. Per documentation's suggestion, =iedit-mode= is bound to ~C-c ;~.

#+begin_src emacs-lisp
  (use-package iedit
    :straight t
    :bind ("C-c ;" . iedit-mode))
#+end_src

*** Reload =.emacs=
See
http://stackoverflow.com/questions/24810079/key-binding-to-reload-emacs-after-changing-it

#+begin_src emacs-lisp
  (defun reload-dotemacs ()
    (interactive)
    (load-file "~/.emacs"))
  (global-set-key (kbd "C-c <f12>") 'reload-dotemacs)
#+end_src

*** Copy selection without killing
See
http://stackoverflow.com/questions/3158484/emacs-copying-text-without-killing-it
and http://www.emacswiki.org/emacs/KeyboardMacros

#+begin_src emacs-lisp
  (global-set-key (kbd "M-w") 'kill-ring-save)
#+end_src

*** Switch focus to previous window with =C-x p=
This complements ~other-window~, which is bound to =C-x o=.

#+begin_src emacs-lisp
(global-set-key (kbd "C-x p") 'previous-multiframe-window)
#+end_src

*** Count words in region
Documented in old =.emacs= as "~count-words-region~ \to ~count-words~" :shrug:

#+begin_src emacs-lisp
  (global-set-key (kbd "M-=") 'count-words)
  (put 'narrow-to-region 'disabled nil)
#+end_src

** TODO Preferred multi-mode keybindings
*** TODO Fix auto-identation for multiple modes
This is probably no longer the best way to achieve this.

See http://www.emacswiki.org/emacs/AutoIndentation

#+begin_src emacs-lisp
  (defun set-newline-and-indent ()
    (local-set-key (kbd "RET") 'newline-and-indent))
  (add-hook 'html-mode-hook 'set-newline-and-indent)
  (add-hook 'lisp-mode-hook 'set-newline-and-indent)
  (add-hook 'LaTeX-mode-hook 'set-newline-and-indent)
  ;; (add-hook 'css-mode 'set-newline-and-indent)
  (add-hook 'c-mode-common-hook 'set-newline-and-indent)
#+end_src

** TODO Company (COMPlete ANYthing) (\to ~core-langs.org~ or delete)
~corfu~ might cover this now? In any case, I think I was only using this with
Python, so it ought to be moved to ~core-langs.org~.

# #+begin_src emacs-lisp
#   (add-hook 'after-init-hook 'global-company-mode)
#   (global-set-key (kbd "C-c C-<tab>") 'company-complete)
# #+end_src

*** Python: company-jedi

# #+begin_src emacs-lisp
#   (defun python-company-jedi-hook ()
#     (add-to-list 'company-backends 'company-jedi))
#   (add-hook 'python-mode-hook 'python-company-jedi-hook)
# #+end_src

** TODO Flycheck
** TODO Flyspell -- move to custom?
See
http://unix.stackexchange.com/questions/38916/how-do-i-configure-emacs-to-use-ispell-on-mac-os-x

# #+begin_src emacs-lisp
# (setq ispell-program-name "/usr/local/bin/ispell")
# #+end_src

Actually, no?

See
http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html
and
http://emacs-fu.blogspot.com/2009/12/automatically-checking-your-spelling.html
and http://blog.binchen.org/posts/effective-spell-check-in-emacs.html.

Found a very old blog post ([[http://emacs-fu.blogspot.com/2008/12/running-some-external-program-only-if.html][running some external program only if it exists |
Emacs-fu]]) that should allow me to bug myself if I don't have an ispell program
installed.

#+begin_src emacs-lisp
  (setq ispell-program-name "aspell"
        ispell-extra-args '("--sug-mode=ultra"))
  (unless (executable-find ispell-program-name)
    (display-warning
     :warning
     (format "ispell program not found: %s" ispell-program-name)))
#+end_src

** ~git~
~git~ is important enough to include in ~core-config~.

*** ~git-modes~
~git-modes~ allows for syntax highlighting in ~.gitignore~ and ~.gitconfig~
files. See https://github.com/magit/git-modes.

#+begin_src emacs-lisp
  (use-package git-modes
    :straight t)
  (add-to-list 'auto-mode-alist
               (cons "/gitignore" 'gitignore-mode))
  (add-to-list 'auto-mode-alist
               (cons "/gitconfig" 'gitconfig-mode))
#+end_src

*** Magit
[[https://magit.vc][Magit]] is a ~git~ ``porcelain'' essential to my Emacs experience and arguably one
of Emacs's killer apps.

#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :bind ("C-c 0" . magit-status))
  (use-package magit-filenotify
    :straight t)
  ;; (global-set-key (kbd "C-c 0") 'magit-status)
#+end_src

** Completions: ~vertico~ + ~corfu~
I used to use a combination of ~ido~ and ~ivy~, but having seen a ~vertico~ demo, I
thought I'd give it a try. ~ido~ is supposedly a bit outdated now anyway.

*** ~vertico~
Following config taken from
https://systemcrafters.cc/emacs-tips/streamline-completions-with-vertico/ and
lightly edited.

So far I'm loving ~vertico~ + ~savehist~ for ~M-x~ commands! However, it seems like
=ido-everywhere= is still set to =t= by default for some reason. Oh, I have an
idea: I bet it's in =custom.el=! I'm starting to think the smarter/better way to
do most customizations is with =:custom= inside of =(straight-)use-package=
statements. Yep, that was it! Going forward, I'll try to move what I can out of
~custom.el~.

#+begin_src emacs-lisp
  (use-package vertico
    :straight t
    :bind (:map vertico-map
           ("C-f" . vertico-exit)
           :map minibuffer-local-map
           ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  (use-package savehist
    :straight t
    :init
    (savehist-mode))

  (use-package marginalia
    :after vertico
    :straight t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy
                             marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src

*** ~corfu~
``Corfu is the minimalistic ~completion-in-region~ counterpart of the ~vertico~
minibuffer UI.'' -- https://github.com/minad/corfu

#+begin_src emacs-lisp
  (use-package corfu
    :straight t
    :custom
    (corfu-cycle t)                   ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-commit-predicate nil)   ;; Do not commit selected candidates on
    ;;                                ;; next input
    ;; (corfu-quit-at-boundary t)     ;; Automatically quit at word boundary
    ;; (corfu-quit-no-match t)        ;; Automatically quit if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
    ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; You may want to enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since dabbrev can be used globally (M-/).
    :init
    (corfu-global-mode))

  ;; Optionally use the `orderless' completion style. See `+orderless-dispatch'
  ;; in the Consult wiki for an advanced Orderless style dispatcher.
  ;; Enable `partial-completion' for files to allow path expansion.
  ;; You may prefer to use `initials' instead of `partial-completion'.
  (use-package orderless
    :straight t
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides
          '((file (styles . (partial-completion))))))

  ;; Use dabbrev with Corfu!
  (use-package dabbrev
    :straight t
    ;; Swap M-/ and C-M-/
    :bind (("M-/" . dabbrev-completion)
           ("C-M-/" . dabbrev-expand)))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))
#+end_src

** TODO LSP (Language Server Protocol)

# #+begin_src emacs-lisp
#   (require 'lsp-mode)
#   (require 'lsp-ui)
# #+end_src

** TODO TRAMP
*** TODO Fix problem with hanging -- confused about this/move to custom?
#+begin_src emacs-lisp
(eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
#+end_src

Maybe this should be updated to =/usr/local/bin/bash= or I should figure out how
to symlink =/usr/local/bin/bash= to =/bin/bash=; if so, the above
~explicit-shell-file-name~ in ANSI term section should be updated

*** TODO Use SSH -- move to custom?
See
https://www.gnu.org/software/emacs/manual/html_node/tramp/Default-Method.html

#+begin_src emacs-lisp
  (setq tramp-default-method "ssh")
#+end_src

** Direct text handling
*** Enable ~downcase-region~, ~upcase-region~
The latter was hanging out in my Python configuration section for some
reason :shrug:. Later, it appeared to be added to the base =~/.emacs= file.

#+begin_src emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+end_src

*** ~unfill~
``Functions providing the inverse of Emacs' fill-paragraph and fill-region'' --
[[https://github.com/purcell/unfill][unfill | GitHub]]. Provides functions =unfill-region=, =unfill-paragraph=, and
=unfill-toggle=.

#+begin_src emacs-lisp
  (use-package unfill
    :straight t)
#+end_src

** Miscellaneous
*** Disable "Package ~cl~ is deprecated" warning on startup
See https://github.com/kiwanami/emacs-epc/issues/35. Might be a good idea to
investigate this at some point and actually fix it instead of applying a
bandaid.

#+begin_src emacs-lisp
  (setq byte-compile-warnings '(cl-functions))
#+end_src

** TODO Silly stuff
*** Shrug emoticon
#+begin_src emacs-lisp
  (defun shrug-emoticon ()
    "insert ¯\\_(ツ)_/¯ anywhere in your code (preferably comments)"
    (interactive)
    ;; note that the backslash needs to be escaped
    (insert "¯\\_(ツ)_/¯"))
#+end_src

*** Magic 8-ball
Works just like a magic 8-ball with its default configuration. Read the
documentation for customization options.

Note that the prefix, =C-u=, changes the behavior (by adding "[​=<timestamp>=​]
=<question>= =<response>=" to the ~kill ring~).

#+begin_src emacs-lisp
  (straight-use-package
   '(eight-ball
     :type git
     :host github
     :repo "RyanMatlock/eight-ball"))
  (require 'eight-ball)
  (global-set-key (kbd "C-c 8") 'eight-ball)
#+end_src

*** TODO ~fortune~

*** TODO Define ~obnoxious-case-region~
Type a line normally and cOnVeRt It To ThIs. Maybe pass a prefix argument to
shift if it starts uppercase or lowercase?

* TODO Emacs Lisp

** TODO REPL

#+begin_src emacs-lisp
  (use-package elisp-slime-nav)
#+end_src

** Parentheses
*** Paredit
Balance parentheses automatically; see http://www.emacswiki.org/emacs/ParEdit.

#+begin_src emacs-lisp
  (use-package paredit
    :straight t
    :hook ((emacs-lisp-mode . paredit-mode)
           (lisp-mode . paredit-mode)
           (common-lisp-mode . paredit-mode)
           (lisp-interaction-mode . paredit-mode)
           (geiser-repl-mode . paredit-mode)
           (slime-repl-mode . paredit-mode)
           (ielm-mode . paredit-mode)
           (scheme-mode . paredit-mode)))
#+end_src

*** ~rainbow-delimiters~
[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]: useful for more than just Lisp, this mode color codes
parentheses, brackets, and braces by their depth. Saw it (or something like it)
in some screencast, and I need it.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook ((prog-mode . rainbow-delimiters-mode)))
#+end_src

* TODO Org mode
** Keybindings
By default

| key   | binding            | desired behavior    |
|-------+--------------------+---------------------|
| ~TAB~   | =org-cycle=          | =completion-at-point= |
| ~C-c ;~ | =org-toggle-comment= | =iedit-...=           |

| variable              | value |
|-----------------------+-------|
| =org-cycle-emulate-tab= | =t=     |

But I want to bind ~TAB~ to =org-cycle= for headlines and =completion-at-point= for
everything else.

** ~org-tempo~
Enable old-style template blocks, e.g. make ~<s TAB~ create code blocks again;
see https://emacs.stackexchange.com/a/46992.

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** =org-pretty-entities=
[[https://orgmode.org/manual/Special-Symbols.html][org-pretty-entities]] automatically converts appearance of things like ~\​to~ to →
and ~\​alpha~ to α. This can be toggled with ~C-c C-x \~
(=org-toggle-pretty-entities=).

#+begin_src emacs-lisp
  (setq org-pretty-entities t)
#+end_src

* Load additional org configuration files

#+begin_src emacs-lisp
  (when core-config-core-langs-switch
    (progn
      ;; (org-babel-load-file
      ;;  (expand-file-name "~/config/emacs/core-langs.org"))
      (message "Core langs config loaded.")))
  (when core-config-extras-switch
    (progn
      ;; (org-babel-load-file (expand-file-name "~/config/emacs/extras.org"))
      (message "Extras config loaded.")))
#+end_src

* Package graveyard
- [[https://github.com/auto-complete/auto-complete][auto-complete]]
- [[https://github.com/technomancy/better-defaults][better-defaults]]
- [[https://github.com/zk-phi/electric-case][electric-case]]
- [[https://github.com/davidshepherd7/electric-operator][electric-operator]]
- [[https://github.com/xwl/electric-spacing][electric-spacing]] (does the same thing as ~electric-operator~ ?)
- [[https://github.com/remvee/elein][elein]]
- [[https://elpy.readthedocs.io/en/latest/][elpy]] (Emacs Python Develpment Environment) (\to ~core-langs.org~ ?)
- [[https://github.com/ikazuhiro/emoji-display][emoji-display]] (use ~emojify~ instead)
- [[https://github.com/defunkt/gist.el][gist]]
