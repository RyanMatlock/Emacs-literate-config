#+title: Literate Emacs configuration with Org mode
#+subtitle: Core configuration
#+author: Ryan Matlock

* Warnings, issues, and other problems + features to consider
Going to try to keep this relatively up-to-date with current issues with my
configuration. Hopefully I'll empty this section and have everything working
the way I want it at some point---and keep it that way!

** ~*Warnings*~
*** Warning on starting Inferior Python mode

#+begin_example
  Warning (python): Your ‘python-shell-interpreter’ doesn’t seem to support
  readline, yet ‘python-shell-completion-native-enable’ was t and "python3" is
  not part of the ‘python-shell-completion-native-disabled-interpreters’ list.
  Native completions have been disabled locally.  Disable showing Disable logging
#+end_example

** ~*Messages*~

** Other
*** TODO fix formatting issues
**** TODO fix =verbatim= and ~code~ [2/4]
- [ ] =core.config.org=
- [X] =core-langs.org=
- [X] =gui-config.org=
- [ ] =extras.org=

I've been mixing up ==verbatim== and =~code~= this whole time (or at least for
quite awhile) :facepalm:; see
[[https://orgmode.org/manual/Emphasis-and-Monospace.html][Emphasis and Monospace | Org Mode Manual]].


Fix it with

#+begin_example
M-x query-replace-regexp ~\([^~]+\)~ → =\1=
#+end_example

and

#+begin_example
M-x query-replace-regexp =\([^=]+\)= → ~\1~ 
#+end_example

**** TODO fix docstrings to follow conventions
See [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Documentation-Tips.html][Documentation Tips | GNU Emacs Lisp Manual]] and [[https://www.emacswiki.org/emacs/DocString][Doc String | Emacs Wiki]].

*** TODO Org roam + agenda
See [[https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html][Task management with org-roam Vol. 5: Dynamic and fast agenda | Boris
Buliga]] for only adding notes with TODOs to Org agenda

*** OPTIONAL get =smartparens= to behave like =paredit=
Still having trouble with =turn-on-smartparens-strict-mode= for Lisp modes, and
I haven't figured out where to stuff =sp-use-paredit-bindings= (although maybe
that's because it's called interactively? that doesn't seem like it would be a
problem though).

Note: when I manually enable =turn-on-smartparens-strict-mode= and
=sp-use-paredit-bindings=, I've noticed that I've had issues with ~C-u 0 C-k~
not working the way I expect it to. I've found that ~C-k~ is bound to
=sp-kill-hybrid-sexp=, so I need to look into that, although I remember coming
across some comments about some smartparens kill function that annoyed several
people enough to switch back to paredit.

*** TODO study this amazing literate config file
[[https://panadestein.github.io/emacsd/][Panadestein's literate Emacs config]]

*** TODO fix minibuffer character wrap width

*** TODO Save last $n$ ~*Messages*~ buffers
It's helpful to automatically have a log of sorts, kind of like
~.bash_history~. Having this first ensures that it's done when setting up this
configuration on a new machine.

*** TODO packages to look into [0/1]
- [ ] [[https://github.com/emacs-circe/circe][circe | GitHub]]: an IRC client for Emacs (you know you only want this
  because of the [[https://www.goodreads.com/book/show/35959740-circe][Madeline Miller book]])

*** TODO Use =use-package= the right way? (with =straight=??)
See [[https://batsov.com/articles/2025/04/17/using-use-package-the-right-way/][Using use-package the right way | Bozhidar Batsov]]. He includes a lot of
~:defer t~ instances in uses of ~(use-package ...)~ in order to speed up the loading
time of Emacs, and he deprecates the use of ~:config~ and ~:init~.

** Features to add [2/4]
- [X] complete the switch from ~package.el~ to ~straight.el~
  - [X] automatically install missing packages on startup (finding out the hard
        way that migrating this config to a new machine is a PITA)
- [X] get meta key working properly on M1 Mac Mini
- [ ] oBnOxIoUs CaSe (aka alternating case) region command (this may already
  exist, but I'm going to 1) respect other Emacs users enough to assume that it
  doesn't, and 2) try to write it myself because it seems straightforward but
  also good Emacs Lisp practice).
- [ ] [[https://github.com/abo-abo/hydra][hydra]] for fancy keybindings

* Switches for additional configuration
See [[* Load additional org configuration files][code for handling processing of additional config files]] below.

#+begin_src emacs-lisp
  (setq emacs-config-directory (expand-file-name "~/config/emacs/"))
  (setq emacs-config-additional-files-alist
        '(("core-langs.org" . t)
          ("gui-config.org" . t)
          ("extras.org" . t)
          ("experimental.org" . nil)))
#+end_src

* Customize
It seems like the less I use ~customize~ outside of the literate configuration
files, the better because I can always use =(use-package ... :custom ...)= or
=setq= and annotate everything using Org mode. See [[https://emacs.stackexchange.com/questions/102/advantages-of-setting-variables-with-setq-instead-of-custom-el][Advantages of setting
variables with setq instead of custom.el? | emacs.stackexchange]] for a good
(albeit old) discussion of the relative merits of each. +I think this ought to
be loaded after everything else so customization override anything hard coded
into these config files.+ Moving this file led to weirdness/ugliness, so I'll
have to dig through the configuration. Bleh.

+There are probably a number of settings you can/should move into this,
although I'm curious how much of a pressing need there is given that with a
literate =.emacs= config, I can explain my reasoning for a setting.+

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" emacs-config-directory))
  (load custom-file)
#+end_src

While ~custom.el~ isn't literate, which is kind of a bummer, it does seem like it
can elegantly ensure that certain setting are confined to one location. Maybe
it's a good idea to move as many settings as possible out over time, and then
leave things like =custom-set-faces=. As it stands, ~custom.el~ is only 149 lines
long, which isn't too bad, and it looks like it could be shrunk further.

#+begin_example
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(org-level-1 ((t (:inherit default :foreground "#cb4b16" :weight bold))))
   '(org-level-2 ((t (:inherit default :foreground "#859900" :weight semi-bold))))
   '(org-level-3 ((t (:inherit default :foreground "#268bd2" :weight semi-bold)))))
#+end_example

* General interface & minor modes
** ~so-long~ -- say goodbye to poor performance with minified files
From [[https://elpa.gnu.org/packages/so-long.html][so-long | GNU ELPA]]:

#+begin_quote
When the lines in a file are so long that performance could suffer to an
unacceptable degree, we say "so long" to the slow modes and options enabled in
that buffer, and invoke something much more basic in their place.
#+end_quote

#+begin_src emacs-lisp
  (use-package so-long
    :straight nil
    :hook
    (after-init-hook . global-so-long-mode))
#+end_src

** Startup behavior
*** ~*scratch*~ behavior
#+begin_src emacs-lisp
  (setq initial-major-mode 'text-mode)
  (setq initial-scratch-message nil)
#+end_src

*** Turn off welcome screen
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

** Cleaner directories (make Emacs produce less clutter)
See [[https://youtu.be/XZjyJG-sFZI][Teach Emacs to Keep Your Folders Clean | System Crafters | YouTube]] ([[https://github.com/daviwil/emacs-from-scratch/blob/master/show-notes/Emacs-Tips-Cleaning.org][show
notes]])

#+begin_src emacs-lisp
  (setq emacs-temp-directory (expand-file-name "~/.emacs-tmp/"))

  (defun make-emacs-temp-subdirectories ()
      "Create subdirectories in 'emacs-temp-directory'."
    (seq-do #'(lambda (dir)
                (make-directory (expand-file-name dir emacs-temp-directory) t))
            '("backups/" "auto-saves/sessions/")))

  (make-emacs-temp-subdirectories)

  (setq backup-directory-alist
        (list (cons "." (expand-file-name "backups/" emacs-temp-directory))))

  (setq auto-save-list-file-prefix
        (expand-file-name "auto-saves/sessions/" emacs-temp-directory)
        auto-save-file-name-transforms
        `((".*" ,(expand-file-name "auto-saves/" emacs-temp-directory) t)))

  (defun clean-emacs-temp-files ()
    "Delete temporary files in 'emacs-temp-directory'."
    (interactive)
    (when (yes-or-no-p
           (format "Do you really want to delete everything in '%s'? "
                   emacs-temp-directory))
      (delete-directory emacs-temp-directory t)
      (message "Temporary files deleted.")
      (make-emacs-temp-subdirectories)))
#+end_src

#+begin_quote
Aside: I just learned about the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html][backquote | GNU Emacs Manual]] in Emacs
Lisp---very cool!
#+end_quote

As referenced at the bottom of the show notes, [[https://github.com/emacscollective/no-littering][no-littering]] looks like a good
option to keep Emacs cleaner.

** ~concat-path~
Don't concatenate paths using ~concat~---instead use ~concat-path~; stolen from
[[https://www.reddit.com/r/emacs/comments/umb24/comment/c4wolk8/?utm_source=share&utm_medium=web2x&context=3][​~expand-file-name~ is good for path concat too | /r/emacs]].

#+begin_src emacs-lisp
  (require 'cl-lib)

  (defun concat-path (&rest path-components)
    "Use `expand-file-name' to concatenate PATH-COMPONENTS into a properly
  formatted path string, e.g. `(concat-path \"/path\" \"to\" file.ext\")' returns
  \"/path/to/file.ext\".

  Stolen from user skeeto on Reddit; see
  https://www.reddit.com/r/emacs/comments/umb24/comment/c4wolk8/"
    (cl-reduce #'(lambda (a b) (expand-file-name b a)) path-components))
#+end_src

** TODO General look & feel
*** TODO Tab/space handling -- improve this
Tip: ~M-x~ [[http://pragmaticemacs.com/emacs/convert-tabs-to-spaces/][untabify]] works on a region, ~C-u M-x untabify~ works on a whole
buffer. Maybe make a function, =safe-untabify-buffer=, that warns if you attempt
to =untabify= in a mode that requires tabs?

+Use spaces instead of tabs (generally); provide function to ``untabify''
buffer, see [[http://stackoverflow.com/questions/24832699/emacs-24-untabify-on-save-for-everything-except-makefiles/24857101#24857101][Emacs 24: untabify on save for everything *except* makefiles |
stackoverflow]]. Note: don't use on makefiles, which *require* tabs instead of
spaces.+

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  ;; (defvar tabbed-mode-list
  ;;   '('makefile-mode)
  ;;   "docstring")
  ;; (defun untabify-buffer ()
  ;;   (unless (derived-mode-p 'makefile-mode)
  ;;     (untabify (point-min) (point-max))))
#+end_src

I used to run =untabify-except-makefiles= on every save, but that's really not
necessary, so I'm going to remove that feature.

#+begin_src emacs-lisp :eval no
  (defun untabify-except-makefiles ()
    (unless (derived-mode-p 'makefile-mode)
      (untabify (point-min) (point-max))))
  (add-hook 'before-save-hook 'untabify-except-makefiles)
#+end_src

*** Auto-indentation on =RET= for various modes
See http://www.emacswiki.org/emacs/AutoIndentation

#+begin_src emacs-lisp
  (defun set-newline-and-indent ()
    (local-set-key (kbd "RET") 'newline-and-indent))
  (add-hook 'html-mode-hook 'set-newline-and-indent)
  (add-hook 'lisp-mode-hook 'set-newline-and-indent)
  (add-hook 'LaTeX-mode-hook 'set-newline-and-indent)
  (add-hook 'c-mode-common-hook 'set-newline-and-indent)
#+end_src

*** ~treemacs~
[[https://github.com/Alexander-Miller/treemacs][treemacs | GitHub]]: a tree layout file explorer (like you see in other
editors/IDEs)

#+begin_src emacs-lisp
  (use-package treemacs
    :straight t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            ;; treemacs-width                           35
            treemacs-width                           gui-treemacs-frame-width
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      ;; I was getting the following error:
      ;; Symbol’s function definition is void: treemacs-git-commit-diff-mode
      ;; (when treemacs-python-executable
      ;;   (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  ;; (use-package treemacs-evil
  ;;   :after (treemacs evil)
  ;;   :straight t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :straight t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :straight t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :straight t)

  ;; (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  ;;   :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  ;;   :straight t
  ;;   :config (treemacs-set-scope-type 'Perspectives))

  ;; (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  ;;   :after (treemacs)
  ;;   :straight t
  ;;   :config (treemacs-set-scope-type 'Tabs))
#+end_src

*** ~column-number-mode~ / ~display-line-numbers-mode~
See [[https://www.gnu.org/software/emacs/manual/html_node/efaq/Displaying-the-current-line-or-column.html][column-number-mode | GNU Emacs Manual]]

[[https://www.emacswiki.org/emacs/LineNumbers#h5o-1][Line Numbers § The Easy Way | Emacs Wiki]] enable this?? I don't think so.

#+begin_src emacs-lisp
  (setq column-number-mode t)
#+end_src

** TODO read ~.bashrc~ & use bash as default ANSI term
Bear in mind that on your MacBook Pro, ~bash~ (the Homebrew version you use) is
located at ~/usr/local/bin/bash~, but your M1 Mac Mini, it's located at
~/opt/homebrew/bin/bash~, so maybe that's an issue? Probably helpful to know
which sort of device you're on.

[[https://osxdaily.com/2011/07/15/get-cpu-info-via-command-line-in-mac-os-x/][Get CPU Info via Command Line in Mac OS X | OSXDaily]]

#+begin_src bash :eval no
  $ sysctl -n machdep.cpu.brand_string
  Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz
#+end_src

[[https://emacs.stackexchange.com/questions/14858/how-to-check-in-elisp-if-a-string-is-a-substring-of-another-string][How to check in elisp if a string is a substring of another string? |
emacs.stackexchange]]

#+begin_src emacs-lisp :eval no
  (string-match-p (regexp-quote "Intel")
                  "Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz")
#+end_src

Alternately, you may simply want to check for the existence of one or the other
binaries, and then settle on ~/bin/bash~ if neither exists ¯\_(ツ)_/¯

[[https://stackoverflow.com/a/37523213][How to define a default shell for emacs | stackoverflow]]

Looking through [[http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs/][What's the best spell check setup in emacs]], I came across the
function =executable-find=, so that might be better than =file-exists-p=; on
the other hand, maybe explicitly calling out the path is what I want. On the
third hand (or back to the first hand), basically any machine I'm on is going
to have ~bash~, so maybe it's better to go with whatever the =PATH= variable
thinks I ought to use.

#+begin_example
  ELISP> (executable-find "bash")
  "/usr/local/bin/bash"
  ELISP> (executable-find "fake-foobar")
  nil
#+end_example

It works how you'd want it to for the latter case.

#+begin_src emacs-lisp
  (defvar preferred-shells
    '("bash"
      "sh")
    "List of shells from most to least preferred.")

  (let* ((found-shells (mapcar #'executable-find preferred-shells))
         (preferred-shell (car-safe found-shells)))
    (cond (preferred-shell
           (progn
             (setq-default shell-file-name preferred-shell)
             (message (format "Using shell %s" preferred-shell))))
          (t (error
              (format "No valid shell found among %s." preferred-shells)))))
#+end_src

When I finally decide to join the modern era and use zsh or fish, it will be
easy to =cons= onto =shell-paths-alist=.

** Preferred =global-map= keybindings
*** Unbind keys
- ~C-z~ previously bound to =suspend-frame=; still bound to ~C-x C-z~.
- ~s-t~ previously bound to ~ns-popup-font-panel~.

#+begin_src emacs-lisp
  (let ((keys-to-unbind '("C-z"
                          "s-t")))
    (seq-do #'(lambda (key) (define-key global-map (kbd key) nil))
            keys-to-unbind))
#+end_src

*** TODO ~C-x 5 0~  (or ~s-w~?) minimizes other frame with prefix argument
~C-x 5 0~ currently bound to =delete-frame=.

#+begin_src emacs-lisp
  (defun delete-frame-and-minimize-other-with-prefix (&optional minimizep)
    (interactive "P")
    (delete-frame)
    (when minimizep
      ;; (sit-for 0.5)
      (suspend-frame)))

  ;; (define-key global-map (kbd "C-x 5 0") delete-frame-and-minimize-with-prefix)

  ;; (define-key global-map (kbd "s-w") nil)
  ;; (define-key global-map (kbd "s-w") delete-frame-and-minimize-with-prefix)
#+end_src

+This isn't working at all.+

*** Disable mouse clicks
See [[http://stackoverflow.com/questions/4906534/disable-mouse-clicks-in-emacs][Disable mouse clicks in Emacs | stackoverflow]]

Old way:

#+begin_example
  (dolist (k '([mouse-1] [down-mouse-1] [drag-mouse-1] [double-mouse-1]
                 [triple-mouse-1] [mouse-2] [down-mouse-2] [drag-mouse-2]
                 [double-mouse-2] [triple-mouse-2] [mouse-3] [down-mouse-3]
                 [drag-mouse-3] [double-mouse-3] [triple-mouse-3] [mouse-4]
                 [down-mouse-4] [drag-mouse-4] [double-mouse-4]
                 [triple-mouse-4] [mouse-5] [down-mouse-5] [drag-mouse-5]
                 [double-mouse-5] [triple-mouse-5]))
      (global-unset-key k))
#+end_example

Idea:

#+begin_example
  ELISP> (mapcar #'make-symbol (mapcar #'(lambda (action) (format "[%s-1]" action)) '("mouse" "down-mouse")))
  (\[mouse-1\] \[down-mouse-1\])
#+end_example

#+begin_example
  ELISP> (equal [mouse-1] (make-symbol "[mouse-1]"))
  nil
#+end_example

Bummer.

See [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Mouse-Buttons.html][Mouse Buttons | GNU Emacs Manual]] and [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Vectors.html][Vectors | GNU Emacs Lisp Reference]].

Wait, we're good:

#+begin_example
  ELISP> (type-of (make-symbol "[mouse-1]"))
  symbol
  ELISP> (type-of [mouse-1])
  vector
  ELISP> (vector (make-symbol "mouse-1"))
  [mouse-1]
  ELISP> (eq [mouse-1] (vector (make-symbol "mouse-1")))
  nil
  ELISP> (equal [mouse-1] (vector (make-symbol "mouse-1")))
  nil
#+end_example

Or not. :\ Let's try it anyway.

New way:

#+begin_src emacs-lisp
  (let* ((mouse-buttons (number-sequence 1 5))
         (mouse-actions '("mouse"
                          "down-mouse"
                          "drag-mouse"
                          "double-mouse"
                          "triple-mouse"))
         (mouse-clicks
          (apply #'append
                 (mapcar
                  #'(lambda (n)
                      (mapcar
                       #'(lambda (action)
                           (vector (make-symbol (format "%s-%d" action n))))
                       mouse-actions))
                  mouse-buttons))))
    (seq-do #'(lambda (key) (define-key global-map key nil)) mouse-clicks))
#+end_src

It seems to work!

*** Meta key behavior for Mac
See https://www.emacswiki.org/emacs/MetaKeyProblems#h5o-18

#+begin_src emacs-lisp
  (setq mac-option-modifier 'meta)
#+end_src

(Works on M1 Mac Mini (9.1?), although I don't think this was necessary on a
late 2019 MacBook Pro 16".)

*** Iedit: edit multiple occcurrences simultaneously
This has been /such/ an important extension that I don't think I could live
without it. Really can't overstate how useful it is; see
[[https://github.com/victorhge/iedit][iedit | GitHub]]. Per documentation's suggestion, =iedit-mode= is bound to ~C-c ;~.

#+begin_src emacs-lisp
  (use-package iedit
    :straight t
    :bind ("C-c ;" . iedit-mode))
#+end_src

Here's something I just noticed in the documentation: "With digit prefix
argument 0, only occurrences in current function are matched."

*** Reload =.emacs=
See [[http://stackoverflow.com/questions/24810079/key-binding-to-reload-emacs-after-changing-it][Key binding to reload .emacs after changing it? | stackoverflow]]

#+begin_src emacs-lisp
  (defun reload-dotemacs ()
    (interactive)
    (load-file "~/.emacs"))
  (define-key global-map (kbd "C-c <f12>") 'reload-dotemacs)
#+end_src

*** Copy selection without killing
See
http://stackoverflow.com/questions/3158484/emacs-copying-text-without-killing-it
and http://www.emacswiki.org/emacs/KeyboardMacros

#+begin_src emacs-lisp
  (global-set-key (kbd "M-w") 'kill-ring-save)
#+end_src

*** Switch focus to previous window with =C-x p=
This complements ~other-window~, which is bound to =C-x o=.

#+begin_src emacs-lisp
(global-set-key (kbd "C-x p") 'previous-multiframe-window)
#+end_src

*** Count words in region
Documented in old =.emacs= as "~count-words-region~ \to ~count-words~" :shrug:

#+begin_src emacs-lisp
  (global-set-key (kbd "M-=") 'count-words)
  (put 'narrow-to-region 'disabled nil)
#+end_src

** TODO Preferred multi-mode keybindings
*** TODO COMMENT ~<TAB>~ completion in ~prog-mode~ (=completion-at-point=?)
Bind =completion-at-point= to ~M-<tab>~ in ~prog-mode~.

#+begin_src emacs-lisp
  (define-key prog-mode-map (kbd "C-<tab>") completion-at-point)
#+end_src

=completion-at-point= is void??

*** TODO Fix auto-identation for multiple modes
This is probably no longer the best way to achieve this.

See http://www.emacswiki.org/emacs/AutoIndentation

#+begin_src emacs-lisp
  (defun set-newline-and-indent ()
    (local-set-key (kbd "RET") 'newline-and-indent))
  (add-hook 'html-mode-hook 'set-newline-and-indent)
  (add-hook 'lisp-mode-hook 'set-newline-and-indent)
  (add-hook 'LaTeX-mode-hook 'set-newline-and-indent)
  ;; (add-hook 'css-mode 'set-newline-and-indent)
  (add-hook 'c-mode-common-hook 'set-newline-and-indent)
#+end_src

** TODO Flycheck
** TODO ~ispell~ with ~aspell~
Still need to sync ~aspell~ dictionaries across computers!

See
http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html
and
http://emacs-fu.blogspot.com/2009/12/automatically-checking-your-spelling.html
and http://blog.binchen.org/posts/effective-spell-check-in-emacs.html.

Found a very old blog post ([[http://emacs-fu.blogspot.com/2008/12/running-some-external-program-only-if.html][running some external program only if it exists |
Emacs-fu]]) that should allow me to bug myself if I don't have an ispell program
installed.

see [[https://emacs.stackexchange.com/questions/450/intelligent-spell-checking-in-org-mode][Intelligent spell-checking in org-mode | emacs.stackexchange]]

#+begin_src emacs-lisp
  (setq ispell-program-name "aspell"
        ispell-extra-args '("--sug-mode=ultra"))
  (unless (executable-find ispell-program-name)
    (display-warning
     :warning
     (format "ispell program not found: %s" ispell-program-name)))
#+end_src

** ~git~
~git~ is important enough to include in ~core-config~.

*** ~git-modes~
~git-modes~ allows for syntax highlighting in ~.gitignore~ and ~.gitconfig~
files. See https://github.com/magit/git-modes.

#+begin_src emacs-lisp
  (use-package git-modes
    :straight t)
  (add-to-list 'auto-mode-alist
               (cons "/gitignore" 'gitignore-mode))
  (add-to-list 'auto-mode-alist
               (cons "/gitconfig" 'gitconfig-mode))
#+end_src

*** DONE Magit
[[https://magit.vc][Magit]] is a ~git~ ``porcelain'' essential to my Emacs experience and arguably one
of Emacs's killer apps.

For Emacs 29.3; see [[https://www.reddit.com/r/emacs/comments/174frnc/comment/kg4m0sb/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button][Psionikus's solution | Magit hiccup : transient-setup:
Suffix | /r/emacs]]

#+begin_src emacs-lisp
  ;; (use-package magit
  ;;   :straight t
  ;;   :bind ("C-c 0" . magit-status))

  ;; use this form for Emacs 29.3
  (use-package transient
    :straight (transient
               :type git
               :host github
               :repo "magit/transient"
               :version 0.4.1))
  (use-package magit
    :straight (magit
               :type git
               :host github
               :repo "magit/magit"
               :version 3.2.1)
    :bind ("C-c 0" . magit-status))
  (use-package magit-filenotify
    :straight t)
  ;; (global-set-key (kbd "C-c 0") 'magit-status)
#+end_src

** Completions
I used to use a combination of ~ido~ and ~ivy~, but now I'm mostly using ~vertico~
with the option to use ~ido~.

*** ~vertico~
Following config taken from [[https://systemcrafters.cc/emacs-tips/streamline-completions-with-vertico/][Streamline Your Emacs Completions with Vertico |
System Crafters]] and lightly edited.

~vertico~ + ~savehist~ are great for ~M-x~ commands!

~vertico-directory~ provides for "Ido-like directory navigation," which sounds
nice to have again; configuration taken from [[https://github.com/minad/vertico#extensions][vertico | Extensions]].

#+begin_src emacs-lisp
  (use-package vertico
    :straight (vertico :includes vertico-directory
                       :files (:defaults "extensions/vertico-directory.el"))
    :bind (:map vertico-map
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  (use-package vertico-directory
    :after vertico
    ;; :load-path "straight/build/vertico/extensions"
    :straight nil
    :ensure nil
    ;; More convenient directory navigation commands
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

  (use-package savehist
    :straight t
    :init
    (savehist-mode))

  ;; (use-package marginalia
  ;;   :after vertico
  ;;   :straight t
  ;;   :custom
  ;;   (marginalia-annotators '(marginalia-annotators-heavy
  ;;                            marginalia-annotators-light nil))
  ;;   :init
  ;;   (marginalia-mode))
#+end_src

See [[https://github.com/radian-software/straight.el/issues/819#issuecomment-882039946][Can not find vertico-directory package #819 | GitHub]] for ~vertico-directory~
info. Also, I don't know if it's even working, but it doesn't feel Ido-like,
but maybe that's the lack of ~flx-ido~ ¯\_(ツ)_/¯

*** ~corfu~ & friends
Turns out ~corfu~ was giving me those nice little drop-down menus, so I actually
need it.

From the developer behind ~vertico~, there's [[https://github.com/minad/corfu][corfu | GitHub]] (popup completions)
and [[https://github.com/minad/cape][cape | GitHub]] (=completion-at-point-fuctions= aka Capfs extensions). See also
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dynamic-Abbrevs.html][Dynamic Abbrev Expansion (dabbrev) | GNU Emacs Manual]].

**** ~corfu~ config

#+begin_src emacs-lisp
  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-auto t)                 ;; Enable auto completion

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-exclude-modes'.
    :init
    (global-corfu-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))
#+end_src

**** ~orderless~ config

#+begin_src emacs-lisp
  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides
          '((file (styles . (partial-completion))))))
#+end_src

**** ~dabbrev~ config

#+begin_src emacs-lisp
  ;; Use Dabbrev with Corfu!
  (use-package dabbrev
    ;; Swap M-/ and C-M-/
    :bind (("M-/" . dabbrev-completion)
           ("C-M-/" . dabbrev-expand))
    ;; Other useful Dabbrev configurations.
    :custom
    (dabbrev-ignored-buffer-regexps
     '("\\.\\(?:pdf\\|jpe?g\\|png\\|heic\\)\\'")))
#+end_src

**** ~cape~ config

#+begin_src emacs-lisp
  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-symbol)
           ("C-c p a" . cape-abbrev)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    ;; NOTE: The order matters!
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
  )
#+end_src

*** ~ido~ + ~flx~: the =find-file= behavior I've missed
I saw that I had [[https://github.com/lewang/flx][flx]] and ~flx-ido~ in the commented-out =custom-set-variables=
block of ~legacy-dotemacs.el~, so maybe that's how I got the file completion I
miss so much.

See [[http://xahlee.info/emacs/emacs/emacs_ido_setup.html][Ido Mode Setup | Xah Lee]] for vertical display and [[https://masteringemacs.org/article/introduction-to-ido-mode][Introduction to Ido
Mode | Mastering Emacs]] for info on =ido-file-extensions-order=.

#+begin_src emacs-lisp
  (use-package ido
    :straight t
    :config
    ;; (ido-mode 1)
    ;; (ido-everywhere 1)
    (setf (nth 2 ido-decorations) "\n")
    (setq ido-file-extensions-order '(".org"
                                      ".el"
                                      ".py"
                                      ".tex"
                                      ".yaml"
                                      ".js"
                                      ".md"
                                      ".txt"))
    :bind
    (:map global-map
          ("C-c 2" . ido-mode)))

  (use-package flx-ido
    :straight t
    :config
    (flx-ido-mode 1)
    (setq ido-enable-flex-matching t)
    (setq ido-use-faces nil))
#+end_src

Ok, this actually gives me the recent file matching I remember, and +C-x C-f C-x
C-f+ ~C-x C-f C-f~ (although ~C-x C-f C-x C-f~ works too) brings up ~vertico~
matching, so maybe there's some nice way of merging the two. Actually, with the
vertical display, maybe I don't even need to do that.

Now that I'm playing around with it a little, I see that I can use
~vertico~-style commands to navigate through the options, i.e. ~C-n~ and ~C-p~ don't
let me scroll through the options once I've narrowed them.

New decision: ~C-c 2~ is globally bound to =ido-mode=, which is off by default. The
main issue is that while ~ido~ is nice for opening buffers, I find it more
annoying than ~vertico~ for switching between buffers, which is something I do
more frequently.

** TODO Project handling: ~projectile~
[[https://github.com/bbatsov/projectile][projectile]]: per [[https://youtu.be/bFS0V_4YfhY][Lukewh's short projectile introduction | YouTube]], it's useful
simply for navigating between and within projects, as defined by the presence
of a ~.git~ folder or something similar.

#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :config
    (projectile-mode +1)
    ;; recommended MacOS keybinding
    ;; (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    ;; (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-x p") 'projectile-commander))
#+end_src

Issue (tangential): tried using recommended ~s-p~ keybinding, and it appears that
~⌘~ + ~p~ is read as ~M-p~. I think ~⌘~ should be the super key, ~s-~, but maybe I'm
wrong?

Issue 2: =projectile-command-map= doesn't seem to be the right function to
invoke. ~M-x projectile-commander~ seems to work, so try binding that? Yep, that
seems to do the trick. Now I just need to remember what the commands do.

** TODO TRAMP
*** TODO COMMENT Fix problem with hanging
#+begin_src emacs-lisp
(eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
#+end_src

I haven't used TRAMP in a bit, so I have no idea if this is still an issue. It
may be that this is the =$SHELL= value on the client device, in which case it
seems like a good idea.

*** Use SSH
See [[https://www.gnu.org/software/emacs/manual/html_node/tramp/Default-Method.html][Selecting a Default Method | Configuring TRAMP | TRAMP User Manual]]

#+begin_src emacs-lisp
  (setq tramp-default-method "ssh")
#+end_src

** Direct text handling
*** Enable ~downcase-region~, ~upcase-region~
The latter was hanging out in my Python configuration section for some
reason :shrug:. Later, it appeared to be added to the base =~/.emacs= file.

#+begin_src emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+end_src

*** ~unfill~
``Functions providing the inverse of Emacs' fill-paragraph and fill-region'' --
[[https://github.com/purcell/unfill][unfill | GitHub]]. Provides functions =unfill-region=, =unfill-paragraph=, and
=unfill-toggle=.

#+begin_src emacs-lisp
  (use-package unfill
    :straight t)
#+end_src

** Miscellaneous
*** Disable "Package ~cl~ is deprecated" warning on startup
See https://github.com/kiwanami/emacs-epc/issues/35. Might be a good idea to
investigate this at some point and actually fix it instead of applying a
bandaid.

#+begin_src emacs-lisp
  (setq byte-compile-warnings '(cl-functions))
#+end_src

*** ~beacon~
[[https://github.com/Malabarba/beacon][beacon]] highlights the cursor when scrolling. Seems helpful!

#+begin_src emacs-lisp
  (use-package beacon
    :straight t
    :config
    (beacon-mode 1))
#+end_src

*** Insert date when creating new file
This seems like a quality of life upgrade that I should've thought to do ages
ago.

[[https://www.reddit.com/r/emacs/comments/ju0alh/comment/gc8v6o7/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button][/r/emacs]] has a helpful tip for enabling recursive minibuffers in order to make
this possible.

#+begin_src emacs-lisp
  (setq enable-recursive-minibuffers t)

  (defun insert-iso-8601-date ()
    "Insert ISO 8601 date at point."
    (interactive)
    (let* ((now (decode-time))
           (year (decoded-time-year now))
           (month (decoded-time-month now))
           (day (decoded-time-day now))
           (today-iso-8601 (format "%i-%02i-%02i" year month day)))
      (insert today-iso-8601)))

  (global-set-key (kbd "C-c d") 'insert-iso-8601-date)
#+end_src

** TODO Silly stuff
*** Shrug emoticon
#+begin_src emacs-lisp
  (defun shrug-emoticon ()
    "insert ¯\\_(ツ)_/¯ anywhere in your code (preferably comments)"
    (interactive)
    ;; note that the backslash needs to be escaped
    (insert "¯\\_(ツ)_/¯"))
#+end_src

*** Magic 8-ball
Works just like a magic 8-ball with its default configuration. Read the
documentation for customization options.

Note that the prefix, =C-u=, changes the behavior (by adding "[​=<timestamp>=​]
=<question>= =<response>=" to the ~kill ring~).

#+begin_src emacs-lisp
  (straight-use-package
   '(eight-ball
     :type git
     :host github
     :repo "RyanMatlock/eight-ball"))
  (require 'eight-ball)
  (global-set-key (kbd "C-c 8") 'eight-ball)
#+end_src

*** TODO ~fortune~

*** TODO Define ~obnoxious-case-region~
Type a line normally and cOnVeRt It To ThIs. Maybe pass a prefix argument to
shift if it starts uppercase or lowercase?

* TODO Emacs Lisp
** REPL

#+begin_src emacs-lisp
  (use-package elisp-slime-nav)
#+end_src

Update: These days I'm using [[https://www.emacswiki.org/emacs/InferiorEmacsLispMode][IELM]] (Inferior Emacs Lisp Mode), which works
really well. Not sure that ~elisp-slime-nav~ is useful, but I'll keep this here
for now.

*** Eldoc hints
See [[https://www.n16f.net/blog/making-ielm-more-comfortable/][Making IELM More Comfortable | Nicolas Martyanoff — Brain dump]] (nice
because it's recent---dated [2023-04-08 Sat])

Eldoc mode gives you hints in the minibuffer.

#+begin_src emacs-lisp
  (add-hook 'ielm-mode-hook 'eldoc-mode)
#+end_src

*** IELM keybindings

#+begin_src emacs-lisp
  (with-eval-after-load 'ielm
    (progn
      (define-key ielm-map (kbd "C-c M-<return>") 'ielm-return-for-effect)
      (define-key ielm-map (kbd "M-<return>") 'ielm-return)
      (define-key ielm-map (kbd "<return>") 'newline)
      (when 'paredit-mode
        (message "paredit-mode is available"
                 (define-key ielm-map (kbd "C-c <tab>") 'ielm-return)))))
#+end_src

tl;dr:
- While working on Exercism's Emacs Lisp track and using IELM to experiment, I
  was using ~M-x ielm-return~ to evaluate expressions, which was a little
  tedious but not /terrible/ given how I have my =execute-extended-command=
  (i.e. ~M-x~) history set up
- Paredit mode had =paredit-RET= bound to ~M-<return>~, and according to [[https://stackoverflow.com/a/16614083][Why
  can't I change paredit keybindings | stackoverflow]], paredit mode doesn't play
  nicely with the user trying to rebind keys ([[https://github.com/Fuco1/smartparens][smartparens]] is supposedly better
  in that regard)
- I want =<return>= to insert a newline, =M-<return>= to evaluate an
  s-expression, and =C-c M-<return>= to evaluate an sexp for side
  effects/without printing the result
- =ielm-map= is an alias to =inferior-emacs-lisp-mode-map= (per
  https://github.com/eXLabT/emacs-lisp/blob/master/ielm.elc)
- =with-eval-after-load= works, =eval-after-load= doesn't, and I don't really
  understand why at the moment.
- [[https://stackoverflow.com/a/15869858][Bind command to C-RET in Emacs | stackoverflow]] has great advice for how to
  format =kbd='s argument: ~C-h k~ the key combination you want to use and see
  what Emacs calls it combination, e.g. ~C-h k C-RET~ gives ~C-<return>~, so
  you can use =(kbd "C-<return>")= when you want to bind a command to ~C-RET~.

#+begin_quote
Good to know: ~C-c M-o~ is bound to =comint-clear-buffer=, and ~C-c C-l~ is
bound to =comint-dynamic-list-input-ring=, which is basically the history of
the input.
#+end_quote

** Completion: use =ielm-auto-complete=
See [[https://emacs.stackexchange.com/a/30783][Emacs - elisp code autocompletion in emacs-lisp-mode | emacs.stackexchange]]

#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'ielm-auto-complete)
#+end_src

** Parentheses
*** TODO +ParEdit+ +smartparens+ ParEdit
**** Basic config
Balance parentheses automatically; see [[http://www.emacswiki.org/emacs/ParEdit][ParEdit | EmacsWiki]].

#+begin_src emacs-lisp
  (use-package paredit
    :straight t
    :hook ((emacs-lisp-mode . paredit-mode)
           ;; (eshell-mode . paredit-mode) ;; shadows <RET>
           (lisp-mode . paredit-mode)
           (common-lisp-mode . paredit-mode)
           (lisp-interaction-mode . paredit-mode)
           (geiser-repl-mode . paredit-mode)
           (slime-repl-mode . paredit-mode)
           (ielm-mode . paredit-mode)
           (lisp-data-mode . paredit-mode)
           (scheme-mode . paredit-mode)))
#+end_src

Per [[https://stackoverflow.com/a/16614083][Why can't I change paredit keybindings]] (which is almost 10 years old at the
time of visiting this), I should use [[https://github.com/Fuco1/smartparens][smartparens]] instead of paredit because of
the convoluted way paredit handles keybindings (no wonder you've been having so
much trouble!).

**** COMMENT smartparens

#+begin_src emacs-lisp
  (use-package smartparens
    :straight t
    ;; :hook ((emacs-lisp-mode . 'turn-on-smartparens-strict-mode)
    ;;        (lisp-mode . 'turn-on-smartparens-strict-mode)
    ;;        (comint-mode . 'turn-on-smartparens-strict-mode))
    :config
    (require 'smartparens-config)
    ;; (sp-with-modes sp--lisp-modes
    ;;   (turn-on-smartparens-strict-mode)
    ;;   (sp-use-paredit-bindings))
    )

  ;; (sp-with-modes sp--lisp-modes
  ;;   'turn-on-smartparens-strict-mode)

  ;; (let ((barf-slurp ((format "C-S-%s")))))
  ;; (define-key smartparens-mode-map (kbd "C-S-right") 'sp-forward-slurp-sexp)
  ;; (define-key smartparens-mode-map (kbd "C-S-left"))

  ;; sp-use-paredit-bindings
#+end_src

**** Issues

#+begin_example
  Error (use-package): smartparens/:config: Invalid function: (require
  'smartparens-config) Disable showing Disable logging
  Error (use-package): smartparens/:config: Wrong number of arguments: (0 . 0), 1
  Disable showing Disable logging
#+end_example

That issue seemed to come up when I had

# #+begin_src emacs-lisp :eval no
#   :config
#   (require 'smartparens-config)
#   (sp-with-modes sp--lisp-modes
#     (turn-on-smartparens-strict-mode)
#     (sp-use-paredit-bindings))

#   ;; or

#   :config (progn
#             (require 'smartparens-config)
#             (sp-with-modes sp--lisp-modes
#               (turn-on-smartparens-strict-mode)
#               (sp-use-paredit-bindings)))
# #+end_src

#+begin_example
  Warning (defvaralias): Overwriting value of ‘inferior-emacs-lisp-mode-hook’ by
  aliasing to ‘ielm-mode-hook’ Disable showing Disable logging
#+end_example

This might be an issue.

Per [[https://github.com/NicolasPetton/emacs/blob/b176d169347925d57ca63ab63b85d92e49a53c81/lisp/ielm.el#L64][https://github.com/NicolasPetton/emacs/blob/master/lisp/ielm.el#L64]], you
could use =comint-mode-hook= and =comint-mode-map= instead of the IELM
equivalents.

I like that this doesn't have such a pesky way of handling keybindings, +but I
need to ensure that single quotes aren't added in pairs in Lisp modes,+ and I
need to enable it by default in those modes. That said, paredit seems more
assertive in preventing unbalanced parentheses, so I might need to do more
tweaking. It looks like I need to update the keybindings so slurp and barf
behave like paredit mode.

It looks like part of the smartparens documentation covers [[https://github.com/Fuco1/smartparens/wiki/Paredit-and-smartparens][paredit and
smartparens]].

Here's what I want
- [ ] enable =sp-use-paredit-bindings= in Lisp modes and possibly globally (at
  least for now; perhaps at some point I'll want to update that) ---
  =smartparens-strict-mode= actually seems to handle slurping and barfing th
  way I'm used to

**** COMMENT Stolen from [[https://github.com/Fuco1/.emacs.d/blob/master/files/smartparens.el][author's config]]

#+begin_src emacs-lisp
  (sp-with-modes 'org-mode
    (sp-local-pair "=" "=" :wrap "C-=")
    (sp-local-pair "~" "~" :wrap "M-`")
    ;; yeah, I'm bringing 「」 back
    (sp-local-pair "「" "」" :wrap "C-c e"))

  ;; conflict with RefTeX?
  ;; (sp-with-modes '(tex-mode plain-tex-mode latex-mode LaTeX-mode)
  ;;   (sp-local-pair "\\left(" "\\right)" :wrap "C-c (")
  ;;   (sp-local-pair "\\left[" "\\right]" :wrap "C-c ["))

  (--each sp--lisp-modes
    (eval-after-load it
      '(turn-on-smartparens-strict-mode)))
#+end_src

This still isn't calling =turn-on-smartparens-strict-mode= for some reason.

Since I couldn't find an =apropos= entry for it,

#+begin_example
  ELISP> sp--lisp-modes
  (cider-repl-mode clojure-mode clojurec-mode clojurescript-mode clojurex-mode
                   common-lisp-mode emacs-lisp-mode eshell-mode fennel-mode
                   fennel-repl-mode geiser-repl-mode gerbil-mode inf-clojure-mode
                   inferior-emacs-lisp-mode inferior-lisp-mode
                   inferior-scheme-mode lisp-interaction-mode lisp-mode
                   monroe-mode racket-mode racket-repl-mode
                   scheme-interaction-mode scheme-mode slime-repl-mode
                   sly-mrepl-mode stumpwm-mode)
#+end_example

so that's really everything.

I'm also having issues with

#+begin_example
    (sp-local-pair "~「" "」~" :wrap "C-c M-`")
    (sp-local-pair "=「" "」=" :wrap "C-c r")
#+end_example

#+begin_example
  Debugger entered--Lisp error: (wrong-type-argument char-or-string-p nil)
    sp-wrap-with-pair("=「")
    (lambda (&optional arg) (interactive "*P") (sp-wrap-with-pair "=「"))(nil)
    funcall-interactively((lambda (&optional arg) (interactive "*P") (sp-wrap-with-pair "=「")) nil)
    call-interactively((lambda (&optional arg) (interactive "*P") (sp-wrap-with-pair "=「")) nil nil)
    command-execute((lambda (&optional arg) (interactive "*P") (sp-wrap-with-pair "=「")))
#+end_example

*** ~rainbow-delimiters~
[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]: useful for more than just Lisp, this mode color codes
parentheses, brackets, and braces by their depth. Saw it (or something like it)
in some screencast, and I need it. Update: used this for awhile, and I don't
know how I ever lived without it.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook ((prog-mode . rainbow-delimiters-mode)
           (tex-mode . rainbow-delimiters-mode)
           (latex-mode . rainbow-delimiters-mode)
           (LaTeX-mode . rainbow-delimiters-mode)
           (comint-mode . rainbow-delimiters-mode)))
#+end_src

Note: =comint-mode-hook= should affect modes that inherit from =comint-mode=, for
example, IELM.

** TODO ~eshell~
Seeing as how ~eshell~ natively accepts Emacs Lisp, this seems like a fine
section under which to put this.

*** TODO Fancy prompt
EmacsWiki has some ideas for how to change thee [[https://www.emacswiki.org/emacs/EshellPrompt][eshell prompt]] to make it more
like your bash prompt, or even do some cool things like fish.

#+begin_src emacs-lisp
  (require 'cl-lib)

  (defun fish-path (path max-len)
    "Return a potentially trimmed-down version of the directory PATH, replacing
  parent directories with their initial characters to try to get the character
  length of PATH (sans directory slashes) down to MAX-LEN.

  Stolen from https://www.emacswiki.org/emacs/EshellPrompt"
    (let* ((components (split-string (abbreviate-file-name path) "/"))
           (len (+ (1- (length components))
                   (cl-reduce '+ components :key 'length)))
           (str ""))
      (while (and (> len max-len)
                  (cdr components))
        (setq str (concat str
                          (cond ((= 0 (length (car components))) "/")
                                ((= 1 (length (car components)))
                                 (concat (car components) "/"))
                                (t
                                 (if (string= "."
                                              (string (elt (car components) 0)))
                                     (concat (substring (car components) 0 2)
                                             "/")
                                   (string (elt (car components) 0) ?/)))))
              len (- len (1- (length (car components))))
              components (cdr components)))
      ;; TODO replace chars > max-len with …
      (concat str (cl-reduce (lambda (a b) (concat a "/" b)) components))))

  (defun custom-eshell-prompt-function ()
    "..."
    (let ((prompt-symbol
           (if (zerop (user-uid))
               (propertize  " #" 'face
                            '(:foreground "red" :weight bold))
             (propertize  " $" 'face
                          '(:foreground "green" :weight bold)))))
       (concat (propertize
                (concat "["
                        (if (string= (eshell/pwd) (getenv "HOME"))
                            "~"
                          (fish-path (eshell/basename (eshell/pwd)) 25))
                        "]")
                          'face
                          '(:foreground "grey"))
              prompt-symbol " ")))

  (setq eshell-prompt-function 'custom-eshell-prompt-function)
#+end_src

** Helper functions
*** TODO ~warn-missing-executable~
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Warning-Basics.html][Warning Basics | GNU Emacs Manual]].

#+begin_aside
While looking up information on warnings, I came across this info on [[https://emacsdocs.org/docs/elisp/Errors][errors]] at
what looks to be a great resource that I haven't come across before: [[https://emacsdocs.org/][Emacs
Docs]]: "The modern documentation website Emacs deserves," which has
documentation on [[https://emacsdocs.org/docs/emacs/The-Emacs-Editor][Emacs]], [[https://emacsdocs.org/docs/elisp/Emacs-Lisp][Emacs lisp]], [[https://emacsdocs.org/docs/org/The-Org-Manual][Org mode]], [[https://emacsdocs.org/docs/auctex/Top][AUCTeX]], and [[https://emacsdocs.org/docs/Magit/Top][Magit]].
#+end_aside

#+begin_src emacs-lisp
  ;; (display-warning 'file-missing
  ;;                  (format-message "missing `something'")
  ;;                  :warn
  ;;                  "*Warnings*")

  ;; (warn "missing executable: `foobar'")

  ;; (message "this is still evaluated")

  (defun warn-missing-executable (exec-name)
    "Warn if EXEC-NAME is missing."
    (unless (executable-find exec-name)
      (message (format-message "missing executable: `%s'" exec-name))))
#+end_src

* TODO Org mode
** Main config
Per [[https://panadestein.github.io/emacsd/#org55146ca][Panadestein's Emacs's config | Org mode]], it seems like I can put this all
the way down here and remove =(use-package org)= from ~dotemacs.el~. I'm not
ready to make that change yet, but when I do, it'll go here.

#+begin_src emacs-lisp
  (use-package org
    :straight t
    :init
    (defun display-ansi-colors ()
      "Fixes kernel output in emacs-jupyter"
      (ansi-color-apply-on-region (point-min) (point-max)))
    :hook
    (org-mode . (lambda ()
                  (progn
                    ;; not sure what this does
                    ;; (add-hook
                    ;;  'after-save-hook #'org-babel-tangle :append :local)
                    (add-hook
                     'org-babel-after-execute-hook #'display-ansi-colors))))
    :config
    ;; (require 'ox-beamer)
    ;; (require 'ol-bibtex)
    (add-to-list 'org-modules 'org-tempo)
    (setq org-use-sub-superscripts '{})
    (org-babel-do-load-languages
     'org-babel-load-languages '((python . t)
                                 ;; (jupyter . t)
                                 (scheme . t)
                                 (haskell . t)
                                 (lisp . t)
                                 (emacs-lisp . t)
                                 ;; (clojure . t)
                                 (C . t)
                                 (org . t)
                                 ;; (gnuplot . t)
                                 (sql . t)
                                 ;; (hy . t)
                                 (eshell . t)
                                 (awk . t)
                                 (latex . t)
                                 (shell . t)))
    ;; (setq org-babel-clojure-backend 'cider)
    ;; (setq org-latex-pdf-process '("latexmk -shell-escape -pdf -outdir=%o %f"))
    ;; (setq org-preview-latex-default-process 'imagemagick)
    ;; (setq org-src-window-setup 'current-window)
    ;; (setq org-startup-indented t)
    (setq
     ;; org-latex-listings 'minted
     org-latex-packages-alist
     '(
       ;; ("" "minted")
       ("" "siunitx")))
    ;; (add-to-list 'org-latex-default-packages-alist
    ;;              (concat "\\PassOptionsToPackage"
    ;;                      "{colorlinks=true,allcolors=magenta}{hyperref}"))
    (customize-set-value
     'org-latex-hyperref-template
     (concat "\\hypersetup{\n"
             "pdfauthor={%a},\n"
             "pdftitle={%t},\n"
             "pdfkeywords={%k},\n"
             "pdfsubject={%d},\n"
             "pdfcreator={%c},\n"
             "pdflang={%L},\n"
             "colorlinks=true,\n"
             "allcolors=magenta}"))
    (setq org-startup-with-inline-images t)
    (setq org-hide-emphasis-markers t)
    (setq org-todo-keywords
          '((sequence "TODO(t)"
                      "BROKEN(b)"
                      "PARTIAL(p)"
                      "VERIFY(v)"
                      "URGENT(u)"
                      "|"
                      "DONE(d)"
                      "OPTIONAL(o)"
                      "DELEGATED(e)"
                      "CANCELLED(c)")))
    (setq org-todo-keyword-faces
          '(("TODO" . "cyan")
            ("BROKEN" . "red")
            ("PARTIAL" . "green")
            ("VERIFY" . "gold")
            ("URGENT" . "orange")
            ("DONE" . "forest green")
            ("OPTIONAL" . "dark cyan")
            ("DELEGATED" . "sea green")
            ("CANCELLED" . "deep sky blue")))
    (setq org-format-latex-options
          (plist-put org-format-latex-options :scale 2.0))
    (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images))
#+end_src

Some explanations:
- =org-src-window-setup=: [[https://stackoverflow.com/questions/20909393/how-to-open-a-code-block-using-emacs-org-mode-in-a-specific-window][How to open a code block using emacs org-mode in a
  specific window | stackoverflow]] (you don't want it in =current-window=, and
  the default behavior seems to work the way you like it)
- =org-format-latex-options=: [[https://stackoverflow.com/a/11272625][How to make formule bigger in org-mode of
  Emacs? | stackoverflow]]
- +[[https://emacs.stackexchange.com/a/46226][How to change style of hyperlinks within PDF published from org-mode
  document? | stackoverflow]]: =... \\PassOptionsToPackage{hyperref} ...=+
  Actually, that answer looks wrong, but [[https://emacs.stackexchange.com/a/61200][changing the hyperref tamplate |
  stackoverflow]] (=org-latex-hyperref-template=) looks promising
- had an issue where =minted= appeared to break listings export---*look into
  this!*

There's no ~ob-yaml~, +but when I had =(yaml . t)= in
=org-babel-load-languages=, ~yaml~ was a working option when inserting code
blocks with ~C-c C-,~+. Unrelated---there's an entry =("yaml" . "src yaml")= in
=org-structure-template-alist=, but I hadn't noticed it.

** Keybindings
*** =iedit-mode= only available in ~src~ blocks

#+begin_src emacs-lisp
  (defun org-iedit-only-in-src-block ()
    "Ensure iedit-mode only works in Org src block.

  Note: manually calling 「M-x iedit-mode⸥ will still work anywhere"
    (interactive)
    (cond ((org-in-src-block-p t) (iedit-mode))
          (t (progn (ding)
                    (message "You're not in an Org src block.")))))

  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "C-c ;") 'org-iedit-only-in-src-block))
#+end_src

Note about =org-in-src-block-p=:

#+begin_quote
(org-in-src-block-p &optional INSIDE ELEMENT)

Whether point is in a code source block.
When INSIDE is non-nil, don’t consider we are within a source
block when point is at #+BEGIN_SRC or #+END_SRC.
When ELEMENT is provided, it is considered to be element at point.
#+end_quote

=(org-in-src-block-p t)= is in fact the behavior I want and not a newbie
mistake lingering on in here.

The reason I had an issue with =(void-variable org-iedit-in-src-block)= for so
long was that I forgot (read: didn't know that I needed to) quote the function
in =define-key= or =local-set-key=, but now everything works as it should.

*** =other-window=

#+begin_src emacs-lisp
  (defun other-window-back ()
    "Go to previous window -- easier than explicitly passing an argument to
  `other-window'."
    (interactive)
    (other-window -1))

  (define-key global-map (kbd "C-x O") 'other-window-back)
#+end_src

** ~org-tempo~
[[https://orgmode.org/manual/Structure-Templates.html][Org structure templates]] (~C-c c-,~: =org-insert-structure-template=)

#+begin_src emacs-lisp
  ;; daviwil's strategy:
  ;; (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  ;; ...
  ;; (add-to-list 'org-structure-template-alist '("py" . "src python"))

  ;; more elegant way of doing it(?)
  ;; note: cdr needs to have 'src␣' prepended in order to work.
  (with-eval-after-load 'org
    (progn
      (setq org-structure-template-src-alist-extensions
            '(("el"  . "emacs-lisp")
              ("hs"  . "haskell")
              ("ltx" . "latex")
              ("org" . "org")
              ("py"  . "python")
              ("hy" . "hy")
              ("rust" . "rustic")
              ("sql" . "sql")
              ("sh"  . "shell")
              ("esh" . "eshell")
              ("yaml" . "yaml")
              ("json" . "json")
              ("nix" . "nix")))

      (seq-do
       #'(lambda (src-cell)
           (let* ((key (car src-cell))
                  (name (format "src %s" (cdr src-cell)))
                  (entry (cons key name)))
             (add-to-list 'org-structure-template-alist entry)))
       org-structure-template-src-alist-extensions)))
#+end_src

[Note: for Rust support, use [[https://github.com/brotzeit/rustic][rustic]]; see [[https://stackoverflow.com/a/62934702][Literate Programming with rust and org
mode | stackoverflow]].]

** =org-pretty-entities=
[[https://orgmode.org/manual/Special-Symbols.html][org-pretty-entities]] automatically converts appearance of things like ~\​to~ to →
and ~\​alpha~ to α. This can be toggled with ~C-c C-x \~
(=org-toggle-pretty-entities=).

#+begin_src emacs-lisp
  (setq org-pretty-entities t)
#+end_src

** Toggle =:eval no= for =src= blocks
Stolen from [[https://emacs.stackexchange.com/a/13897/9013][How to toggle Org-mode source code block ":eval no" status | Emacs
StackExchange]]

#+begin_src emacs-lisp
  (defun org-toggle-src-eval-no ()
    "Will toggle \":eval no\" on the src block begin line"
    (interactive)
    (defun in-src-block-p ()
      "Returns t when the point is inside a source code block"
      (string= "src" (org-in-block-p '("src"))))

    (defun beginning-src ()
      "Find the beginning of the src block

  Note: pathological case: if a block within src block contains \"#+BEGIN_SRC\"
  and cursor is before that line, \":eval no\" won't toggle in correct
  location"
      (let ((case-fold-search t)) (search-backward "#+BEGIN_SRC")))

    (defun toggle-eval-no ()
      "Handles the toggling of ' :eval no'"
       (save-excursion
        (end-of-line)
        (let ((case-fold-search t)) (search-backward "#+BEGIN_SRC")
         (if (search-forward " :eval no" (line-end-position) "f")
             (replace-match "")
           (insert " :eval no")))))

    (if (in-src-block-p) (toggle-eval-no)))

  (defun add-org-toggle-src-key ()
    (local-set-key (kbd "C-c t")
                   #'org-toggle-src-eval-no))

  (add-hook 'org-mode-hook 'add-org-toggle-src-key)
#+end_src

** alphabetical lists
See [[https://orgmode.org/manual/Plain-Lists.html#FOOT11][Org Manual §2.6 Plain Lists -- Fn 11]].

#+begin_src emacs-lisp
  (setq org-list-allow-alphabetical t)
#+end_src

** TODO Export

*** TODO HTML -- default stylesheet

*** TODO LaTeX
**** TODO Dates
I think I just want these rendered like the surrounding text.

#+begin_src emacs-lisp
  (setq org-latex-active-timestamp-format "\\text{%s}")
  (setq org-latex-inactive-timestamp-format "\\text{%s}")
#+end_src

Also want to change the behavior of exporting dates as =[<ISO 8601> <%a>]= to
=%B %-d, %Y=. Looks like I may need to change =org-timestamp-custom-formats=, but
the documentation is a little spotty.

* Load additional org configuration files
See [[* Switches for additional configuration][configuration switches]] to see what's loaded.

Newest/fanciest/best way of doing it:

#+begin_src emacs-lisp
  (seq-do
   #'(lambda (ccell)
       (let* ((file (car ccell))
              (name (upcase-initials
                     (replace-regexp-in-string "-" " " (file-name-base file))))
              (path (expand-file-name file emacs-config-directory))
              (enable (cdr ccell)))
         (when enable
           (cond ((file-readable-p path)
                  (org-babel-load-file path)
                  (message "%s loaded." name))
                 (t (warn (format "%s NOT loaded ('%s' missing or unreadable)."
                                  name
                                  path)))))))
   emacs-config-additional-files-alist)
#+end_src

* Sanity check
Check that bottom of this file was reached and evaluated successfully.

#+begin_src emacs-lisp
  (message "Bottom of core-config.org reached and evaluated.")
#+end_src
