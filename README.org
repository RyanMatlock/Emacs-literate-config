#+title: Literate Emacs configuration with Org mode
#+author: Ryan Matlock

As of [2021-04-19], my Emacs configuration file, which probably began life
around seven years ago, is over 1700 lines long, full of cruft, and difficult
to manage. It's time to start over---with Org mode!

* TODO Usage
** TODO Org file \to =.emacs=
** TODO Escape hatch
If you need to go back to the old configuration...

#+BEGIN_SRC sh :eval no
  ln -s /path/to/legacy-dotemacs.el ~/emacs.test && touch ~/Deskop/DOTEMACS-ERR
#+END_SRC

* Problems
* Features to add/look into & changes to make [0/3]
- [ ] oBnOxIoUs CaSe region command (this may already exist, but I'm going
  to 1) respect other Emacs users enough to assume that it doesn't, and 2) try
  to write it myself because it seems straightforward but also good Emacs Lisp
  practice).
- [ ] [[https://github.com/abo-abo/hydra][hydra]] for fancy keybindings
- [ ] ~setq~ vs ~customize-variable~; move stuff to =custom.el= if the latter makes
  sense for much of your configuration

* General interface & minor modes
** Package
Actually, I think =dotemacs.el= takes care of ~package~, ~use-package~, MELPA, and
the ~org-babel~ stuff necessary to evaluate the Emacs Lisp blocks in this
file; see https://cestlaz.github.io/posts/using-emacs-10-org-init/

** Customize
There are probably a number of settings you can/should move into this, although
I'm curious how much of a pressing need there is given that with a literate
=.emacs= config, I can explain my reasoning for a setting.

#+BEGIN_SRC emacs-lisp
  (setq custom-file "/Users/matlock/config/emacs/custom.el")
  (load custom-file)
#+END_SRC

** Environment variables
*** ~exec-path-from-shell~ to fix ~exec-path~​/​~PATH~ behavior in OS X
See https://github.com/purcell/exec-path-from-shell. Ensure ~exec-path~ works
whether Emacs is launched from OS X GUI or a =systemd=-style daemon; also ensure
=PYTHONPATH= works.

#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
  (when (daemonp)
    (exec-path-from-shell-initialize))
  (exec-path-from-shell-copy-env "PYTHONPATH")
#+END_SRC

Note: this method of detecting being in OS X is different than what I've used
elsewhere in this document, but it may be the right way to do it.
*** Set ~default-directory~ for ~find-file~
Note that this also appears to affect default directory for ~eshell~.

Update: it seems like ~(getenv "HOME")~ wasn't working (at least on OS X), so I'm
manually setting the directory. I suspect Linux plays a little nicer with
~(getenv "HOME")~, so I'm keeping that.

#+BEGIN_SRC emacs-lisp
  (setq default-directory
        (if (eq system-type 'darwin)
            "/Users/matlock"
          (getenv "HOME")))
#+END_SRC

** TODO General look & feel
*** TODO Whitespace -- move to custom??
Highlight lines over 80 chars long; see
http://emacsredux.com/blog/2013/05/31/highlight-lines-that-exceed-a-certain-length-limit/
and
http://stackoverflow.com/questions/6344474/how-can-i-make-emacs-highlight-lines-that-go-over-80-chars 

#+BEGIN_SRC emacs-lisp
  (require 'whitespace)
  (setq whitespace-line-column 80)
  (setq whitespace-style '(face lines-tail))

  (define-global-minor-mode my-global-whitespace-mode whitespace-mode
    (lambda ()
      (when (derived-mode-p 'prog-mode)
        (whitespace-mode))))
  (my-global-whitespace-mode 1)
#+END_SRC

*** TODO Turn off welcome screen -- move to custom??
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

*** TODO Spaces instead of tabs -- move to custom??
Except for makefiles, which require tabs. See
http://stackoverflow.com/questions/24832699/emacs-24-untabify-on-save-for-everything-except-makefiles/24857101#24857101

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (defun untabify-except-makefiles ()
    (unless (derived-mode-p 'makefile-mode)
      (untabify (point-min) (point-max))))
  (add-hook 'before-save-hook 'untabify-except-makefiles)
#+END_SRC

*** TODO Set columns to wrap at 80 characters -- move to custom?
"BuT mOnItOrS aRe So WiDe ThEsE dAyS!!1" Yeah, but it's convenient being able
to have multiple windows side-by-side in a relatively compact space, plus
Python's PEP 8 is right.

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(setq-default fill-column 79)
#+END_SRC

*** TODO Turn on ~column-number-mode~ -- move to custom??
#+BEGIN_SRC emacs-lisp
  (setq column-number-mode t)
#+END_SRC

*** Global emojify
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook #'global-emojify-mode)
#+END_SRC

*** Highlight indentation guides for programming modes
This apparently doesn't use ~customize-variable~, but according to some uncited
documentation (which is likely at least a few years old at this point), ~setq~ is
the way to do this.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  (setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-character ?\|)
#+END_SRC

*** Auto-indentation on =RET= for various modes
See http://www.emacswiki.org/emacs/AutoIndentation

#+BEGIN_SRC emacs-lisp
  (defun set-newline-and-indent ()
    (local-set-key (kbd "RET") 'newline-and-indent))
  (add-hook 'html-mode-hook 'set-newline-and-indent)
  (add-hook 'lisp-mode-hook 'set-newline-and-indent)
  (add-hook 'LaTeX-mode-hook 'set-newline-and-indent)
  (add-hook 'c-mode-common-hook 'set-newline-and-indent)
#+END_SRC

*** TODO Global font lock mode -- move to custom??
This basically enables syntax highlighting by allowing for different faces for
keywords, comments, etc.; see
https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html

#+BEGIN_SRC emacs-lisp
  (global-font-lock-mode 1)
#+END_SRC

*** Color emojis in Emacs 27/OS X
See
https://www.reddit.com/r/emacs/comments/ggd90c/color_emoji_in_emacs_27/. Not
sure if this is still necessary, but it's been working :shrug:

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (set-fontset-font t 'symbol "Apple Color Emoji")
    (set-fontset-font t 'symbol "Noto Color Emoji" nil 'append)
    (set-fontset-font t 'symbol "Segoe UI Emoji" nil 'append)
    (set-fontset-font t 'symbol "Symbola" nil 'append))
#+END_SRC

*** ~emojify-user-emojis~
I was going to use ~customize-variable~ for this, but it actually seems more
straightforward to put it here.

Note that the =gitmoji= =:​memo:= symbol is the same as ~emojify~'s =:​pencil:=, and
=gitmoji='s =:​pencil:= symbol is the same as ~emojify~'s =:​pencil2:=.

#+BEGIN_SRC emacs-lisp
  (setq emojify-user-emojis
        '((":memo:" .
           (("name" . "Memo")
            ("image" .
             "~/.emacs.d/emojis/emojione-v2.2.6-22/1f4dd.png")
            ("style" . "github")))
          (":adhesive_bandage:" .
           (("name" . "Adhesive Bandage")
            ("image" .
             "~/.emacs.d/emojis/user-added/adhesive_bandage.png")
            ("style" . "github")))))
  (when (featurep 'emojify)
    (emojify-set-emoji-data))
#+END_SRC

** GUI
- no menu bar; see see http://emacswiki.org/emacs/MenuBar#toc1
- no tool bar
- no scroll bar
- 96% opacity (matches OS X Terminal); see see
  http://stackoverflow.com/questions/21946382/how-to-get-transparent-window-in-gnu-emacs-on-osx-mavericks
- default frame size: 80w x 45h
# - define ~side-by-side~ to accommodate two windows (it seems like I'm using this
#   at least 80% of the time)
- define ~std-frame~ to return to default 80w x 45h
- define ~lrg-frame~, which accommodates two side-by-side windows
- define ~xl-frame~, which accommodates three side-by-side-by-side windows
- use Inconsolata size 15 font
- set unicode font to Unifont
- use Solarized Dark theme; see
  https://emacs.stackexchange.com/questions/10246/emacs-always-ask-to-trust-colour-theme-at-startup
- disable mouse inputs (except scrolling?); see
  http://stackoverflow.com/questions/4906534/disable-mouse-clicks-in-emacs
- disable =C-z=, which minimizes Emacs in GUI mode
- disable ~visible-bell~; see
  http://stackoverflow.com/questions/36805713/emacs-blank-square-on-mac-os-x/36813418#36813418

#+BEGIN_SRC emacs-lisp
  (when window-system
    (menu-bar-mode -1)  ;; not working?
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (set-frame-parameter (selected-frame) 'alpha '(96 96))
    (add-to-list 'default-frame-alist '(alpha 96 96))
    (defvar my:frame-width 80)
    (defvar my:frame-height 45)
    (set-frame-size (selected-frame) my:frame-width my:frame-height)
    (defun side-by-side ()
    "resizes the frame to accommodate two windows side-by-side"
    (interactive)
    (set-frame-size (selected-frame)
                    ;; used to be + 3, but I think there are some side columns
                    ;; that take away screen real estate now?
                    (+ (* my:frame-width 2) 7)
                    my:frame-height))
    (defun std-frame ()
      "reverts framesize to standard"
      (interactive)
      (set-frame-size (selected-frame)
                      (+ 1 my:frame-width)
                      my:frame-height))
    (defun my:calculate-frame-width (num-windows)
      "calculate how wide the frame should be for a number of windows"
      (let ((inter-window-space 2))
        (+ (* my:frame-width num-windows)
           (* inter-window-space (- num-windows 1)))))
    (defun lrg-frame ()
      "resize frame for 2 side-by-side windows (same as side-by-side function,
       which is being kept for now for the sake of legacy)"
      (interactive)
      (let ((num-windows 2))
        (set-frame-size (selected-frame)
                        (my:calculate-frame-width num-windows)
                        my:frame-height)))
    (defun xl-frame ()
      "resize frame for 3 side-by-side-by-side windows + extra height"
      (interactive)
      (let ((num-windows 3)
            (height-multiplier 1.3))
        (set-frame-size (selected-frame)
                        (my:calculate-frame-width num-windows)
                        (floor (* my:frame-height height-multiplier)))))
    (defvar my:font-face "Inconsolata")
    (defvar my:font-size 15)
    (set-fontset-font t 'unicode "Unifont" nil 'prepend)
    (set-frame-font (concat my:font-face
                              "-"
                              (number-to-string my:font-size)))

    (load-theme 'solarized-dark t)
    (dolist (k '([mouse-1] [down-mouse-1] [drag-mouse-1] [double-mouse-1]
                 [triple-mouse-1] [mouse-2] [down-mouse-2] [drag-mouse-2]
                 [double-mouse-2] [triple-mouse-2] [mouse-3] [down-mouse-3]
                 [drag-mouse-3] [double-mouse-3] [triple-mouse-3] [mouse-4]
                 [down-mouse-4] [drag-mouse-4] [double-mouse-4]
                 [triple-mouse-4] [mouse-5] [down-mouse-5] [drag-mouse-5]
                 [double-mouse-5] [triple-mouse-5]))
      (global-unset-key k))
    (global-unset-key (kbd "C-z"))
    (setq visible-bell nil))
#+END_SRC

** TODO Preferred global keybindings
*** Reload =.emacs=
See
http://stackoverflow.com/questions/24810079/key-binding-to-reload-emacs-after-changing-it

#+BEGIN_SRC emacs-lisp
  (defun reload-dotemacs ()
    (interactive)
    (load-file "~/.emacs"))
  (global-set-key (kbd "C-c <f12>") 'reload-dotemacs)
#+END_SRC

*** Copy selection without killing
See
http://stackoverflow.com/questions/3158484/emacs-copying-text-without-killing-it
and http://www.emacswiki.org/emacs/KeyboardMacros

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-w") 'kill-ring-save)
#+END_SRC

*** Switch focus to previous window with =C-x p=
This complements ~other-window~, which is bound to =C-x o=.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x p") 'previous-multiframe-window)
#+END_SRC

*** Count words in region
Documented in old =.emacs= as "~count-words-region~ \to ~count-words~" :shrug:

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-=") 'count-words)
  (put 'narrow-to-region 'disabled nil)
#+END_SRC

*** Iedit with =C-c ;=
All occurrences of a string are highlighted and then editable; cursor/region
goes back to normal on second activation of ~iedit-mode~. See
https://www.emacswiki.org/emacs/Iedit

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-c ;") 'iedit-mode)
#+END_SRC

** TODO Preferred multi-mode keybindings
*** Fix auto-identation for multiple modes
See http://www.emacswiki.org/emacs/AutoIndentation

#+BEGIN_SRC emacs-lisp
  (defun set-newline-and-indent ()
    (local-set-key (kbd "RET") 'newline-and-indent))
  (add-hook 'html-mode-hook 'set-newline-and-indent)
  (add-hook 'lisp-mode-hook 'set-newline-and-indent)
  (add-hook 'LaTeX-mode-hook 'set-newline-and-indent)
  ;; (add-hook 'css-mode 'set-newline-and-indent)
  (add-hook 'c-mode-common-hook 'set-newline-and-indent)
#+END_SRC

** Company (COMPlete ANYthing)
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)
  (global-set-key (kbd "C-c C-<tab>") 'company-complete)
#+END_SRC

*** Python: company-jedi
#+BEGIN_SRC emacs-lisp
  (defun python-company-jedi-hook ()
    (add-to-list 'company-backends 'company-jedi))
  (add-hook 'python-mode-hook 'python-company-jedi-hook)
#+END_SRC

** TODO Flycheck
** TODO Flyspell -- move to custom?
See
http://unix.stackexchange.com/questions/38916/how-do-i-configure-emacs-to-use-ispell-on-mac-os-x

# #+BEGIN_SRC emacs-lisp
# (setq ispell-program-name "/usr/local/bin/ispell")
# #+END_SRC

Actually, no?

See
http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html
and
http://emacs-fu.blogspot.com/2009/12/automatically-checking-your-spelling.html
and http://blog.binchen.org/posts/effective-spell-check-in-emacs.html

#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "aspell"
        ispell-extra-args '("--sug-mode=ultra"))
#+END_SRC

** TODO Magit
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c 0") 'magit-status)
#+END_SRC

** TODO MELPA
** IDO (Interactively Do Things)
See https://masteringemacs.org/article/introduction-to-ido-mode

#+BEGIN_SRC emacs-lisp
  (require 'ido)
  (ido-mode 1)
#+END_SRC

** Paredit
See http://www.emacswiki.org/emacs/ParEdit

#+BEGIN_SRC emacs-lisp
  (autoload 'enable-paredit-mode
    "paredit"
    "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook #'enable-paredit-mode)
  (add-hook 'geiser-repl-mode-hook #'enable-paredit-mode)
  (add-hook 'slime-repl-mode-hook #'enable-paredit-mode)
#+END_SRC

** LSP (Language Server Protocol)
#+BEGIN_SRC emacs-lisp
  (require 'lsp-mode)
  (require 'lsp-ui)
#+END_SRC

** TODO TRAMP
*** TODO Fix problem with hanging -- confused about this/move to custom?
#+BEGIN_SRC emacs-lisp
(eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
#+END_SRC

Maybe this should be updated to =/usr/local/bin/bash= or I should figure out how
to symlink =/usr/local/bin/bash= to =/bin/bash=; if so, the above
~explicit-shell-file-name~ in ANSI term section should be updated

*** TODO Use SSH -- move to custom?
See
https://www.gnu.org/software/emacs/manual/html_node/tramp/Default-Method.html

#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC

** TODO yasnippet
*** General configuration
Pretty sure I have other snippet directories; probably should consolidate those
at some point.

#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  (yas-global-mode 1)
  (setq yas-snippet-dirs (append yas-snippet-dirs
                                 '("~/emacs/yasnippets")))
  (yas-global-mode 1)
#+END_SRC

*** TODO =.snip= extension for yasnippet templates -- move to custom??
#+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist
        (cons '("\\.snip$" . snippet-mode)
              auto-mode-alist))
#+END_SRC

*** =M-<TAB>= for snippets within snippets
See https://joaotavora.github.io/yasnippet/snippet-expansion.html

#+BEGIN_SRC emacs-lisp
  (define-key yas-minor-mode-map (kbd "M-TAB") 'yas-expand)
#+END_SRC

*** TODO Make auto-complete play nicely with YAS
Not sure if I actually need this given that I don't think I use ~auto-complete~
anymore. I'll comment this out for now, and if I need it, I'll know where to
look later. It also looks like a setting I could potentially move to
=emacs-custom=.

#+BEGIN_SRC emacs-lisp
  (setq ac-source-yasnippet nil)
#+END_SRC

** TODO Miscellaneous
*** Shrug emoticon
#+BEGIN_SRC emacs-lisp
  (defun shrug-emoticon ()
    "insert ¯\\_(ツ)_/¯ anywhere in your code (preferably comments)"
    (interactive)
    ;; note that the backslash needs to be escaped
    (insert "¯\\_(ツ)_/¯"))
#+END_SRC

*** Magic 8-ball
A silly extension I wrote because for some reason I figured Emacs could use a
Magic 8-ball :shrug:

You may want to move the path to something like =~/.emacs.d/plugins/= at some
point.

Note that the prefix, =C-u=, changes the behavior (by adding "[​=<timestamp>=​]
=<question>= =<response>=" to the ~kill ring~, I think).

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/eight-ball")
  (require 'eight-ball)
  (global-set-key (kbd "C-c 8") 'eight-ball)
#+END_SRC

*** Enable ~downcase-region~, ~upcase-region~
The latter was hanging out in my Python configuration section for some
reason :shrug:

#+BEGIN_SRC emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+END_SRC

*** TODO Define ~obnoxious-case-region~
Type a line normally and cOnVeRt It To ThIs. Maybe pass a prefix argument to
shift if it starts uppercase or lowercase?

*** TODO Disable "Package ~cl~ is deprecated" warning on startup
See https://github.com/kiwanami/emacs-epc/issues/35. Might be a good idea to
investigate this at some point and actually fix it instead of applying a
bandaid.

#+BEGIN_SRC emacs-lisp
  (setq byte-compile-warnings '(cl-functions))
#+END_SRC

* Major modes
** TODO ANSI term
*** Fix tab completion
See
http://stackoverflow.com/questions/18278310/emacs-ansi-term-not-tab-completing

#+BEGIN_SRC emacs-lisp
  (add-hook 'term-mode-hook (lambda() (setq yas-dont-activate t)))
#+END_SRC

*** TODO Set shell to homebrew bash -- move to custom?
See https://stackoverflow.com/a/12679864

#+BEGIN_SRC emacs-lisp
  (setq explicit-shell-file-name "/usr/local/bin/bash")
#+END_SRC

** TODO AUCTeX
*** TODO General (La)TeX config -- move to custom??
#+BEGIN_SRC emacs-lisp
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
  (setq TeX-PDF-mode t)
#+END_SRC

*** TODO Indentation -- move to custom??
See
http://stackoverflow.com/questions/2477195/latex-indentation-formatting-in-emacs
and http://www.gnu.org/software/auctex/manual/auctex/Indenting.html

#+BEGIN_SRC emacs-lisp
  (setq LaTeX-item-indent 0)
  (setq LaTeX-indent-level 2)
#+END_SRC

*** Word count using =TeXcount= shell command (=C-c w=)
See http://superuser.com/questions/125027/word-count-for-latex-within-emacs and
http://stackoverflow.com/questions/8507695/using-texcount-in-emacs-to-determine-word-count-of-latex-or-tex-file-wanting-op

#+BEGIN_SRC emacs-lisp
  (defun latex-word-count ()
    "Call texcount on current LaTeX document"
    (interactive)
    (shell-command (concat "texcount "
                           ;; options
                           "-brief "
                           ;; use shell-quote-argument to handle buffer names
                           ;; with spaces or other weirdness
                           (shell-quote-argument buffer-file-name))))
  (add-hook 'LaTeX-mode-hook 'latex-word-count)
  (eval-after-load 'latex
    '(define-key LaTeX-mode-map (kbd "C-c w") 'latex-word-count))
#+END_SRC

*** Get =latexmk= to work with =Skim.app= (OSX)
Add =latexmk= to ~TeX-command-default~ (bound to =C-c C-c=). [Note: old config had
some commend about SyncTeX setup via =~/.latexmkrc=, but that file doesn't seem
to exist, so I think that's probably ancient history.] I'm not totally
convinced this is the best implementation, but it's been working :shrug:

#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (push
               '("latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
                 :help "Run latexmk on file")
               TeX-command-list)))
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (push
               '("xelatexmk" "latexmk -xelatex -pdf %s" TeX-run-TeX nil t
                 :help "Run latexmk -xelatex on file")
               TeX-command-list)))
  (add-hook 'TeX-mode-hook
            '(lambda () (setq TeX-command-default "latexmk")))
#+END_SRC

Use =Skim.app= as default PDF viewer in OSX. =displayline= is used for forward
search, option =-b= highlights current line, and option =-g= opens =Skim.app= in the
background. See
https://stackoverflow.com/questions/1817257/how-to-determine-operating-system-in-emacs-lisp
for recent addition to determine operating system.

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
    (setq TeX-view-program-list
          '(("PDF Viewer"
             (concat "/Applications/Skim.app/Contents/SharedSupport/"
                     "displayline -b -g %n %o %b")))))
#+END_SRC

*** Add =pdftex= to ~TeX-command-list~
#+BEGIN_SRC emacs-lisp
  (eval-after-load "tex"
    '(add-to-list 'TeX-command-list
                  '("pdftex" "pdftex %s" TeX-run-command t t
                    :help "Run pdftex on file")
                  t))
#+END_SRC

** TODO C
*** Allman-style indentation
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "bsd"
        c-basic-offset 4)
#+END_SRC

*** Allman C minor mode
#+BEGIN_SRC emacs-lisp
  (define-minor-mode allman-c-mode
    "allman-c-mode allows the use of Allman-
     style friendly snippets."
    :init-value nil
    :lighter " AlmnC")
  (add-hook 'allman-c-mode-hook
            '(lambda ()
               (yas-activate-extra-mode 'allman-c-mode)))
  (add-hook 'c-mode-common-hook '(lambda () (allman-c-mode)))
#+END_SRC

** TODO Clojure
It's been awhile since I've used Clojure. If/when I get back to it, I can look
for a modern configuration.

** TODO Common Lisp
*** TODO SLIME, SBCL & quicklisp -- move to custom?
#+BEGIN_SRC emacs-lisp
  (setq inferior-lisp-program "/usr/local/bin/sbcl")
  (setq slime-contribs '(slime-fancy
                         slime-tramp
                         slime-asdf))
#+END_SRC

** CSS
2-space indent

#+BEGIN_SRC emacs-lisp
(defun my:css-2-space-indent ()
  (setq css-indent-offset 2))
(add-hook 'css-mode-hook 'my:css-2-space-indent)
#+END_SRC

** TODO Emacs Lisp
** TODO Haskell
*** TODO Old Haskell config -- mostly/all relevant?
#+BEGIN_SRC emacs-lisp
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
  (add-hook 'haskell-mode-hook 'paredit-mode)
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)

  (defun my-key:haskell-indent-insert-equal ()
    (local-set-key (kbd "C-c =") 'haskell-indent-insert-equal))
  (add-hook 'haskell-mode-hook 'my-key:haskell-indent-insert-equal)

  (defun my-key:haskell-indent-insert-guard ()
    (local-set-key (kbd "C-c |") 'haskell-indent-insert-guard))
  (add-hook 'haskell-mode-hook 'my-key:haskell-indent-insert-guard)

  (defun my-key:haskell-indent-insert-otherwise ()
    (local-set-key (kbd "C-c o") 'haskell-indent-insert-otherwise))
  (add-hook 'haskell-mode-hook 'my-key:haskell-indent-insert-otherwise)

  (defun my-key:haskell-indent-insert-where ()
    (local-set-key (kbd "C-c w") 'haskell-indent-insert-where))
  (add-hook 'haskell-mode-hook 'my-key:haskell-indent-insert-where)

  (defun my-key:haskell-indent-align-guards-and-rhs ()
    (local-set-key (kbd "C-c a") 'haskell-indent-align-guards-and-rhs))
  ;; for some reason, C-c . wasn't working well, so C-c a it is!
  (add-hook 'haskell-mode-hook 'my-key:haskell-indent-align-guards-and-rhs)
#+END_SRC

*** Keybindings that still seem relevant
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'haskell-mode
    '(progn
       (define-key haskell-mode-map (kbd "C-c C-l")
         'haskell-process-load-or-reload)
       (define-key haskell-mode-map (kbd "C-c C-z")
         'haskell-interactive-switch)
       (define-key haskell-mode-map (kbd "C-c C-n C-t")
         'haskell-process-do-type)
       (define-key haskell-mode-map (kbd "C-c C-n C-i")
         'haskell-process-do-info)
       (define-key haskell-mode-map (kbd "C-c C-n C-c")
         'haskell-process-cabal-build)
       (define-key haskell-mode-map (kbd "C-c C-n c")
         'haskell-process-cabal)))
#+END_SRC

*** TODO Not sure about the ~haskell-cabal~ stuff??
#+BEGIN_SRC emacs-lisp
(eval-after-load 'haskell-cabal
  '(progn
     (define-key haskell-cabal-mode-map (kbd "C-c C-z")
       'haskell-interactive-switch)
     (define-key haskell-cabal-mode-map (kbd "C-c C-k")
       'haskell-interactive-mode-clear)
     (define-key haskell-cabal-mode-map (kbd "C-c C-c")
       'haskell-process-cabal-build)
     (define-key haskell-cabal-mode-map (kbd "C-c c")
       'haskell-process-cabal)))
#+END_SRC

*** TODO More ~cabal~ stuff??
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'haskell-mode
    '(define-key haskell-mode-map [f8] 'haskell-navigate-imports))
  (let ((my-cabal-path (expand-file-name "~/.cabal/bin")))
    (setenv "PATH" (concat my-cabal-path path-separator (getenv "PATH")))
    (add-to-list 'exec-path my-cabal-path))
#+END_SRC

*** ~lsp-haskell~
#+BEGIN_SRC emacs-lisp
  (add-hook 'haskell-mode-hook #'lsp)
  (add-hook 'haskell-literate-mode-hook #'lsp)
#+END_SRC

** Makefile
See http://www.emacswiki.org/emacs/MakefileMode

#+BEGIN_SRC emacs-lisp
  (require 'make-mode)

  (defconst makefile-nmake-statements
    `("!IF" "!ELSEIF" "!ELSE" "!ENDIF" "!MESSAGE" "!ERROR" "!INCLUDE"
      ,@makefile-statements)
    "List (or  )f keywords understood by nmake.")

  (defconst makefile-nmake-font-lock-keywords
    (makefile-make-font-lock-keywords
     makefile-var-use-regex
     makefile-nmake-statements
     t))

  (define-derived-mode makefile-nmake-mode makefile-mode "nMakefile"
    "An adapted `makefile-mode' that knows about nmake."
    (setq font-lock-defaults
          `(makefile-nmake-font-lock-keywords ,@(cdr font-lock-defaults))))
#+END_SRC

** Markdown
#+BEGIN_SRC emacs-lisp
(defun markdown-set-markdown-preview-key ()
  (local-set-key (kbd "C-c p") 'markdown-preview))
(add-hook 'markdown-mode-hook 'markdown-set-markdown-preview-key)
#+END_SRC

** TODO Org mode
*** TODO Symbol shortcuts
Consider finding new bindings for this---maybe something like =C-b <letter>=. The
=C-c <letter>= space is kinda crowded, and there are probably better
uses. Another option is to look into [[https://github.com/abo-abo/hydra][hydra]].

**** Section sign (§ -- =U+00A7=)
#+BEGIN_SRC emacs-lisp
  (defun org-insert-symbol-section-sign ()
    "Shortcut for inserting section sign (§)"
    (local-set-key (kbd "C-c S")
                   (lambda ()
                     (interactive)
                     (insert "§"))))
  (add-hook 'org-mode-hook 'org-insert-symbol-section-sign)
#+END_SRC

**** Left corner bracket (「 -- =U+300C=)
#+BEGIN_SRC emacs-lisp
  (defun org-insert-symbol-left-corner-bracket ()
    "Insert left corner bracket (「)"
    (local-set-key (kbd "C-c l")
                   (lambda ()
                     (interactive)
                     (insert "「"))))
  (add-hook 'org-mode-hook 'org-insert-symbol-left-corner-bracket)
#+END_SRC

**** Right corner bracket (」 -- =U+300D=)
#+BEGIN_SRC emacs-lisp
  (defun org-insert-symbol-right-corner-bracket ()
    "Insert left corner bracket (」)"
    (local-set-key (kbd "C-c r")
                   (lambda ()
                     (interactive)
                     (insert "「"))))
  (add-hook 'org-mode-hook 'org-insert-symbol-right-corner-bracket)
#+END_SRC

**** Left & right corner brackets (「」)
Insert brackets, then place cursor in between.

#+BEGIN_SRC emacs-lisp
  (defun org-insert-symbol-corner-brackets ()
    "Insert 「<cursor>」"
    (local-set-key (kbd "C-c e")
                   (lambda ()
                     (interactive)
                     (insert "「」")
                     ; need to move cursor back a space
                     (left-char))))
  (add-hook 'org-mode-hook 'org-insert-symbol-corner-brackets)
#+END_SRC

**** Bullet (• -- =U+2022=)
#+BEGIN_SRC emacs-lisp
  (defun org-insert-symbol-bullet ()
    "Insert a bullet (•) followed by a space"
    (local-set-key (kbd "C-c b")
                   (lambda ()
                     (interactive)
                     (insert "• "))))
  (add-hook 'text-mode-hook 'org-insert-symbol-bullet)
#+END_SRC

**** Open box (as visible space) (␣ -- =U+2423=)
#+BEGIN_SRC emacs-lisp
  (defun org-insert-symbol-open-box-for-visible-space ()
    "Insert open box character (␣) to represent a visible space (similar to
    LaTeX documenation)"
    (local-set-key (kbd "C-c b")
                   (lambda ()
                     (interactive)
                     (insert "␣"))))
  (add-hook 'text-mode-hook 'org-insert-symbol-open-box-for-visible-space)
#+END_SRC

**** Zero width space (=U+200B=)
#+BEGIN_SRC emacs-lisp
  (defun org-insert-symbol-zero-width-space ()
    "Insert zero-width space character (U+200B), which is sometimes needed in
    Org mode for escaping certain strings"
    (local-set-key (kbd "C-c z")
                   (lambda ()
                     (interactive)
                     (insert "​"))))
  (add-hook 'text-mode-hook 'org-insert-symbol-zero-width-space)
#+END_SRC

*** TODO TODO state colors -- move to custom?
See http://cjohansen.no/en/emacs/emacs_org_mode_todo_colors

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keyword-faces
        '(("TODO" . (:foreground "red" :weight bold))
          ("DONE" . (:foreground "green" :weight bold))
          ("IN-PROGRESS" . (:foreground "yellow" :weight bold))
          ("ON-HOLD" . (:foreground "yellow" :weight bold))))
#+END_SRC

There was some way of adding =IN-PROGRESS= as a todo state to individual =org=
files, and I should probably include that information here.

*** TODO Org ellipsis character (for folded headings) -- move to custom??
See http://endlessparentheses.com/changing-the-org-mode-ellipsis.html and
https://emacs.stackexchange.com/questions/44269/custom-org-ellipsis-is-underlined

(Originally tried ↴ (rightwards arrow with corner downwards =U+21B4=) but didn't
like it.)

Now using ▼ (black down-pointing triangle =U+25BC=)

#+BEGIN_SRC emacs-lisp
(setq org-ellipsis " ▼")
#+END_SRC

*** TODO Org-babel
**** TODO No eval on =C-c C-c= -- move to custom??
I think I began using this setting because I would mindlessly press =C-c C-c= out
of habit from using it for ~TeX-command-master~ in AUCTeX.

#+BEGIN_SRC emacs-lisp
(setq org-babel-no-eval-on-ctrl-c-ctrl-c t)
#+END_SRC

**** Load languages for syntax highlighting
See
http://stackoverflow.com/questions/10642888/syntax-highlighting-within-begin-src-block-in-emacs-orgmode-not-working
and
http://superuser.com/questions/429981/org-mode-is-there-a-way-i-can-make-emacs-treat-a-region-to-be-of-a-given-mode

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((shell . t)
                                 (python . t)
                                 (clojure . t)
                                 (C . t) ;; note that C is capitalized
                                 (emacs-lisp . t)
                                 (js . t)
                                 (latex . t)
                                 (gnuplot . t)
                                 (haskell . t)
                                 (org . t)))
  (setq org-src-fontify-natively t)
#+END_SRC

*** Scale image width
#+BEGIN_SRC emacs-lisp
  (defun my:insert-attr-html-width (arg)
    (insert (format"#+ATTR_HTML: width=\"%Spx\"" arg)))
  (setq my:default-attr-html-width 600)
  (defun my:org-html-image-width (arg)
    "set the ATTR_HTML width of an image to arg or default"
    (interactive "P")
     (if arg
         (my:insert-attr-html-width arg)
       (my:insert-attr-html-width my:default-attr-html-width)))
  (defun hookify:my:org-html-image-width ()
    (local-set-key (kbd "C-c w") 'my:org-html-image-width))
  (add-hook 'org-mode-hook 'hookify:my:org-html-image-width)
#+END_SRC

*** Fancy HTML5 export
Note: didn't work in Emacs 7.9 but began working with upgrade to 8.2.10.

#+BEGIN_SRC emacs-lisp
  (setq org-html-doctype "html5")
  (setq org-html-html5-fancy t)
#+END_SRC

*** TODO Allow alphabetical lists -- move to custom?
See http://comments.gmane.org/gmane.emacs.orgmode/72865 and
http://orgmode.org/manual/Plain-lists.html

#+BEGIN_SRC emacs-lisp
  (setq org-list-allow-alphabetical t)
#+END_SRC

*** TODO Org extra YAS mode -- improve this?
I think this is something I did ages ago because it's ugly enough that I doubt
anyone else is responsible

#+BEGIN_SRC emacs-lisp
  (define-minor-mode org-extra-yas-mode
    "org-extra-yas-mode adds snippets in
     such a way that it's unlikely to
     conflict with other modes"
    :init-value nil
    :lighter " OXY")

  ;; wait, this doesn't make sense
  ;; wait, actually it does -- it means that yasnippet activates this mode when
  ;; it's activated (but you probably only want it active when Org mode is
  ;; active
  (add-hook 'org-extra-yas-mode-hook
            '(lambda ()
               (yas-activate-extra-mode 'org-extra-yas-mode)
               (yas-minor-mode 1)))

  (defun org-extra-yas-mode-activation-kludge ()
    (org-extra-yas-mode 1))
  (add-hook 'org-mode-hook 'org-extra-yas-mode-activation-kludge)
  ;; ok, that works, as long as you have the hook thing above working
#+END_SRC

*** TODO Disable sub/superscripts without curly braces -- move to custom?
#+BEGIN_SRC emacs-lisp
  (setq org-use-sub-superscripts '{})
#+END_SRC

You need the following for HTML (and LaTeX?) export to work as you'd expect:

#+BEGIN_SRC emacs-lisp
  (setq org-export-with-sub-superscripts '{})
#+END_SRC

*** TODO Org-roam
See https://youtu.be/M5wNvN0jISU (A Walkthrough of Org-Roam | Installation,
Uses, and Benefits (Spacemacs) -- Abraham Peters [2020-09-10]) for more info.
Also, listen to Ethan, and start using this!!

*** Org-ebib
#+BEGIN_SRC emacs-lisp
  (require 'org-ebib)
#+END_SRC

*** Toggle ~:eval no~ on source block with =C-c t=
Stolen from stackexchange user [[https://emacs.stackexchange.com/users/8486/gjstein][GJStein]]; see
https://emacs.stackexchange.com/a/13897/9013

#+BEGIN_SRC emacs-lisp
  (defun org-toggle-src-eval-no ()
    "Will toggle ':eval no' on the src block begin line"

    (defun in-src-block-p ()
      "Returns t when the point is inside a source code block"
      (string= "src" (org-in-block-p '("src"))))

    (defun beginning-src ()
      "Find the beginning of the src block"
      (let ((case-fold-search t)) (search-backward "#+BEGIN_SRC")))

    (defun toggle-eval-no ()
      "Handles the toggling of ' :eval no'"
       (save-excursion
        (end-of-line)
        (let ((case-fold-search t)) (search-backward "#+BEGIN_SRC")
         (if (search-forward " :eval no" (line-end-position) "f")
             (replace-match "")
           (insert " :eval no")))))

    (if (in-src-block-p) (toggle-eval-no)))

  (defun add-org-toggle-src-key ()
    (local-set-key (kbd "C-c t")
                   (lambda () (interactive) (org-toggle-src-eval-no))))

  (add-hook 'org-mode-hook 'add-org-toggle-src-key)
#+END_SRC

** TODO Python
*** TODO Require ~python-mode~, etc
Basic configuration that's been in my =.emacs= since the beginning of time
(certainly before I knew about package management). I suspect a lot of it is no
longer relevant, so those parts will be commented out. If I need them again,
they'll be easy to find.

#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'load-path "~/.emacs.d/plugins/python-mode/")
  ;; (setq py-install-directory "~/.emacs.d/plugins/python-mode/")
  (require 'python-mode)

  ;; (setq auto-mode-alist (cons '("\\.py$" . python-mode) auto-mode-alist))
  ;; (setq interpreter-mode-alist (cons '("python" . python-mode)
  ;;                                       interpreter-mode-alist))
  ;; (autoload 'python-mode "python-mode" "Python editing mode." t)
  ;; (global-font-lock-mode t)
  ;; (font-lock-mode +1)
#+END_SRC

I'm not even really sure what the ~global-font-lock-mode~ and ~font-lock-mode~
settings are doing in here. I think they ought to 

*** Jupyter: EIN (Emacs IPython Notebook)
See https://millejoh.github.io/emacs-ipython-notebook/ for more info.

#+BEGIN_SRC emacs-lisp
  (require 'ein)
  (require 'ein-notebook)
  (setq ein:worksheet-enable-undo t)
  (setq ein:use-company-backend t)
#+END_SRC

*** Flycheck
**** General
This appeared after ~flycheck-define-checker~ in legacy =.emacs=, but it seems like
I can add it first.

#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'flycheck-mode)
#+END_SRC

**** Silence import warnings
See https://www.reddit.com/r/spacemacs/comments/8ifrzn/how_to_get_mypy_working/

#+BEGIN_SRC emacs-lisp
  (flycheck-define-checker
      python-mypy ""
      :command ("mypy"
                "--ignore-missing-imports"
                "--python-version" "3.7"
                source-original)
      :error-patterns ((error line-start
                              (file-name) ":" line
                              ": error:" (message)
                              line-end))
      :modes python-mode)
  (add-to-list 'flycheck-checkers 'python-mypy t)
  (flycheck-add-next-checker 'python-pylint 'python-mypy t)
#+END_SRC

** TODO Rust
#+BEGIN_SRC emacs-lisp
  (require 'toml-mode)
  (require 'rust-mode)
#+END_SRC

*** Flycheck
See https://github.com/flycheck/flycheck-rust

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'rust-mode
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC

*** TODO Electric pair -- move this for other C-style languages??
Creates matching delimiters, e.g. ={}=; see
https://www.emacswiki.org/emacs/ElectricPair

#+BEGIN_SRC emacs-lisp
  (add-hook 'rust-mode-hook 'electric-pair-mode)
#+END_SRC

** SQL
*** Upcase SQL keywords
#+BEGIN_SRC emacs-lisp
  (add-hook 'sql-mode-hook #'sqlup-mode)
  (add-hook 'sql-interactive-mode-hook #'sqlup-mode)
#+END_SRC

*** SQL indent
#+BEGIN_SRC emacs-lisp
  (add-hook 'sql-mode-hook #'slqind-minor-mode)
#+END_SRC

** YAML
*** Cocktail recipes minor mode
#+BEGIN_SRC emacs-lisp
  (define-minor-mode yaml-cocktail-mode
    "cocktail-mode provides a minor mode for
     yasnippet to hook onto in order to make
     cocktail creation easier."
    :init-value nil
    :lighter " yacm")

  (add-hook 'yaml-cocktail-mode-hook
            '(lambda () (yas-activate-extra-mode 'yaml-cocktail-mode)))

  (add-hook 'yaml-cocktail-mode-hook 'auto-fill-mode)
  (add-hook 'yaml-cocktail-mode-hook 'yas-minor-mode)
  (add-hook 'yaml-cocktail-mode-hook 'yaml-mode)

  (add-to-list 'auto-mode-alist '("\\.ctl\\.yml\\'" . yaml-cocktail-mode))
#+END_SRC

* Settings moved to =emacs-custom=
There are probably a few things that deserve to be moved rather than hard-coded
into the init file.

* Solutions
** Fix =PATH= variable
*** Problem
=iTerm2.app= with =bash-5.0.18(1)= in =/usr/local/bin/bash=:

#+BEGIN_SRC sh
  $ echo $PATH
/Users/matlock/.cabal/bin:/Users/matlock/.ghcup/bin:/Users/matlock/.cargo/bin:/Users/matlock/.pyenv/shims:/usr/local/opt/openssl@1.1/bin:/usr/local/sbin:/opt/local/bin:/opt/local/sbin:/Users/matlock/.nexustools:/Users/matlock/Library/Haskell/bin:/usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/TeX/texbin:/opt/X11/bin
#+END_SRC

=eshell=:

#+BEGIN_SRC eshell
$ echo $PATH
/Users/matlock/.cabal/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/Emacs.app/Contents/MacOS/bin-x86_64-10_14:/Applications/Emacs.app/Contents/MacOS/libexec-x86_64-10_14
#+END_SRC

=ansi-term= with =bash-5.0.18(1)= in =/usr/local/bin/bash=:

#+BEGIN_SRC sh
$ echo $PATH
/Users/matlock/.cabal/bin:/Users/matlock/.ghcup/bin:/Users/matlock/.cabal/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/Emacs.app/Contents/MacOS/bin-x86_64-10_14:/Applications/Emacs.app/Contents/MacOS/libexec-x86_64-10_14
#+END_SRC

I bet this has something to do with Emacs starting from somewhere in
=/Applications/Emacs.app/=, so =PWD= is set to there, therefore my =~/.bash_profile=
and =~/.bashrc= aren't =source=​d, leading to the issue with =PATH=.

The solution is probably to set =CWD= to =/Users/matlock= and then set =PATH= based
on that (possibly by =source=​ing =~/.bash_profile= and =~/.bashrc=). You'll need to
find out just when and how =PATH= is set. I wouldn't be surprised if this happens
to fix the =aspell= problem given that ~$ which aspell~ produces nothing in =eshell=,
but in =iTerm.app=, ~$ which aspell~ correctly reports =/usr/local/bin/aspell=.

Note that
#+BEGIN_SRC emacs-lisp :eval no
  (message (getenv "PWD"))
#+END_SRC

#+RESULTS:
produced no output. :thinking:

*** Solution
Use ~exec-path-from-shell~ in OS X. Setting ~default-directory~ also made things a
little nicer.

** Flyspell can't find =aspell=
*** Problem
From =*Messages*= on startup:

#+BEGIN_SRC fundamental
  Loading /Users/matlock/config/emacs/README.el (source)...
  Loading /Users/matlock/config/emacs/custom.el (source)...done
  [yas] Prepared just-in-time loading of snippets successfully. [2 times]
  Loading /Users/matlock/config/emacs/README.el (source)...done
  Loaded /Users/matlock/config/emacs/README.el
  Error enabling Flyspell mode:
  (Searching for program No such file or directory aspell)
#+END_SRC

*** Solution
Fixing ~exec-path~​/​=PATH= environment variables seemed to do the trick.
