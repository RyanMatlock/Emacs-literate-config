#+title: Literate Emacs configuration with Org mode
#+subtitle: Extras
#+author: Ryan Matlock

* Org mode extensions
** Org-roam
*** Main configuration
Configuration taken from [[https://systemcrafters.cc/build-a-second-brain-in-emacs/getting-started-with-org-roam/#inserting-node-links-using-completions][System Crafters: Build a Second Brain in Emacs with
Org Roam | Inserting node links using completions]].

Update: use Org Roam for journalling: [[https://youtu.be/3-sLBaJAtew][Org Roam: The Best Way to Keep a Journal
in Emacs  | System Crafters | YouTube]] ([[https://systemcrafters.net/build-a-second-brain-in-emacs/keep-a-journal/][show notes | System Crafters]])

#+begin_src emacs-lisp
  (use-package org-roam
    :straight t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (let* ((roam-dir "~/Dropbox/org/roam")
           (Full-roam-dir (file-truename roam-dir)))
      (cond ((file-directory-p full-roam-dir)
             (setq org-roam-directory full-roam-dir))
            (t (warn (format "Org roam directory not found at %s." roam-dir)))))
    (setq org-roam-dailies-directory "journal")
    (org-roam-completion-everywhere t)
    (org-roam-dailies-capture-templates
     '(("d" "default" entry "* %?"
        :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d (%A)>\n"))))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies)
    (org-roam-db-autosync-mode))
#+end_src

*** Capture templates
Ideas for capture templates: [[https://jethrokuan.github.io/org-roam-guide/][How I Take Notes with Org-roam | jethrokuan]].

I think I'd like to have my directory structure set up as

#+begin_example
  .
  â”œâ”€â”€ ideas
  â”œâ”€â”€ journal
  â”œâ”€â”€ observations
  â”œâ”€â”€ references
  â”œâ”€â”€ synthesis
  â”œâ”€â”€ biblio.bib
  â””â”€â”€ inbox.org
#+end_example

where
- ~ideas~ contains my own novel ideas; these may link to ~observations~ and
  ~references~;
- ~journal~ is a daily journal, which may link to ~ideas~, ~observations~,
  ~references~, and ~synthesis~
- ~observations~ contains concepts I've observed myself (e.g. helpful tips I've
  come up with through experience); these may be atonic or point to
  ~references~;
- ~references~ contains concepts I've found in books, articles, videos, etc.;
  these will link back to their source;
- ~synthesis~ takes concepts from ~ideas~, ~observations~, and ~references~ and
  packages them into a larger whole; and
- ~inbox.org~ contains unprocessed thoughts.

**** COMMENT suggested way of doing it
#+begin_src emacs-lisp :eval no
  (setq org-roam-capture-templates
        '(("i" "ideas" plain "%?"
           :if-new (file+head "ideas/${slug}.org"
                              "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)
          ("r" "references" plain "%?"
           :if-new
           (file+head "references/${slug}.org"
                      "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)
          ("o" "observations" plain "%?"
           :if-new
           (file+head "observations/${slug}.org"
                      "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)
          ("s" "synthesis" plain "%?"
           :if-new
           (file+head "synthesis/${slug}.org"
                      "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)))
#+end_src

**** +wrong+ +slightly+ programmatic/DRY way to do it
#+begin_src emacs-lisp
  (defun org-roam--create-basic-capture-template (name &optional key)
    "Create a basic capture template with NAME and shortcut KEY (default: first
  letter of NAME)."
    (let ((key (or key (string (elt name 0))))
          (default-title "#+title: ${title}\n")
          (slug "${slug}.org"))
      (list
       key name
       'plain "%?"
       :if-new (list 'file+head (concat (file-name-as-directory name)
                                        slug)
                     default-title)
       :immediate-finish t
       :unnarrowed t)))

  (setq org-roam-capture-templates
        (mapcar #'org-roam--create-basic-capture-template
                '("ideas" "references" "observations" "synthesis")))
#+end_src

**** Display property types
Stealing jethrokuan's method for displaying property types and display the
type for each node:

#+begin_src emacs-lisp
  (cl-defmethod org-roam-node-type ((node org-roam-node))
    "Return the TYPE of NODE."
    (condition-case nil
        (file-name-nondirectory
         (directory-file-name
          (file-name-directory
           (file-relative-name (org-roam-node-file node) org-roam-directory))))
      (error "")))

  (setq org-roam-node-display-template
        (concat "${type:15} ${title:*} "
                (propertize "${tags:10}" 'face 'org-tag)))
#+end_src

** Org Tree Slide
[[https://github.com/takaxp/org-tree-slide][Org Tree Slide]] makes for quick and easy presentations with your Org mode files
(similar to [[https://github.com/yjwen/org-reveal][org-reveal]] + [[https://revealjs.com][reveal.js]], but lighter weight).

* Major modes
** Markdown
For when you can't use Org mode ðŸ™ƒ; see [[https://jblevins.org/projects/markdown-mode/][markdown-mode]].

#+begin_src emacs-lisp
  (use-package markdown-mode
    :straight t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+end_src

*** ~pandoc-mode~
[[http://joostkremers.github.io/pandoc-mode/][pandoc-mode]] makes it easier to interface with ~pandoc~, which is especially
useful when editing Markdown files (Org mode has a lot of this functionality
built in).

#+begin_src emacs-lisp
  (use-package pandoc-mode
    :straight t
    :hook ((markdown-mode . pandoc-mode)))
#+end_src

** JSON

#+begin_src emacs-lisp
  (use-package json-mode
    :straight t)
#+end_src

* Minor modes

** COMMENT ~yasnippet~
[[https://github.com/joaotavora/yasnippet][yasnippet]] was something I used extensively back in the day for YAML templates
and maybe some LaTeX stuff. It's probably still pretty useful.

#+begin_src emacs-lisp
  (use-package yasnippet
    :straight t
    :config (yas-reload-all)
    :hook ((prog-mode . yas-minor-mode))
    :bind (:map yas-minor-mode-map
                ("M-TAB" . yas-expand)))
#+end_src

Not really sure about ~M-TAB~ for =yas-expand=, but it was in my old config :shrug:

Still need to set snippet directory; see [[https://github.com/joaotavora/yasnippet#where-are-the-snippets][yasnippet | Where are the snippets?]]

** TempEL
[[https://github.com/minad/tempel][TempEl]] is a modern Emacs templating library.

Configuration stolen from the README.

#+begin_src emacs-lisp
  (use-package tempel
    :straight t
    ;; Require trigger prefix before template name when completing.
    ;; :custom
    ;; (tempel-trigger-prefix "<")
    :custom
    (tempel-path (expand-file-name "*.eld" "~/config/emacs/templates"))

    :bind (("M-<tab>" . tempel-complete) ;; Alternative tempel-expand
           ("M-*" . tempel-insert))

    :init

    ;; Setup completion at point
    (defun tempel-setup-capf ()
      ;; Add the Tempel Capf to `completion-at-point-functions'.
      ;; `tempel-expand' only triggers on exact matches. Alternatively use
      ;; `tempel-complete' if you want to see all matches, but then you
      ;; should also configure `tempel-trigger-prefix', such that Tempel
      ;; does not trigger too often when you don't expect it. NOTE: We add
      ;; `tempel-expand' *before* the main programming mode Capf, such
      ;; that it will be tried first.
      (setq-local completion-at-point-functions
                  (cons #'tempel-expand
                        completion-at-point-functions)))

    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf)

    ;; Optionally make the Tempel templates available to Abbrev,
    ;; either locally or globally. `expand-abbrev' is bound to C-x '.
    ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
    ;; (global-tempel-abbrev-mode)
    )
#+end_src

* Miscellaneous

** Exercism
[[https://exercism.org/tracks][Exercism]] seems like a neat way to learn concepts from dozens of programming
languages.

*** Emacs Lisp

**** Run test suite
+Didn't test this before commit; not working for some reason, and the test suite
isn't working as expected using ~M-x eval-buffer~ in the test buffer either.+

+It looks like you need to+ Ok, for some reason it's working fine now, but you
should read up on [[https://www.gnu.org/software/emacs/manual/html_mono/ert.html][ERT: Emacs Lisp Regression Testing]] anyway.

#+begin_src emacs-lisp
  (defun exercism-eval-and-run-all-tests-in-buffer ()
    "Deletes all loaded tests from the runtime, evaluates the current buffer and runs all loaded tests with ert."
    (interactive)
    (ert-delete-all-tests)
    (eval-buffer)
    (ert 't))
#+end_src

* Sanity check
Check that bottom of this file was reached and evaluated successfully.

#+begin_src emacs-lisp
  (message "Bottom of extras.org reached and evaluated.")
#+end_src
