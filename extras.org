#+title: Literate Emacs configuration with Org mode
#+subtitle: Extras
#+author: Ryan Matlock

* Org mode extensions
** Org-roam
*** Main configuration
Configuration taken from [[https://systemcrafters.cc/build-a-second-brain-in-emacs/getting-started-with-org-roam/#inserting-node-links-using-completions][System Crafters: Build a Second Brain in Emacs with
Org Roam | Inserting node links using completions]].

Update: use Org Roam for journalling: [[https://youtu.be/3-sLBaJAtew][Org Roam: The Best Way to Keep a Journal
in Emacs  | System Crafters | YouTube]] ([[https://systemcrafters.net/build-a-second-brain-in-emacs/keep-a-journal/][show notes | System Crafters]])

#+begin_src emacs-lisp
  (use-package org-roam
    :straight t
    :init
    (setq org-roam-v2-ack t)


    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (let* ((roam-dir "~/Dropbox/org/roam")
           (full-roam-dir (file-truename roam-dir)))
      (cond ((file-directory-p full-roam-dir)
             (setq org-roam-directory full-roam-dir))
            (t (warn (format "Org roam directory not found at %s." roam-dir)))))
    (require 'org-roam-dailies)
    (setq org-roam-dailies-directory "journal")
    (setq org-roam-completion-everywhere t)
    (setq org-roam-dailies-capture-templates
          '(("d" "default" entry "* %?"
             :if-new (file+head "%<%Y-%m-%d>.org"
                                "#+title: %<%Y-%m-%d (%A)>\n"))))
    (org-roam-db-autosync-mode))
#+end_src

*** Capture templates
Ideas for capture templates: [[https://jethrokuan.github.io/org-roam-guide/][How I Take Notes with Org-roam | jethrokuan]].

I think I'd like to have my directory structure set up as

#+begin_example
  .
  â”œâ”€â”€ journal
  â”œâ”€â”€ main
  â”œâ”€â”€ references
  â”œâ”€â”€ synthesis
  â”œâ”€â”€ biblio.bib
  â””â”€â”€ inbox.org
#+end_example

where
- ~main~ contains my own observations as well as groupings of ideas from
  ~references~;
- ~journal~ is a daily journal, which may link to ~main~, ~references~, and
  ~synthesis~
- ~references~ contains concepts I've found in books, articles, videos, etc.;
  these will link back to their source;
- ~synthesis~ takes concepts from ~main~, and ~references~ and packages them
  into a larger whole; and
- ~inbox.org~ contains unprocessed thoughts.

**** COMMENT suggested way of doing it
#+begin_src emacs-lisp :eval no
  (setq org-roam-capture-templates
        '(("i" "ideas" plain "%?"
           :if-new (file+head "ideas/${slug}.org"
                              "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)
          ("r" "references" plain "%?"
           :if-new
           (file+head "references/${slug}.org"
                      "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)
          ("o" "observations" plain "%?"
           :if-new
           (file+head "observations/${slug}.org"
                      "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)
          ("s" "synthesis" plain "%?"
           :if-new
           (file+head "synthesis/${slug}.org"
                      "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)))
#+end_src

**** +wrong+ +slightly+ programmatic/DRY way to do it
#+begin_src emacs-lisp
  (defun org-roam--create-basic-capture-template (name &optional key)
    "Create a basic capture template with NAME and shortcut KEY (default: first
  letter of NAME)."
    (let ((key (or key (string (elt name 0))))
          (default-title "#+title: ${title}\n")
          (slug "${slug}.org"))
      (list
       key name
       'plain "%?"
       :if-new (list 'file+head (concat (file-name-as-directory name)
                                        slug)
                     default-title)
       :immediate-finish t
       :unnarrowed t)))

  (setq org-roam-capture-templates
        (mapcar #'org-roam--create-basic-capture-template
                '("main" "references" "synthesis")))
#+end_src

**** Display property types
Stealing jethrokuan's method for displaying property types and display the
type for each node:

Edit: needed to use [[https://github.com/jethrokuan/org-roam-guide/issues/2#issuecomment-1240626498][spjuhel's fix]] for ~error: Unknown specializer
org-roam-node~ warning.

#+begin_src emacs-lisp
  (with-eval-after-load 'org-roam
    (cl-defmethod org-roam-node-type ((node org-roam-node))
      "Return the TYPE of NODE."
      (condition-case nil
          (file-name-nondirectory
           (directory-file-name
            (file-name-directory
             (file-relative-name (org-roam-node-file node)
                                 org-roam-directory))))
        (error ""))))

  (setq org-roam-node-display-template
        (concat "${type:15} ${title:*} "
                (propertize "${tags:10}" 'face 'org-tag)))
#+end_src

** Org Tree Slide
[[https://github.com/takaxp/org-tree-slide][Org Tree Slide]] makes for quick and easy presentations with your Org mode files
(similar to [[https://github.com/yjwen/org-reveal][org-reveal]] + [[https://revealjs.com][reveal.js]], but lighter weight).

* Major modes
** Markdown +-- configured under ~lsp-bridge~+
For when you can't use Org mode ðŸ™ƒ; see [[https://jblevins.org/projects/markdown-mode/][markdown-mode]].

#+begin_src emacs-lisp
  (use-package markdown-mode
    :straight t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown")
    :bind (:map markdown-mode-map
           ("C-c C-e" . markdown-do)))
#+end_src

*** ~pandoc-mode~
[[http://joostkremers.github.io/pandoc-mode/][pandoc-mode]] makes it easier to interface with ~pandoc~, which is especially
useful when editing Markdown files (Org mode has a lot of this functionality
built in).

#+begin_src emacs-lisp
  (use-package pandoc-mode
    :straight t
    :hook ((markdown-mode . pandoc-mode)))
#+end_src


** JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :straight t)
#+end_src

** PARTIAL =vterm=
[[https://github.com/akermu/emacs-libvterm][Emacs-libvterm]] is C library-based terminal emulator.

#+begin_src emacs-lisp
  (cond ((executable-find "vterm-ctrl")
         (use-package vterm
           :straight t
           :config
           (setq vterm-shell shell-file-name)))
        (t (message "vterm requirements not installed on this device.")))
#+end_src

Note that the documentation recommends some [[https://github.com/akermu/emacs-libvterm#shell-side-configuration][shell-side configuration]] to get the
most out of ~vterm~, but I haven't done this.

#+begin_quote
Tip: you don't need ~ansi-term~ anymore because ~vterm~ supports the equivalent of
switching between ~line-mode~ and ~char-mode~: ~C-c c-t~ toggles =vterm-copy-mode=.
#+end_quote

Just noticed this on my MacBook Pro:

#+begin_src shell :eval no
  $ echo $SHELL
  /bin/zsh
  $ zsh --version
  zsh 5.8.1 (x86_64-apple-darwin22.0)
#+end_src

Probably time to +review something like [[https://systemcrafters.net/emacs-from-scratch/learn-to-love-the-terminal-modes/][Learn to Love the Terminal Modes |System
Crafters]].+ read the Emacs libvterm documentation.

Ok, I explicitly set =vterm-shell=, and now I'm getting this behavior:

#+begin_src shell :eval no
  $ echo $SHELL
  /bin/zsh
  $ echo $0
  /usr/local/bin/bash
  $ echo $ZSH_NAME

  $ ps
    PID TTY           TIME CMD
  30442 ttys000    0:00.08 -bash
  44159 ttys001    0:00.02 /usr/local/bin/bash
  94406 ttys003    0:00.01 -bash
  68604 ttys005    0:00.02 -bash
#+end_src

According to [[https://stackoverflow.com/a/3327022][How to determine the current interactive shell that I'm in
(command-line) | stackoverflow]], this suggests I'm using the Homebrew ~bash~ I
expect, so I wonder why =$SHELL= is still set to ~/bin/zsh~. This also holds for
~shell~ and ~term~.

In ~iTerm2~, I get this:

#+begin_src shell :eval no
  $ echo $SHELL
  /usr/local/bin/bash
#+end_src

#+begin_quote
When starting ~shell-mode~ with ~M-x shell~, Emacs starts the shell you want
(usually the same as your login shell, but this can be changed if you really
want to) and then sources a file, if it exists, based on the shell's name. The
places it looks are

1. ~~/.emacs_$SHELLNAME~
2. ~~/.emacs.d/init_${SHELLNAME}.sh~

-- source: [[https://stackoverflow.com/a/54951844][Setting TERM variable for Emacs shell | stackoverflow]]
#+end_quote

...so maybe I should change my login shell; see [[https://superuser.com/questions/48226/how-do-i-set-my-shell-in-mac-os-x][How do I set my shell in Mac OS
X? | superuser.stackexchange]].

I reset my shell with

#+begin_src shell
  $ sudo chsh -s /usr/local/bin/bash matlock
#+end_src

which I can confirm worked because

#+begin_src shell
  $ dscacheutil -q user -a name matlock
  name: matlock
  password: ********
  uid: xxx
  gid: xx
  dir: /Users/matlock
  shell: /usr/local/bin/bash
  gecos: Ryan Matlock
#+end_src

(See [[https://apple.stackexchange.com/a/29877][How can I list all user accounts in the terminal? | apple.stackexchange]];
note that ~/etc/passwd~ doesn't contain user information the way it does on
Linux.) It may be that a system reboot will fix this.

Note: I'm definitely the user running Emacs:

#+begin_src shell
  $ ps aux | ack -i emacs
  matlock          45403   3.0  0.3 35870716 172160   ??  S    12:54AM   0:22.28
  /Applications/Emacs.app/Contents/MacOS/Emacs-x86_64-10_14
#+end_src

How =$SHELL= is set in ~bash~:

#+begin_quote
=SHELL=

This environment variable expands to the full pathname to the shell. If it is
not set when the shell starts, Bash assigns to it the full pathname of the
current userâ€™s login shell.

-- [[https://www.gnu.org/software/bash/manual/html_node/Bash-Variables.html#index-SHELL][Bash Variables Â§ =SHELL= | GNU Bash Manual]]
#+end_quote

* Minor modes
** TempEL
[[https://github.com/minad/tempel][TempEl]] is a modern Emacs templating library.

Configuration stolen from the README.

#+begin_src emacs-lisp
  (use-package tempel
    :straight t
    ;; Require trigger prefix before template name when completing.
    ;; :custom
    ;; (tempel-trigger-prefix "<")
    :custom
    (tempel-path (expand-file-name "*.eld" "~/config/emacs/templates"))

    :bind (("M-<tab>" . tempel-complete) ;; Alternative tempel-expand
           ("M-*" . tempel-insert))

    :init

    ;; Setup completion at point
    (defun tempel-setup-capf ()
      ;; Add the Tempel Capf to `completion-at-point-functions'.
      ;; `tempel-expand' only triggers on exact matches. Alternatively use
      ;; `tempel-complete' if you want to see all matches, but then you
      ;; should also configure `tempel-trigger-prefix', such that Tempel
      ;; does not trigger too often when you don't expect it. NOTE: We add
      ;; `tempel-expand' *before* the main programming mode Capf, such
      ;; that it will be tried first.
      (setq-local completion-at-point-functions
                  (cons #'tempel-expand
                        completion-at-point-functions)))

    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf)

    ;; Optionally make the Tempel templates available to Abbrev,
    ;; either locally or globally. `expand-abbrev' is bound to C-x '.
    ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
    ;; (global-tempel-abbrev-mode)
    )
#+end_src

* Miscellaneous

** Exercism
[[https://exercism.org/tracks][Exercism]] seems like a neat way to learn concepts from dozens of programming
languages.

*** Emacs Lisp

**** Run test suite
+Didn't test this before commit; not working for some reason, and the test suite
isn't working as expected using ~M-x eval-buffer~ in the test buffer either.+

+It looks like you need to+ Ok, for some reason it's working fine now, but you
should read up on [[https://www.gnu.org/software/emacs/manual/html_mono/ert.html][ERT: Emacs Lisp Regression Testing]] anyway.

#+begin_src emacs-lisp
  (defun exercism-eval-and-run-all-tests-in-buffer ()
    "Deletes all loaded tests from the runtime, evaluates the current buffer and runs all loaded tests with ert."
    (interactive)
    (ert-delete-all-tests)
    (eval-buffer)
    (ert 't))
#+end_src

* Sanity check
Check that bottom of this file was reached and evaluated successfully.

#+begin_src emacs-lisp
  (message "Bottom of extras.org reached and evaluated.")
#+end_src
