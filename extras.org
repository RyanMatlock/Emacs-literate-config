#+title: Literate Emacs configuration with Org mode
#+subtitle: Extras
#+author: Ryan Matlock

* Org mode extensions
** Org-roam
*** Main configuration
Configuration taken from [[https://systemcrafters.cc/build-a-second-brain-in-emacs/getting-started-with-org-roam/#inserting-node-links-using-completions][System Crafters: Build a Second Brain in Emacs with
Org Roam | Inserting node links using completions]].

Update: use Org Roam for journalling: [[https://youtu.be/3-sLBaJAtew][Org Roam: The Best Way to Keep a Journal
in Emacs  | System Crafters | YouTube]] ([[https://systemcrafters.net/build-a-second-brain-in-emacs/keep-a-journal/][show notes | System Crafters]])

#+begin_src emacs-lisp
  (use-package org-roam
    :straight t
    :init
    (setq org-roam-v2-ack t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (let* ((hostname (replace-regexp-in-string "\\.local$" "" (system-name)))
           (roam-dir "~/Dropbox/org/roam")
           (db-dir (file-name-concat roam-dir "db"))
           (db-file
            (file-truename
             (file-name-concat db-dir (concat "org-roam." hostname ".db"))))
           (full-roam-dir (file-truename roam-dir)))
      (cond ((file-directory-p full-roam-dir)
             (setq org-roam-directory full-roam-dir))
            (t (warn (format "Org roam directory not found at %s." roam-dir))))
      (unless (file-directory-p db-dir) (make-directory db-dir))
      (setq org-roam-db-location db-file)
      (unless (file-exists-p db-file) (org-roam-db-sync)))
    (require 'org-roam-dailies)
    (setq org-roam-dailies-directory "journal")
    (setq org-roam-completion-everywhere t)
    (setq org-roam-dailies-capture-templates
          '(("d" "default" entry "* %?"
             :if-new (file+head "%<%Y-%m-%d>.org"
                                "#+title: %<%Y-%m-%d (%A)>\n"))))
    (org-roam-db-autosync-mode))
#+end_src

I think I know what it's useful to build the org-roam databases on a per-device
basis: since you're storing everything on Dropbox, some of the files may not be
available locally, and if you try re-build the database with missing files,
it'll hang. This way every device can build a database around what it has
(although you still get the most utility out of having all the files locally
available).

*** Capture templates
Ideas for capture templates: [[https://jethrokuan.github.io/org-roam-guide/][How I Take Notes with Org-roam | jethrokuan]].

I think I'd like to have my directory structure set up as

#+begin_example
  .
  ├── journal
  ├── main
  ├── references
  ├── synthesis
  ├── biblio.bib
  └── inbox.org
#+end_example

where
- ~main~ contains my own observations as well as groupings of ideas from
  ~references~;
- ~journal~ is a daily journal, which may link to ~main~, ~references~, and
  ~synthesis~
- ~references~ contains concepts I've found in books, articles, videos, etc.;
  these will link back to their source;
- ~synthesis~ takes concepts from ~main~, and ~references~ and packages them
  into a larger whole; and
- ~inbox.org~ contains unprocessed thoughts.

**** COMMENT suggested way of doing it

#+begin_src emacs-lisp :eval no
  (setq org-roam-capture-templates
        '(("i" "ideas" plain "%?"
           :if-new (file+head "ideas/${slug}.org"
                              "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)
          ("r" "references" plain "%?"
           :if-new
           (file+head "references/${slug}.org"
                      "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)
          ("o" "observations" plain "%?"
           :if-new
           (file+head "observations/${slug}.org"
                      "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)
          ("s" "synthesis" plain "%?"
           :if-new
           (file+head "synthesis/${slug}.org"
                      "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)))
#+end_src

**** COMMENT +wrong+ +slightly+ (old) programmatic/DRY way to do it

#+begin_src emacs-lisp :eval no
  (defun org-roam--create-basic-capture-template (name &optional key)
    "Create a basic capture template with NAME and shortcut KEY (default: first
  letter of NAME)."
    (let ((key (or key (string (elt name 0))))
          (default-title "#+title: ${title}\n")
          (slug "${slug}.org"))
      (list
       key name 'plain "%?"
       :if-new (list 'file+head (concat (file-name-as-directory name)
                                        slug)
                     default-title)
       :immediate-finish t
       :unnarrowed t)))

  (setq org-roam-capture-templates
        (let (;; home row keys
              ;; (categories '(("main" "a") ("references" "f") ("synthesis")))
              ;; natural keys
              (categories '(("main") ("references") ("synthesis"))))
          (mapcar #'(lambda (cat)
                      (apply #'org-roam--create-basic-capture-template
                             cat))
                  categories)))
#+end_src

**** updated programmatic version

#+begin_src emacs-lisp
  (defun org-roam--create-basic-capture-template (name &optional key links)
    "Create a basic capture template with NAME and shortcut KEY (default: first
  letter of NAME). If LINKS is non-nil, append a top-level section for Org-roam
  links."
    (let ((key (or key
                   (let ((k (string (elt name 0))))
                     (if links (upcase k) k))))
          (default-title "#+title: ${title}\n")
          (slug "${slug}.org"))
      (append
       (if links
           (list
            key
            (concat (capitalize name) " (w/links section)")
            'plain
            "\n%?\n\n* Org-roam links                            :noexport:\n-")
         (list key (capitalize name) 'plain "\n%?"))
       (list :if-new (list 'file+head (concat (file-name-as-directory name)
                                              slug)
                           default-title)
             :immediate-finish t
             :unnarrowed t))))

  (setq org-roam-capture-templates
        (let* ((categories '("main" "references" "synthesis"))
               (extended-categories
                (append (mapcar #'list categories)
                        (mapcar #'(lambda (cat) (list cat nil t)) categories))))
          (mapcar #'(lambda (ext-cat)
                      (apply #'org-roam--create-basic-capture-template
                             ext-cat))
                  extended-categories)))
#+end_src

**** Display property types
Stealing jethrokuan's method for displaying property types and display the
type for each node:

Edit: needed to use [[https://github.com/jethrokuan/org-roam-guide/issues/2#issuecomment-1240626498][spjuhel's fix]] for ~error: Unknown specializer
org-roam-node~ warning.

#+begin_src emacs-lisp
  (with-eval-after-load 'org-roam
    (cl-defmethod org-roam-node-type ((node org-roam-node))
      "Return the TYPE of NODE."
      (condition-case nil
          (file-name-nondirectory
           (directory-file-name
            (file-name-directory
             (file-relative-name (org-roam-node-file node)
                                 org-roam-directory))))
        (error ""))))

  (setq org-roam-node-display-template
        (concat "${type:15} ${title:*} "
                (propertize "${tags:10}" 'face 'org-tag)))
#+end_src

*** =*org-roam*= buffer: show titles only +(maybe headings too?)+
By default, the =*org-roam*= buffer shows the contents of backlinked nodes (or,
in the case that there are contents before the first top-level heading, those
are folded, and the first top-level heading, and everything beyond that is
displayed). This makes it relatively difficult to actually see the node links,
which are in bold, whereas the contents are full of underlined orange (for me)
Org hyperlinks. I want to reduce the visual clutter and see the titles only.

I just noticed that by pressing =1= in the =*org-roam*= buffer, everything
disappears under =Backlinks=, pressing =2= (almost) gives the behavior I want (node
titles only, followed by the first top level heading or "Top" in parentheses),
and =3= gives the default behavior. This explains ~magit-section-show-level-2~ in
the code below.

**** BROKEN COMMENT First attempt
[[https://org-roam.discourse.group/t/solved-i-want-to-see-only-backlinks-in-side-buffer-nothing-else-possible/3404/7][bkstrm's 2024-03-27 post | I want to see ONLY backlinks in side buffer, nothing
else. Possible? | Org-Roam | Discourse]] seems to offer a solution.

#+begin_src emacs-lisp
  ;; direct copy & paste
  (defun cb/org-roam-buffer-stuff ()
    "check if we're in an org buffer, then make sure the org-roam buffer is visible, then refresh it, collapse the V to >, turn on olivetti mode to fix weird formatting"
    (interactive)
    (if (org-roam-file-p)
        ;; if it's an org-roam buffer...
        (progn
          ;; make sure the buffer is visible
          (if (eq (org-roam-buffer--visibility) 'visible)
                  ;; if the buffer is visible, great
                  (with-current-buffer "*org-roam*"
                          (org-roam-buffer-refresh)
                          (olivetti-mode 1)
                          (magit-section-show-level-2))
                  ;; if it's not visible, make it visible
                 (org-roam-buffer-toggle)
                  (with-current-buffer "*org-roam*"
                          (org-roam-buffer-refresh)
                          (olivetti-mode 1)
                          (magit-section-show-level-2))))))

  ;; auto pretty-printing applied
  (defun cb/org-roam-buffer-stuff ()
    "check if we're in an org buffer, then make sure the org-roam buffer is visible, then refresh it, collapse the V to >, turn on olivetti mode to fix weird formatting"
    (interactive)
    (if (org-roam-file-p)
        ;; if it's an org-roam buffer...
        (progn
          ;; make sure the buffer is visible
          (if (eq (org-roam-buffer--visibility) 'visible)
              ;; if the buffer is visible, great
              (with-current-buffer "*org-roam*"
                (org-roam-buffer-refresh)
                (olivetti-mode 1)
                (magit-section-show-level-2))
            ;; if it's not visible, make it visible
            (org-roam-buffer-toggle)
            (with-current-buffer "*org-roam*"
              (org-roam-buffer-refresh)
              (olivetti-mode 1)
              (magit-section-show-level-2))))))

  ;; what I think the above actually means (DRY principles applied)
  (defun org-roam--customized-org-roam-buffer-preview ()
    "write a docstring, dingus"
    (interactive)
    (when (org-roam-file-p)
      (progn
        (unless (eq (org-roam-buffer--visibility) :visible)
          (org-roam-buffer-toggle))
        (with-current-buffer org-roam-buffer
          (org-roam-buffer-refresh)
          ;; (olivetti-mode 1)
          (magit-section-show-level-2)))))

  ;; apparently not working
  ;; (setq org-roam-preview-function
  ;;       org-roam--customized-org-roam-buffer-preview)

  ;; (setq org-roam-preview-function 'org-roam-preview-default-function)

  ;; ;; ensure roam links are still clickable.
  ;; (advice-add #'org-roam-fontify-like-in-org-mode
  ;;             :around (lambda (fn &rest args)
  ;;                       (save-excursion (apply fn args))))
#+end_src

Let's see what the default looks like:

#+begin_src emacs-lisp :eval no
  ;; from org-roam-mode.el
  (defun org-roam-preview-default-function ()
    "Return the preview content at point.

  This function returns the all contents under the current
  headline, up to the next headline."
    (let ((beg (save-excursion
                 (org-roam-end-of-meta-data t)
                 (point)))
          (end (save-excursion
                 (org-next-visible-heading 1)
                 (point))))
      (string-trim (buffer-substring-no-properties beg end))))

  (defun org-roam-preview-get-contents (file pt)
    "Get preview content for FILE at PT."
    (save-excursion
      (org-roam-with-temp-buffer file
        (org-with-wide-buffer
         (goto-char pt)
         (let ((s (funcall org-roam-preview-function)))
           (dolist (fn org-roam-preview-postprocess-functions)
             (setq s (funcall fn s)))
           s)))))
#+end_src

**** BROKEN COMMENT Alternate solution idea
=C-c n l= is bound to ~org-roam-buffer-toggle~. What if I bind =C-c n L= to a
function that calls ~org-roam-buffer-toggle~ + 「the magit(?) function bound to
=2=​」 (~magit-section-show-level-2~)?

#+begin_src emacs-lisp :eval no
  (defun org-roam--buffer-toggle-show-level-2 ()
    "Toggle display of the persistent `org-roam-buffer', and if opening it."
    (interactive)
    (progn
      (org-roam-buffer-toggle)
      (when (eq (org-roam-buffer--visibility) 'visible)
        (progn
          (switch-to-buffer-other-frame org-roam-buffer)
          ;; ;; collapse everything
          ;; (magit-section-show-level-1)
          ;; ;; then show level 2
          (magit-section-show-level-2)))))
#+end_src

+This isn't quite working. I'm getting the following message:+

#+begin_example
  eieio-oref: Wrong type argument: (or eieio-object cl-structure-object oclosure), nil
  Auto-saving...done
#+end_example

Never mind; added ~(switch-to-buffer org-roam-buffer)~, and it almost works, but
then there are two =*org-roam*= buffers open. I want to switch focus to the
=*org-roam*= buffer.

**** Working solution
Now you can type =C-c n L= to get the behavior you're looking for.

#+begin_src emacs-lisp
  (defun org-roam--buffer-toggle-show-level-2 ()
    "Toggle display of the persistent `org-roam-buffer', and if it is open,
  switch to that buffer and show level 2 sections."
    (interactive)
    (progn
      (org-roam-buffer-toggle)
      (when (eq (org-roam-buffer--visibility) 'visible)
        (progn
          (switch-to-buffer-other-frame org-roam-buffer)
          (magit-section-show-level-2)))))

  (define-key
   org-mode-map (kbd "C-c n L") 'org-roam--buffer-toggle-show-level-2)
#+end_src

** Org Tree Slide
[[https://github.com/takaxp/org-tree-slide][Org Tree Slide]] makes for quick and easy presentations with your Org mode files
(similar to [[https://github.com/yjwen/org-reveal][org-reveal]] + [[https://revealjs.com][reveal.js]], but lighter weight).

** =org-make-toc=
[[https://github.com/alphapapa/org-make-toc][org-make-toc | GitHub]]: create up-to-date table of contents for Org files, which
you can [[https://github.com/alphapapa/org-make-toc?tab=readme-ov-file#automatically-update-on-save][automatically update on save]]. (I was inspired to start using a TOC
generator by [[https://github.com/idlip/d-nix/blob/gol-d/d-setup.org?plain=1][idlip's literate NixOS config]].)

#+begin_src emacs-lisp
  (use-package org-make-toc
    :straight t
    :hook
    ;; (org-mode . org-make-toc)
    )
#+end_src

This is great for
READMEs and literate Org configs that end up on GitHub, but for vanilla Org
files that may get exported to HTML and LaTeX, you get a nicer TOC out of the
box, so it seems like you want to use this on a per-file basis:

#+begin_example
  # -*- before-save-hook: org-make-toc; org-make-toc-insert-custom-ids: t; -*-
#+end_example

Even including ~toc: nil~ with the above didn't suppress the standard TOC when
exporting to HTML, so there's something going on that I'm too lazy to figure
out right now. The point is you've got this, and it's cool, but you probably
don't need it all the time.

* Major modes
** YAML
*** ~yaml-mode~
[[https://github.com/yoshiki/yaml-mode][yaml-mode | GitHub]] (looking for a new maintainer)

#+begin_src emacs-lisp
  (use-package yaml-mode
    :straight (yaml-mode
               :type git
               :host github
               :repo "yoshiki/yaml-mode"
               :branch "master"))
#+end_src

*** TODO COMMENT ~yaml.el~
[[https://github.com/zkry/yaml.el][yaml.el | GitHub]]

#+begin_src emacs-lisp
  (use-package yaml
    :straight (yaml
               :type git
               :host github
               :repo "zkry/yaml.el"
               :branch "master")
    :config
    (require 'yaml))
#+end_src

*** TODO COMMENT ~yaml-pro~
[[https://github.com/zkry/yaml-pro][yaml-pro | GitHub]]: tools for editing YAML leveraging tree-sitter/parser

** ~csv-mode~
[[https://elpa.gnu.org/packages/csv-mode.html][csv-mode | GNU ELPA]]

#+begin_src emacs-lisp
  (use-package csv-mode
    :straight t)
#+end_src

** Markdown +-- configured under ~lsp-bridge~+
For when you can't use Org mode 🙃; see [[https://jblevins.org/projects/markdown-mode/][markdown-mode]].

#+begin_src emacs-lisp
  (use-package markdown-mode
    :straight t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown")
    :bind (:map markdown-mode-map
           ("C-c C-e" . markdown-do)))
#+end_src

*** ~pandoc-mode~
[[http://joostkremers.github.io/pandoc-mode/][pandoc-mode]] makes it easier to interface with ~pandoc~, which is especially
useful when editing Markdown files (Org mode has a lot of this functionality
built in).

#+begin_src emacs-lisp
  (use-package pandoc-mode
    :straight t
    :hook ((markdown-mode . pandoc-mode)))
#+end_src

** JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :straight t)
#+end_src

** PARTIAL =vterm=
[[https://github.com/akermu/emacs-libvterm][Emacs-libvterm]] is C library-based terminal emulator.

#+begin_src emacs-lisp
  (cond ((executable-find "vterm-ctrl")
         (use-package vterm
           :straight t
           :config
           (setq vterm-shell shell-file-name)
           (setq vterm-copy-exclude-prompt t)))
        (t (message "vterm requirements not installed on this device.")))
#+end_src

Note that the documentation recommends some [[https://github.com/akermu/emacs-libvterm#shell-side-configuration][shell-side configuration]] to get the
most out of ~vterm~, but I haven't done this.

#+begin_quote
Tip: you don't need ~ansi-term~ anymore because ~vterm~ supports the equivalent of
switching between ~line-mode~ and ~char-mode~: ~C-c c-t~ toggles =vterm-copy-mode=.
#+end_quote

Just noticed this on my MacBook Pro:

#+begin_src shell :eval no
  $ echo $SHELL
  /bin/zsh
  $ zsh --version
  zsh 5.8.1 (x86_64-apple-darwin22.0)
#+end_src

Probably time to +review something like [[https://systemcrafters.net/emacs-from-scratch/learn-to-love-the-terminal-modes/][Learn to Love the Terminal Modes |System
Crafters]].+ read the Emacs libvterm documentation.

Ok, I explicitly set =vterm-shell=, and now I'm getting this behavior:

#+begin_src shell :eval no
  $ echo $SHELL
  /bin/zsh
  $ echo $0
  /usr/local/bin/bash
  $ echo $ZSH_NAME

  $ ps
    PID TTY           TIME CMD
  30442 ttys000    0:00.08 -bash
  44159 ttys001    0:00.02 /usr/local/bin/bash
  94406 ttys003    0:00.01 -bash
  68604 ttys005    0:00.02 -bash
#+end_src

According to [[https://stackoverflow.com/a/3327022][How to determine the current interactive shell that I'm in
(command-line) | stackoverflow]], this suggests I'm using the Homebrew ~bash~ I
expect, so I wonder why =$SHELL= is still set to ~/bin/zsh~. This also holds for
~shell~ and ~term~.

In ~iTerm2~, I get this:

#+begin_src shell :eval no
  $ echo $SHELL
  /usr/local/bin/bash
#+end_src

#+begin_quote
When starting ~shell-mode~ with ~M-x shell~, Emacs starts the shell you want
(usually the same as your login shell, but this can be changed if you really
want to) and then sources a file, if it exists, based on the shell's name. The
places it looks are

1. ~~/.emacs_$SHELLNAME~
2. ~~/.emacs.d/init_${SHELLNAME}.sh~

-- source: [[https://stackoverflow.com/a/54951844][Setting TERM variable for Emacs shell | stackoverflow]]
#+end_quote

...so maybe I should change my login shell; see [[https://superuser.com/questions/48226/how-do-i-set-my-shell-in-mac-os-x][How do I set my shell in Mac OS
X? | superuser.stackexchange]].

I reset my shell with

#+begin_src shell
  $ sudo chsh -s /usr/local/bin/bash matlock
#+end_src

which I can confirm worked because

#+begin_src shell
  $ dscacheutil -q user -a name matlock
  name: matlock
  password: ********
  uid: xxx
  gid: xx
  dir: /Users/matlock
  shell: /usr/local/bin/bash
  gecos: Ryan Matlock
#+end_src

(See [[https://apple.stackexchange.com/a/29877][How can I list all user accounts in the terminal? | apple.stackexchange]];
note that ~/etc/passwd~ doesn't contain user information the way it does on
Linux.) It may be that a system reboot will fix this.

Note: I'm definitely the user running Emacs:

#+begin_src shell
  $ ps aux | ack -i emacs
  matlock          45403   3.0  0.3 35870716 172160   ??  S    12:54AM   0:22.28
  /Applications/Emacs.app/Contents/MacOS/Emacs-x86_64-10_14
#+end_src

How =$SHELL= is set in ~bash~:

#+begin_quote
=SHELL=

This environment variable expands to the full pathname to the shell. If it is
not set when the shell starts, Bash assigns to it the full pathname of the
current user’s login shell.

-- [[https://www.gnu.org/software/bash/manual/html_node/Bash-Variables.html#index-SHELL][Bash Variables § =SHELL= | GNU Bash Manual]]
#+end_quote

** PARTIAL =dockerfile-mode=
[[https://github.com/spotify/dockerfile-mode][dockerfile-mode | github]] (maintained by Spotify! Is this my first time using
something from a corporate account in my Emacs config?)

#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :straight t)
#+end_src

** Lilypond
[[https://lilypond.org/][Lilypond]] is a FOSS program for "engraving" musical scores from plaintext source
files.

*** COMMENT Not working
https://www.reddit.com/r/emacs/comments/k0mld2/using_lilypond_in_emacs/

https://lilypond.org/doc/v2.25/Documentation/usage/emacs-mode

https://issues.guix.gnu.org/72924

https://francopasut.netlify.app/post/emacs_write_lilypond/

#+begin_src emacs-lisp :eval no
  ;; (let (lilypond-dir "/opt/homebrew/share/emacs/site-lisp/lilypond") (when
  ;;   (file-directory-p lilypond-dir) (setq load-path (append (list
  ;;   lilypond-dir)) load-path))) (setq load-path (append (list
  ;;   (expand-file-name "/opt/homebrew/share/emacs/site-lisp/")) load-path))
  ;;   (require 'lilypond)

  ;; (let ((lp (list (expand-file-name "~/.emacs.d/site-lisp/"))))
  ;;   (use-package lilypond-mode
  ;;     ;; :straight t
  ;;     :load-path lp
  ;;     ;; :ensure t
  ;;     :mode ("\\.ly\\'" . LilyPond-mode)))

  ;; (autoload 'LilyPond-mode "lilypond-mode")
  ;; (setq auto-mode-alist
  ;;       (cons '("\\.ly$" . LilyPond-mode) auto-mode-alist))

  ;; (add-hook 'LilyPond-mode-hook (lambda () (turn-on-font-lock)))

  (let ((site-lisp-dir (expand-file-name "~/.emacs.d/site-lisp/")))
    (when (file-directory-p site-lisp-dir)
      (setq load-path (append (list site-lisp-dir) load-path))))

  ;; (use-package LilyPond-mode
  ;;   :ensure t
  ;;   :mode ("\\.ly\\'" . LilyPond-mode))

  ;; (use-package lilypond-mode
  ;;   :ensure t
  ;;   :mode ("\\.ly\\'" . lilypond-mode))

  (require 'LilyPond-mode)
  (require 'lilypond-mode)
#+end_src

I don't know why this isn't working

*** Bad solution---but it works ¯\_(ツ)_/¯
[[https://github.com/benide/lilypond-mode][lilypond-mode | benide | GitHub]]

#+begin_src emacs-lisp
  (use-package lilypond-mode
    :straight (lilypond-mode
               :type git
               :host github
               :repo "benide/lilypond-mode"
               :branch "master")
    :mode ("\\.ly\\'" . LilyPond-mode))
#+end_src

** =web-mode=
https://web-mode.org/

Per [[https://stackoverflow.com/a/42631327][this stackoverflow response]], =web-mode= is useful for editing unspecified XML
and support node folding.

#+begin_src emacs-lisp
  (use-package web-mode
    :straight t
    :mode
    (("\\.html?\\'" . web-mode)
     ("\\.css\\'" . web-mode)
     ("\\.xml\\'" . web-mode)
     ("\\.svg\\'" . web-mode)))
#+end_src

My initial impression is that it's a little slow at folding nodes on a longer
XML (SVG) file.

** BROKEN =spice-mode=
https://lifeofpenguin.blogspot.com/2021/10/spice-simulation-in-gnu-emacs.html

First, ensure =gnuplot= is installed:

#+begin_src emacs-lisp
  (let ((gnuplot-exit-code (shell-command "gnuplot --version")))
    (unless (zerop gnuplot-exit-code)
      (message "Warning: gnuplot not properly installed/configured. May cause issues for SPICE simulation.")))
#+end_src


*** COMMENT first attempt at =spice-mode= installation/config
Then configure =spice-mode=:

#+begin_src emacs-lisp :eval no
  (use-package spice-mode
    :straight (spice-mode
               :type git
               :host github
               :repo "emacsmirror/spice-mode"
               :branch "master")
    :config (setq spice-simulator "Ngspice"
                  spice-waveform-viewer "ngplot")
    :mode (("\\.cir\\'" . spice-mode)))
#+end_src

Ok, to be fair, I'm not using the =spice-mode.el= found at
https://gitlab.com/atamariya/emacs/-/tree/dev/lisp as the blog post author
above suggested.

**** Issues
Attempting =C-c C-r= (~spice-compile~):

#+begin_example
  Compile command: eldo -i example.cir
#+end_example

I want =eldo= to be =ngspice=. Also, the

*** COMMENT trying it again

#+begin_src emacs-lisp
  (use-package spice-mode
    :straight (spice-mode
               :type git
               :host gitlab
               :repo "atamariya/emacs/-/raw/dev/lisp"
               :branch "master")
    :config (setq spice-simulator "Ngspice"
                  spice-waveform-viewer "ngplot")
    :mode (("\\.cir\\'" . spice-mode)))
#+end_src

https://gitlab.com/atamariya/emacs/-/blob/dev/lisp/spice-mode.el and
https://gitlab.com/atamariya/emacs/-/raw/dev/lisp/spice-mode.el if you want to
directly see the source, but it's buried in some weird way that straight can't
really handle.

*** let's try the first way again since I'm actually using =ngspice= now
Then configure =spice-mode=:

#+begin_src emacs-lisp :eval no
  (use-package spice-mode
    :straight (spice-mode
               :type git
               :host github
               :repo "emacsmirror/spice-mode"
               :branch "master")
    :config (setq spice-simulator "ngspice"
                  spice-waveform-viewer "ngplot")
    :mode (("\\.cir\\'" . spice-mode)))

  ;; (require 'compile)
  ;; (defun spice-compile ()
  ;;   "Spice wrapper function for compile."
  ;;   (interactive)
  ;;   (spice-set-simulator-command)
  ;;   (call-interactively 'compile nil)
  ;;   )

  (defun spice-compile-ngspice ()
    "use in place of spice-mode.el's spice-compile command"
    (interactive)
    ;;
    )
#+end_src

Ok, looking through =spice-mode.el=, it seems like maybe I can do my own
~spice-compile~ command that uses =ngspice=.

** =fish-mode=
[[https://github.com/wwwjfy/emacs-fish][fish-mode | GitHub]]

#+begin_src emacs-lisp
  (use-package fish-mode
    :straight t
    :mode (("\\.fish\\'" . fish-mode)))
#+end_src

** =nix-mode=
[[https://github.com/NixOS/nix-mode][nix-mode | GitHub]]

#+begin_src emacs-lisp
  (use-package nix-mode
    :straight t
    :mode "\\.nix\\'")
#+end_src

* Minor modes
** TempEL
[[https://github.com/minad/tempel][TempEl]] is a modern Emacs templating library.

Configuration stolen from the README.

#+begin_src emacs-lisp
  (use-package tempel
    :straight t
    ;; Require trigger prefix before template name when completing.
    ;; :custom
    ;; (tempel-trigger-prefix "<")
    :custom
    (tempel-path (expand-file-name "*.eld" "~/config/emacs/templates"))

    :bind (("M-<tab>" . tempel-complete) ;; Alternative tempel-expand
           ("M-*" . tempel-insert))

    :init

    ;; Setup completion at point
    (defun tempel-setup-capf ()
      ;; Add the Tempel Capf to `completion-at-point-functions'.
      ;; `tempel-expand' only triggers on exact matches. Alternatively use
      ;; `tempel-complete' if you want to see all matches, but then you
      ;; should also configure `tempel-trigger-prefix', such that Tempel
      ;; does not trigger too often when you don't expect it. NOTE: We add
      ;; `tempel-expand' *before* the main programming mode Capf, such
      ;; that it will be tried first.
      (setq-local completion-at-point-functions
                  (cons #'tempel-expand
                        completion-at-point-functions)))

    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf)

    ;; Optionally make the Tempel templates available to Abbrev,
    ;; either locally or globally. `expand-abbrev' is bound to C-x '.
    ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
    ;; (global-tempel-abbrev-mode)
    )
#+end_src

* Miscellaneous
** Exercism
[[https://exercism.org/tracks][Exercism]] seems like a neat way to learn concepts from dozens of programming
languages.

*** Emacs Lisp

**** Run test suite
This function was stolen from Exercism's provided ~HELP.md~ packaged with the
exercises. As provided, if ~ert~ hasn't previously been run, =ert-delete-all-tests=
is unbound, which raises an error message:

#+begin_example
  exercism-eval-and-run-all-tests-in-buffer: Symbol’s function definition is
  void: ert-delete-all-tests
#+end_example

And checking if the symbol is bound using =boundp= fixes that. +See [[https://stackoverflow.com/a/757593][In Emacs Lisp,
how do I check if a variable is defined? | stackoverflow]].+ See [[http://xahlee.info/emacs/emacs/elisp_check_defined.html][Emacs Lisp: Check
If a function/variable is Defined | Xah Lee]]; =ert-delete-all-tests= is a
function, not a variable, so you have to use =fboundp=, *not* =boundp=; otherwise,
the tests aren't deleted, and you'll re-run *all* tests across multiple ERT test
buffers.

See also [[https://www.gnu.org/software/emacs/manual/html_mono/ert.html][ERT: Emacs Lisp Regression Testing | GNU Emacs Manual]].

#+begin_src emacs-lisp
  (defun exercism-eval-and-run-all-tests-in-buffer ()
    "Deletes all loaded tests from the runtime, evaluates the current buffer and
  runs all loaded tests with ert."
    (interactive)
    (when (fboundp 'ert-delete-all-tests)
        (ert-delete-all-tests))
    (eval-buffer)
    (ert 't))

  (eval-after-load 'emacs-lisp-mode
    (define-key emacs-lisp-mode-map (kbd "C-c t")
      'exercism-eval-and-run-all-tests-in-buffer))
#+end_src

** Lorem Ipsum
[[https://github.com/jschaf/emacs-lorem-ipsum][emacs-lorem-ipsum | GitHub]] --- hey, sometimes it's handy to insert gibberish
text for testing purposes; after all, you do it in LaTeX sometimes.

#+begin_src emacs-lisp
  (use-package lorem-ipsum
    :straight t
    :bind (:map global-map
                ("C-c l s" . lorem-ipsum-insert-sentences)
                ("C-c l p" . lorem-ipsum-insert-paragraphs)
                ("C-c l l" . lorem-ipsum-insert-list)))
#+end_src

Ok, after using it a little bit, it's slightly annoying that it inserts two
spaces after a period and always inserts spaces at the end of a sentence or
paragraph, but I can live with it.

* Sanity check
Check that bottom of this file was reached and evaluated successfully.

#+begin_src emacs-lisp
  (message "Bottom of extras.org reached and evaluated.")
#+end_src
