#+title: Literate Emacs configuration with Org mode
#+subtitle: Core languages
#+author: Ryan Matlock

This contains configuration for my essential languages: Haskell, Python, Rust and
TeX/LaTeX. In order to enable these configurations, =core-config-core-langs-switch=
must be set to =t= in ~core-config.org~.

* TODO Language Server Protocol: ~lsp-mode~
I think you have a lot of this over in ~core-config.org~, so you ought to clean
that up.

See [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] for project details, and see [[https://emacs-lsp.github.io/lsp-mode/page/installation/#use-package][LSP Mode installation instructions §
use-package]] for config source.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook ((haskell-mode . lsp)
           (python-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  ;; optionally
  (use-package lsp-ui
    :straight t
    :commands lsp-ui-mode)
  (use-package lsp-treemacs
    :straight t
    :commands lsp-treemacs-errors-list)

  ;; ;; optionally if you want to use debugger
  ;; (use-package dap-mode)
  ;; ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

  ;; optional if you want which-key integration
  (use-package which-key
    :straight t
    :config
    (which-key-mode))
#+end_src

** Python: ~pylsp~
Ran
#+begin_src shell :eval no
  pip install 'python-lsp-server[all]'
#+end_src

Looking at [[https://www.mattduck.com/lsp-python-getting-started.html][Getting started with lsp-mode for Python]] (from [2020-04-26 Sun])
plus the current config file, it looks a little hairy. I'm getting some degree
of linting and code completion in Python right now, but I need to come back to
this later. [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pylsp/][lsp-pylsp]] seems to have a daunting number of options.


* Haskell
** ~hindent~
[[https://github.com/mihaimaruseac/hindent][hindent]] is a Haskell pretty printer.

#+begin_src emacs-lisp
  (use-package hindent
    :straight t
    :hook (haskell-mode . hindent-mode))
#+end_src

** ~dante~: an "Emacs mode for Interactive Haskell" + ~attrap~
[[https://github.com/jyp/dante][dante]] provides a frontend to GHCi features.

[[http://h2.jaguarpaw.co.uk/posts/how-i-use-dante/][How [someone] uses[s] dante]]

[[https://github.com/jyp/attrap][attrap]]: ATtempt To Repair At Point

#+begin_src emacs-lisp
  (use-package attrap
    :straight t)

  (use-package dante
    :straight t
    :after haskell-mode
    :commands 'dante-mode
    :init
    (add-hook 'haskell-mode-hook 'flycheck-mode)
    (add-hook 'haskell-mode-hook 'dante-mode)
    :config
    (flycheck-add-next-checker 'haskell-dante '(info . haskell-hlint)))
#+end_src

* Python

* Rust

* TeX/LaTeX
+Basically all+ Most of this (with the exception of the AUCTeX stuff towards the
top) is pulled from ~legacy-dotemacs.el~ because I liked the way my old
configuration worked with LaTeX. That said, I think a lot of this stuff goes
back to around 2015 when I was relatively new to Emacs, so some of these
options may be deprecated or implemented in a weird way.

** AUCTeX

#+begin_src emacs-lisp
  (use-package auctex
    :straight t)
#+end_src

** Indentation

#+begin_src emacs-lisp
  (setq LaTeX-item-indent 0)
  (setq LaTeX-indent-level 2)
#+end_src

** Word count
The MacTeX (and presumably most LaTeX distributions) comes with a CLI utility
called ~texcount~; see [[http://superuser.com/questions/125027/word-count-for-latex-within-emacs][Word count for LaTeX within emacs | stackexchange]].

#+begin_src emacs-lisp
  (defun latex-word-count ()
    (interactive)
    (shell-command (concat "texcount "
                           ;; options
                           "-brief "
                           ;; use shell-quote-argument to handle buffer names
                           ;; with spaces or other weirdness
                           (shell-quote-argument buffer-file-name))))

  (add-hook 'LaTeX-mode-hook 'latex-word-count)
  (eval-after-load 'latex
    '(define-key LaTeX-mode-map (kbd "C-c w") 'latex-word-count))
#+end_src

** Misc hooks and settings
Didn't find any comments associated with these settings in ~legacy-dotemacs.el~,
but I liked how everything worked before.

#+begin_src emacs-lisp
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
  (setq TeX-PDF-mode t)
#+end_src

** ~C-c C-c~ compilation with ~latexmk~
Note: SyncTeX is setup via ~/.latexmkrc (see below)

#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (push
               '("latexmk"
                 "latexmk -interaction=nonstopmode -f -pdf %s"
                 TeX-run-TeX
                 nil
                 t
                 :help "Run latexmk on file")
               TeX-command-list)))
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (push
               '("xelatexmk" "latexmk -xelatex -pdf %s" TeX-run-TeX nil t
                 :help "Run latexmk -xelatex on file")
               TeX-command-list)))
  ;; (add-hook 'LaTeX-mode-hook
  ;;           (lambda ()
  ;;             (push
  ;;              '("pdflatex"
  ;;                (concat "pdflatex "
  ;;                        "-interaction=nonstopmode "
  ;;                        "-output-format=pdf "
  ;;                        "%s")
  ;;                TeX-run-TeX
  ;;                nil
  ;;                t
  ;;                :help "Run pdflatex on file")
  ;;              TeX-command-list)))
  ;; not working ¯\_(ツ)_/¯
  (add-hook 'TeX-mode-hook
            #'(lambda () (setq TeX-command-default "latexmk")))
#+end_src

** Set Skim as default PDF viewer on MacOS
Skim's displayline is used for forward search (from .tex to .pdf); option -b
highlights the current line; option -g opens Skim in the background (just
checked and displayliine is still there).

#+begin_src emacs-lisp
  (when (memq window-system '(mac ns x))
    (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
    (setq
     TeX-view-program-list
     '(("PDF Viewer"
        (concat "/Applications/Skim.app/Contents/SharedSupport/displayline"
                " -b -g %n %o %b")))))
#+end_src

** Default view?
Comments in ~legacy-dotemacs.el~ pointed me to [[http://alexkrispin.wordpress.com/2010/10/25/writing-with-emacs-and-auctex-part-1/][Writing with Emacs and AucTeX part
1]], an article from 2010, so this might be way out of date. On the other hand,
https://www.gnu.org/software/auctex/ says that the current version is 13.1,
updated on [2022-02-20 Sun].

#+begin_src emacs-lisp
  (setq TeX-output-view-style '(("^pdf$" "." "vince %o")
                                ("^ps$" "." "gv %o")
                                ("^dvi$" "." "xdvi %o")))
  (setq tex-dvi-view-command "xdvi")
  (setq tex-dvi-print-command "dvips")
  (setq tex-alt-dvi-print-command "dvips")
#+end_src

* Sanity check
Check that bottom of this file was reached and evaluated successfully.

#+begin_src emacs-lisp
  (message "Bottom of core-langs.org reached and evaluated.")
#+end_src
