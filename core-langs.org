#+title: Literate Emacs configuration with Org mode
#+subtitle: Core languages
#+author: Ryan Matlock

This contains configuration for my essential languages: Haskell, Python, Rust,
and TeX/LaTeX. In order to enable these configurations,
~core-config-core-langs-switch~ must be set to ~t~ in =core-config.org=.

* TODO Language Server Protocol: =lsp-mode=
See [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] for project details, and see [[https://emacs-lsp.github.io/lsp-mode/page/installation/#use-package][LSP Mode installation instructions §
use-package]] for config source.

Other resources:
- [[https://www.mattduck.com/lsp-python-getting-started.html][Getting started with =lsp-mode= for Python | matt duck]]
- [[https://github.com/emacs-lsp/lsp-haskell][lsp-haskell | GitHub]]
- [[https://haskell-language-server.readthedocs.io/en/latest/installation.html][Haskell Language Server | Installation | Read the Docs]]
- [[https://abailly.github.io/posts/a-modern-haskell-env.html][Modern Emacs for Haskell | igitur.io]]

Bind +~completion-at-point~+ ~complete-symbol~ (in ~global-map~) to something like
=<TAB>= or =M-<TAB>=. Is there some sort of "do what I mean" tab-or-completion
function?

#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-l")
    :config
      (progn (lsp-register-custom-settings
              '(("pyls.plugins.pyls_mypy.enabled" t t)
                ("pyls.plugins.pyls_mypy.live_mode" nil t)
                ("pyls.plugins.pyls_black.enabled" t t)
                ("pyls.plugins.pyls_isort.enabled" t t)
                ("pyls.plugins.flake8.enabled" t t))))
    :hook ((haskell-mode . lsp)
           (haskell-literate-mode . lsp)
           (python-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  ;; optionally
  (use-package lsp-ui
    :straight t
    :commands lsp-ui-mode)
  (use-package lsp-treemacs
    :straight t
    :commands lsp-treemacs-errors-list)

  ;; ;; optionally if you want to use debugger
  ;; (use-package dap-mode)
  ;; ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

  ;; optional if you want which-key integration
  (use-package which-key
    :straight t
    :config
    (which-key-mode))
#+end_src

* Haskell
** Basic Haskell configuration

#+begin_src emacs-lisp
  (use-package haskell-mode
    :straight t)

  (use-package lsp-haskell
    :ensure t
    :config
    ;; (let ((hls-wrapper "haskell-language-server-wrapper"))
    ;;   (if (executable-find hls-wrapper)
    ;;       (setq lsp-haskell-server-path hls-wrapper)
    ;;     (message (format "%s not found." hls-wrapper))))
    (setq lsp-haskell-server-path "haskell-language-server-wrapper")
    (setq lsp-haskell-server-args ())
    ;; Comment/uncomment this line to see interactions between lsp client/server.
    ;; (setq lsp-log-io t)
    )

  (add-hook 'lsp-after-initialize-hook
            #'(lambda ()
                (lsp--set-configuration
                 '(:haskell
                   (:plugin
                    (:tactics
                     (:config
                      (:timeout_duration 5))))))))
#+end_src

*** TODO COMMENT figure out this weirdness
In =IELM=, I get

#+begin_src emacs-lisp :eval no
  ELISP> (executable-find "haskell-language-server-wrapper")
  nil
#+end_src

but in =ansi-term=, I get

#+begin_src shell
  $ which haskell-language-server-wrapper
  <$HOME>/.ghcup/bin/haskell-language-server-wrapper
#+end_src

** =hindent=
[[https://github.com/mihaimaruseac/hindent][hindent]] is a Haskell pretty printer.

#+begin_src emacs-lisp
  (use-package hindent
    :straight t
    :hook (haskell-mode . hindent-mode))
#+end_src

** =dante=: an "Emacs mode for Interactive Haskell" + =attrap=
[[https://github.com/jyp/dante][dante]] provides a frontend to GHCi features.

[[http://h2.jaguarpaw.co.uk/posts/how-i-use-dante/][How [someone] uses[s] dante]]

[[https://github.com/jyp/attrap][attrap]]: ATtempt To Repair At Point

#+begin_src emacs-lisp
  (use-package attrap
    :straight t)

  (use-package dante
    :straight t
    :after haskell-mode
    :commands 'dante-mode
    :init
    (add-hook 'haskell-mode-hook 'flycheck-mode)
    (add-hook 'haskell-mode-hook 'dante-mode)
    :config
    (flycheck-add-next-checker 'haskell-dante '(info . haskell-hlint)))
#+end_src

* Python
** =lsp-pyright=
[[https://github.com/emacs-lsp/lsp-pyright][lsp-pyright | GitHub]]

#+begin_src emacs-lisp
  (use-package lsp-pyright
    :straight t
    :hook (python-mode . (lambda ()
                            (require 'lsp-pyright)
                            ;; (lsp)
                            (lsp-deferred))))
#+end_src

This seems to work nicely!

* COMMENT Hy: Lisp in Python
** TODO COMMENT =hy-mode=
[[https://docs.hylang.org/en/stable/][Oh, Hy!]] You can run Lisp in Python. [[https://github.com/hylang/hy-mode][hy-mode | GitHub]] gives you all the nice
features for that.

#+begin_src emacs-lisp
  (use-package hy-mode
    :straight t
    :hook ((hy-mode . paredit-mode)
           (inferior-hy-mode . paredit-mode))
    :bind (:map inferior-hy-mode-map
                ;; ("C-c TAB" . hy-shell-eval-last-sexp) ;; bound to C-c C-e
                ))

  ;; (add-to-list 'lsp-language-id-configuration
  ;;              '(hy-mode . "python"))
  ;; (add-to-list 'lsp-language-id-configuration
  ;;              '("\\.hy$" . "python"))
#+end_src

=hy-mode= is getting activated for =.py= files, which is very bad because =lsp-mode=
is freaking out about it.

** TODO COMMENT Completion with =company-mode=, etc...
See [[https://company-mode.github.io][company-mode | GitHub.io]]

#+begin_src emacs-lisp
  (use-package company-mode
    :straight t
    ;; :hook ((company-mode . hy-mode)
    ;;        (company-mode . inferior-hy-mode))
    :bind (:map company-active-map
                ("M-TAB" . company-indent-or-complete-common))
    :config
    (setq company-global-modes '(hy-mode
                                 inferior-hy-mode))
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src

Not working as expected (maybe a clash with =vertico=?).

** COMMENT =ob-hy=: Org-Babel support
[[https://github.com/allison-casey/ob-hy][ob-hy | GitHub (fork)]] seems to be more up-to-date than the [[https://github.com/brantou/ob-hy][original branch of
ob-hy]].

#+begin_src emacs-lisp
  (use-package ob-hy
    :straight (ob-hy
               :type git
               :host github
               :repo "allison-casey/ob-hy"
               :branch "master"))
#+end_src

* Rust
* TeX/LaTeX
+Basically all+ Most of this (with the exception of the AUCTeX stuff towards the
top) is pulled from =legacy-dotemacs.el= because I liked the way my old
configuration worked with LaTeX. That said, I think a lot of this stuff goes
back to around 2015 when I was relatively new to Emacs, so some of these
options may be deprecated or implemented in a weird way.

** AUCTeX
Let's try [[https://github.com/daviwil/emacs-from-scratch/wiki/LaTeX-config-(AucteX)-in-Emacs-from-scratch#auctex][LaTeX config (AucteX) in Emacs from scratch § auctex]]

#+begin_src emacs-lisp
  (use-package auctex-latexmk
    :straight t
    :config
    (auctex-latexmk-setup)
    (setq auctex-latexmk-inherit-TeX-PDF-mode t))

  (use-package latex
    :straight auctex
    :defer t
    :mode
    ("\\.tex\\'" . latex-mode)
    :hook
    (LaTeX-mode . TeX-PDF-mode)
    (LaTeX-mode . LaTeX-math-mode)

    :config
    (setq TeX-auto-save t)
    (setq-default TeX-master nil)
    (setq TeX-save-query nil)

    ;; latexmk
    (require 'auctex-latexmk)
    (auctex-latexmk-setup)
    (setq auctex-latexmk-inherit-TeX-PDF-mode t))

  (add-hook 'latex-mode-hook 'turn-on-reftex)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-auctex t)
#+end_src

Well, I didn't get any warnings with this.

** TODO COMMENT Fonts \to =gui-config.org=?
Info from the ~\section{}~ macro font:

#+begin_example
  Face: font-latex-sectioning-2-face (sample) (customize this face)

  Documentation:
  Face for sectioning commands at level 2.

  Probably you don’t want to customize this face directly.  Better
  change the base face ‘font-latex-sectioning-5-face’ or customize the
  variable ‘font-latex-fontify-sectioning’.

  Defined in ‘font-latex.el’.


             Family: unspecified
            Foundry: unspecified
              Width: unspecified
             Height: 1.1
             Weight: unspecified
              Slant: unspecified
         Foreground: unspecified
  DistantForeground: unspecified
         Background: unspecified
          Underline: unspecified
           Overline: unspecified
     Strike-through: unspecified
                Box: unspecified
            Inverse: unspecified
            Stipple: unspecified
               Font: unspecified
            Fontset: unspecified
             Extend: unspecified
            Inherit: font-latex-sectioning-3-face
#+end_example

~font-latex-fontify-sectioning~:

#+begin_example
  font-latex-fontify-sectioning is a variable defined in ‘font-latex.el’.

  Its value is 1.1

  Whether to fontify sectioning macros with varying height or a color face.

  If it is a number, use varying height faces.  The number is used
  for scaling starting from ‘font-latex-sectioning-5-face’.  Typically
  values from 1.05 to 1.3 give best results, depending on your font
  setup.  If it is the symbol ‘color’, use ‘font-lock-type-face’.

  Caveats: Customizing the scaling factor applies to all sectioning
  faces unless those face have been saved by customize.  Setting
  this variable directly does not take effect unless you call
  ‘font-latex-update-sectioning-faces’ or restart Emacs.

  Switching from ‘color’ to a number or vice versa does not take
  effect unless you call M-x font-lock-fontify-buffer or restart
  Emacs.

    You can customize this variable.
#+end_example

See [[https://emacs.stackexchange.com/a/47577][How do I set latex face attributes in =init.el?= | emacs.stackexchange]]

#+begin_src emacs-lisp
  (with-eval-after-load 'font-latex
    (set-face-attribute 'font-latex-sectioning-5-face nil :family "Helvetica")
    ;; (set-face-attribute 'default nil :family "Helvetica")
    ;; (set-face-attribute 'font-latex-math-face nil
    ;;                     :family "JetBrainsMono Nerd Mono")
    )
#+end_src

Note that this doesn't affect the ~\title{}~ and ~\author{}~ (and presumably
~\subtitle{}~) macros.

** Indentation

#+begin_src emacs-lisp
  (setq LaTeX-item-indent 0)
  (setq LaTeX-indent-level 2)
#+end_src

** Word count
The MacTeX (and presumably most LaTeX distributions) comes with a CLI utility
called =texcount=; see [[http://superuser.com/questions/125027/word-count-for-latex-within-emacs][Word count for LaTeX within emacs | stackexchange]].

#+begin_src emacs-lisp
  (defun latex-word-count ()
    (interactive)
    (shell-command (concat "texcount "
                           ;; options
                           "-brief "
                           ;; use shell-quote-argument to handle buffer names
                           ;; with spaces or other weirdness
                           (shell-quote-argument buffer-file-name))))

  (add-hook 'LaTeX-mode-hook 'latex-word-count)
  (eval-after-load 'latex
    '(define-key LaTeX-mode-map (kbd "C-c w") 'latex-word-count))
#+end_src

** Misc hooks and settings
Didn't find any comments associated with these settings in =legacy-dotemacs.el=,
but I liked how everything worked before.

#+begin_src emacs-lisp
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
  (setq TeX-PDF-mode t)
#+end_src

** =C-c C-c= compilation with =latexmk=
Note: SyncTeX is setup via =~/.latexmkrc= (see below) --- this seems out of date
as I haven't configured =.latexmkrc= on my devices.

There's probably a better way of doing this (~add-to-list~?), plus you can use a
backquote/comma setup to programmatically customize some of this.

*** Old way
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (push
               '("latexmk"
                 "latexmk -interaction=nonstopmode -f -pdf %s"
                 TeX-run-TeX
                 nil
                 t
                 :help "Run latexmk on file")
               TeX-command-list)))

  (add-hook 'TeX-mode-hook
            #'(lambda () (setq TeX-command-default "latexmk")))
#+end_src

*** Improved way
See [[https://www.ctan.org/pkg/latexmk][latexmk | CTAN]] for more detailed info on options.

**** =latexmk -xelatex=
#+begin_src emacs-lisp
  (let ((shell-cmd
         (mapconcat #'identity
                    '("latexmk"
                      "-f"          ;; force processing past errors
                      "-interaction=nonstopmode"
                      "-g"          ;; force latexmk to process document
                      "-xelatex"    ;; generate PDF with xelatex
                      "%s")
                    " ")))
    (add-to-list 'TeX-command-list
                 `("xelatexmk (force)" ,shell-cmd TeX-run-TeX nil t
                   :help "Run \"latexmk -f -g -xelatemk\" on file.")))
#+end_src

This works as expected, but =View= doesn't seem to play nicely with =xelatex=.

**** =pdflatex=
[[https://tex.stackexchange.com/a/118491][What exactly is SyncTeX? | TeX.stackexchange]]: a utility that enables
synchronization between source TeX file and PDF.

#+begin_src emacs-lisp
  (let ((shell-cmd
         (mapconcat #'identity
                    '("pdflatex"
                      "-synctex=1"
                      "-interaction=nonstopmode"
                      "-output-format=pdf "
                      "-shell-escape"
                      "%s")
                    " ")))
    (add-to-list 'TeX-command-list
                 `("pdflatex" ,shell-cmd TeX-run-TeX nil t
                   :help "Run \"latexmk -f -g -xelatemk\" on file.")))
#+end_src

** TODO Set Skim as default PDF viewer on MacOS
Skim's =displayline= is used for forward search (from =.tex= to =.pdf=); option =-b=
highlights the current line; option =-g= opens Skim in the background (just
checked and =displayline= is still there).

#+begin_src emacs-lisp
  ;; (when (memq window-system '(mac ns x))
  ;;   (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
  ;;   (setq
  ;;    TeX-view-program-list
  ;;    '(("PDF Viewer"
  ;;       (concat "/Applications/Skim.app/Contents/SharedSupport/displayline"
  ;;               " -b -g %n %o %b")))))

  ;; (setq TeX-view-program-selection '((output-pdf "Skim")))
#+end_src

Having an issue with =xelatex= breaking the =View= option; see [[https://github.com/tom-tan/auctex-latexmk/issues/28][Support for xelatex
breaks PDF viewing (#28) | GitHub]] for more info.

Maybe check that Skim is available, and if it isn't, fall back to Preview?

#+begin_example
  ELISP> (file-directory-p "/Applications/Skim.app/")
  t
  ELISP> (file-directory-p "/Applications/Preview.app/")
  nil
  ELISP> (file-directory-p "/Applications/Preview/")
  nil
  ELISP> (file-directory-p "/System/Applications/Preview.app/")
  t
  ELISP> (executable-find "evince")
  "/usr/local/bin/evince"
  ELISP> (executable-find "/System/Applications/Preview.app/")
  nil
#+end_example

So I could do something like

#+begin_example
  (let ((pdf-viewer-apps '("/Applications/Skim.app"
                           "/System/Applications/Preview.app/"
                           "evince")))
    (setq default-pdf-viewing-app
          (car-safe (seq-filter  #'(lambda ((pdf-viewer))
                                     (or (executable-find pdf-viewer)
                                         (file-directory-p pdf-viewer)))
                                 pdf-viewer-apps))))
#+end_example

in order to set the default PDF viewer (although mixing MacOS and CLI apps like
that could be a problem).

#+begin_src shell
  [~] $ open -a /Applications/Skim.app/ \
      ~/Dropbox/documents-etc/misc/xelatex-test/xelatex-test.pdf
  [~] $ open -a /System/Applications/Preview.app/ \
      ~/Dropbox/documents-etc/misc/xelatex-test/xelatex-test.pdf
#+end_src

I also tried using [[https://help.gnome.org/users/evince/stable/][​=evince= | gnome.org]] PDF viewer, but it looks really ugly on
MacOS, so maybe I should stick with Skim and Preview.

Maybe I don't need to define anything special. Check this out:

#+begin_example
  TeX-view-program-list-builtin is a variable defined in ‘tex.el’.

  Its value is
  (("Preview.app" "open -a Preview.app %o" "open")
   ("Skim" "open -a Skim.app %o" "open")
   ("PDF Tools" TeX-pdf-tools-sync-view)
   ("displayline" "displayline %n %o %b" "displayline")
   ("open" "open %o" "open"))

  Alist of built-in viewer specifications.
  This variable should not be changed by the user who can use
  ‘TeX-view-program-list’ to add new viewers or overwrite the
  definition of built-in ones.  The latter variable also contains a
  description of the data format.
#+end_example

Ok, I restarted Emacs after nuking my ~TeX-view-program-selection~ and
~TeX-view-program-list~ customizations, and I'm still seeing this behavior (taken
from =*Messages*=):

#+begin_example
  xelatexmk (force): successfully formatted {1} page
  TeX-view-command-raw: No matching viewer found
#+end_example

Let's take a look at ~TeX-view-command-raw~:

#+begin_src lisp :eval no
  (defun TeX-view-command-raw ()
    "Choose a viewer and return its unexpanded command string."
    (let ((selection TeX-view-program-selection)
          entry viewer item executable spec command)
      ;; Find the appropriate viewer.
      (while (and (setq entry (pop selection)) (not viewer))
        (when (TeX-view-match-predicate (car entry))
          (setq viewer (cadr entry))))
      (unless viewer
        (error "No matching viewer found"))
      ;; -- rest of function omitted --
      ))
#+end_src

#+begin_example
  ELISP> (let (x)
           (setq x :foo)
           (print (format "x is %s" x)))

  "x is :foo"

  "x is :foo"
  ELISP> x
  ,*** Eval error ***  Symbol’s value as variable is void: x
#+end_example

That's good to know about variable scope with ~let~ and ~setq~ and using
uninitialized variables in a ~let~ expression.

#+begin_example
  TeX-view-match-predicate is a byte-compiled Lisp function in ‘tex.el’.

  (TeX-view-match-predicate PREDICATE)

  Check if PREDICATE is true.
  PREDICATE can be a symbol or a list of symbols defined in
  ‘TeX-view-predicate-list-builtin’ or ‘TeX-view-predicate-list’.
  In case of a single symbol, return t if the predicate is true,
  nil otherwise.  In case of a list of symbols, return t if all
  predicates are true, nil otherwise.
#+end_example

So it looks like the issue may be with ~TeX-view-predicate-list~.

#+begin_example
  TeX-view-predicate-list is a variable defined in ‘tex.el’.

  Its value is nil

  Alist of predicates for viewer selection and invocation.
  The key of each list item is a symbol and the value a Lisp form
  to be evaluated.  The form should return nil if the predicate is
  not fulfilled.

  Built-in predicates provided in ‘TeX-view-predicate-list-builtin’
  can be overwritten by defining predicates with the same symbol.

  The following built-in predicates are available:
    ‘output-dvi’: The output is a DVI file.
    ‘output-pdf’: The output is a PDF file.
    ‘output-html’: The output is an HTML file.
    ‘style-pstricks’: The document loads a PSTricks package.
    ‘engine-omega’: The Omega engine is used for typesetting.
    ‘engine-xetex’: The XeTeX engine is used for typesetting.
    ‘mode-io-correlate’: TeX Source Correlate mode is active.
    ‘paper-landscape’: The document is typeset in landscape orientation.
    ‘paper-portrait’: The document is not typeset in landscape orientation.
    ‘paper-a4’: The paper format is A4.
    ‘paper-a5’: The paper format is A5.
    ‘paper-b5’: The paper format is B5.
    ‘paper-letter’: The paper format is letter.
    ‘paper-legal’: The paper format is legal.
    ‘paper-executive’: The paper format is executive.

    You can customize this variable.
#+end_example

Maybe I should see what ~TeX-output-extension~ is after running the =xelatexmk=
command.

#+begin_example
  TeX-output-extension is a variable defined in ‘tex.el’.

  Its value is "pdf"
  Local in buffer xelatex-test.tex; global value is nil

  Extension of TeX output file.
  This is either a string or a list with
  a string as element.  Its value is obtained from ‘TeX-command-output-list’.
  Access to the value should be through the function ‘TeX-output-extension’.

    Automatically becomes buffer-local when set.
#+end_example

So it should match ~output-pdf~ 🤔 (I don't think the presence of the =.xdv= file
is what's messing this up, but I could be mistaken.)

#+begin_example
  TeX-output-extension is a variable defined in ‘tex.el’.

  Its value is "pdf"
  Local in buffer pdflatex-test.tex; global value is nil

  Extension of TeX output file.
  This is either a string or a list with
  a string as element.  Its value is obtained from ‘TeX-command-output-list’.
  Access to the value should be through the function ‘TeX-output-extension’.

    Automatically becomes buffer-local when set.
#+end_example

I still get a ~pdf~ output when using my =pdflatex= command on a simpler,
=pdflatex=-compliant =.tex= file, but I have no issues finding the matching viewer.

#+begin_example
  TeX-engine is a variable defined in ‘tex.el’.

  Its value is ‘default’

  Type of TeX engine to use.
  It should be one of the following symbols:

  ,* ‘default’
  ,* ‘luatex’
  ,* ‘omega’
  ,* ‘xetex’

    Automatically becomes buffer-local when set.
    This variable is safe as a file local variable if its value
    satisfies the predicate which is a byte-compiled expression.
    You can customize this variable.
#+end_example

As [[https://github.com/tom-tan/auctex-latexmk/issues/28#issuecomment-846378820][myandeg]] says in the GitHub thread referenced earlier, compiling with
=latexmk -xelatex= and then recompiling with =LaTeX= allows =View= to work as
expected, but that is a little clunky. I guess you could just compile with
=LaTeX= alone and deal with that because AUCTeX will include =%%% TeX-engine:
xetex= in the file local variables.

** Default view?
Comments in ~legacy-dotemacs.el~ pointed me to [[http://alexkrispin.wordpress.com/2010/10/25/writing-with-emacs-and-auctex-part-1/][Writing with Emacs and AucTeX part
1]], an article from 2010, so this might be way out of date. On the other hand,
https://www.gnu.org/software/auctex/ says that the current version is 13.1,
updated on [2022-02-20 Sun].

#+begin_src emacs-lisp
  (setq TeX-output-view-style '(("^pdf$" "." "vince %o")
                                ("^ps$" "." "gv %o")
                                ("^dvi$" "." "xdvi %o")))
  (setq tex-dvi-view-command "xdvi")
  (setq tex-dvi-print-command "dvips")
  (setq tex-alt-dvi-print-command "dvips")
#+end_src

** =outshine=: =TAB= folding à la Org mode
See [[https://github.com/daviwil/emacs-from-scratch/wiki/LaTeX-config-(AucteX)-in-Emacs-from-scratch#latex][LaTeX config (AucteX) in Emacs from scratch]] [Note: contains some minor
modifications.]

#+begin_src emacs-lisp
  (defun outshine-hook-config ()
    (outshine-mode 1)
    (setq outline-level #'LaTeX-outline-level)
    (setq outline-regexp (LaTeX-outline-regexp t))
    (setq outline-heading-alist
          (mapcar #'(lambda (x)
                      (cons (concat "\\" (car x)) (cdr x)))
                  LaTeX-section-alist)))

  (use-package outshine
    :config
    (setq LaTeX-section-alist
          '(("part" . 0)
            ("chapter" . 1)
            ("section" . 2)
            ("subsection" . 3)
            ("subsubsection" . 4)
            ("paragraph" . 5)
            ("subparagraph" . 6)
            ("begin" . 7)))
    :hook (LaTeX-mode . outshine-hook-config))

  ;; this is when using general.el, which you aren't doing
  ;; (general-define-key
  ;;  :states '(normal visual)
  ;;  :keymaps 'LaTeX-mode-map
  ;;  "TAB"  '(outshine-cycle :which-key "outshine-cycle"))

  ;; not needed
  ;; use LaTeX-mode-map for AUCTeX; latex-mode-map for plain latex-mode
  ;; (eval-after-load 'latex
  ;;   (define-key 'LaTeX-mode-map (kbd "<tab>") 'outshine-cycle))
#+end_src

See also [[https://stackoverflow.com/a/5505855][Set custom keybinding for specific Emacs mode | stackoverflow]] for info
on setting key bindings.

#+begin_example :eval no
  ELISP> (keymapp 'global-key-map)
  nil
  ELISP> (keymapp 'latex-mode-map)
  nil
  ELISP> (keymapp 'LaTeX-mode-map)
  nil
  ELISP> (keymapp 'text-mode-map)
  nil
  ELISP> (keymapp 'fundamental-mode-map)
  nil
  ELISP> (keymapp 'esc-map)
  nil
  ELISP> (keymapp 'global-map)
  nil
  ELISP> (keymapp 'prog-mode-map)
  nil
#+end_example

+Ok, well, that's kinda weird. Anyway, =outshine= stuff will have to wait.+
Never mind, ~outshine-cycle~ is working already.

* Sanity check
Check that bottom of this file was reached and evaluated successfully.

#+begin_src emacs-lisp
  (message "Bottom of core-langs.org reached and evaluated.")
#+end_src
