#+title: Literate Emacs configuration with Org mode
#+subtitle: Core languages
#+author: Ryan Matlock

This contains configuration for my essential languages: Haskell, Python, Rust and
TeX/LaTeX. In order to enable these configurations, =core-config-core-langs-switch=
must be set to =t= in ~core-config.org~.

* TODO Language Server Protocol: ~lsp-mode~
See [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] for project details, and see [[https://emacs-lsp.github.io/lsp-mode/page/installation/#use-package][LSP Mode installation instructions §
use-package]] for config source.

Other resources:
- [[https://www.mattduck.com/lsp-python-getting-started.html][Getting started with ~lsp-mode~ for Python | matt duck]]
- [[https://github.com/emacs-lsp/lsp-haskell][lsp-haskell | GitHub]]
- [[https://haskell-language-server.readthedocs.io/en/latest/installation.html][Haskell Language Server | Installation | Read the Docs]]
- [[https://abailly.github.io/posts/a-modern-haskell-env.html][Modern Emacs for Haskell | igitur.io]]

#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-l")
    :config
      (progn (lsp-register-custom-settings
              '(("pyls.plugins.pyls_mypy.enabled" t t)
                ("pyls.plugins.pyls_mypy.live_mode" nil t)
                ("pyls.plugins.pyls_black.enabled" t t)
                ("pyls.plugins.pyls_isort.enabled" t t)
                ("pyls.plugins.flake8.enabled" t t))))
    :hook ((haskell-mode . lsp)
           (haskell-literate-mode . lsp)
           (python-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  ;; optionally
  (use-package lsp-ui
    :straight t
    :commands lsp-ui-mode)
  (use-package lsp-treemacs
    :straight t
    :commands lsp-treemacs-errors-list)

  ;; ;; optionally if you want to use debugger
  ;; (use-package dap-mode)
  ;; ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

  ;; optional if you want which-key integration
  (use-package which-key
    :straight t
    :config
    (which-key-mode))
#+end_src

* Haskell
** Basic Haskell configuration

#+begin_src emacs-lisp
  (use-package haskell-mode
    :straight t)

  (use-package lsp-haskell
    :ensure t
    :config
    ;; (let ((hls-wrapper "haskell-language-server-wrapper"))
    ;;   (if (executable-find hls-wrapper)
    ;;       (setq lsp-haskell-server-path hls-wrapper)
    ;;     (message (format "%s not found." hls-wrapper))))
    (setq lsp-haskell-server-path "haskell-language-server-wrapper")
    (setq lsp-haskell-server-args ())
    ;; Comment/uncomment this line to see interactions between lsp client/server.
    ;; (setq lsp-log-io t)
    )

  (add-hook 'lsp-after-initialize-hook
            #'(lambda ()
                (lsp--set-configuration
                 '(:haskell
                   (:plugin
                    (:tactics
                     (:config
                      (:timeout_duration 5))))))))
#+end_src

*** TODO COMMENT figure out this weirdness
In ~IELM~, I get

#+begin_src emacs-lisp :eval no
  ELISP> (executable-find "haskell-language-server-wrapper")
  nil
#+end_src

but in ~ansi-term~, I get

#+begin_src shell
  $ which haskell-language-server-wrapper
  <$HOME>/.ghcup/bin/haskell-language-server-wrapper
#+end_src

** ~hindent~
[[https://github.com/mihaimaruseac/hindent][hindent]] is a Haskell pretty printer.

#+begin_src emacs-lisp
  (use-package hindent
    :straight t
    :hook (haskell-mode . hindent-mode))
#+end_src

** ~dante~: an "Emacs mode for Interactive Haskell" + ~attrap~
[[https://github.com/jyp/dante][dante]] provides a frontend to GHCi features.

[[http://h2.jaguarpaw.co.uk/posts/how-i-use-dante/][How [someone] uses[s] dante]]

[[https://github.com/jyp/attrap][attrap]]: ATtempt To Repair At Point

#+begin_src emacs-lisp
  (use-package attrap
    :straight t)

  (use-package dante
    :straight t
    :after haskell-mode
    :commands 'dante-mode
    :init
    (add-hook 'haskell-mode-hook 'flycheck-mode)
    (add-hook 'haskell-mode-hook 'dante-mode)
    :config
    (flycheck-add-next-checker 'haskell-dante '(info . haskell-hlint)))
#+end_src

* Python
** TODO +~pylsp~+ ~ruff-lsp~
*** Installation
# Ran

# #+begin_src shell :eval no
#   pip install 'python-lsp-server[all]'
# #+end_src

# Looking at [[https://www.mattduck.com/lsp-python-getting-started.html][Getting started with lsp-mode for Python]] (from [2020-04-26 Sun])
# plus the current config file, it looks a little hairy. I'm getting some degree
# of linting and code completion in Python right now, but I need to come back to
# this later. [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pylsp/][lsp-pylsp]] seems to have a daunting number of options.

[[https://github.com/charliermarsh/ruff-lsp][ruff-lsp | GitHub]]

Ran

#+begin_src shell
  pip3 install ruff-lsp
#+end_src

*** TODO COMMENT Configuration
[[https://emacs-lsp.github.io/lsp-mode/page/lsp-ruff-lsp/][lsp-ruff-lsp | LSP Mode]]

#+Begin_src emacs-lisp
  (eval-after-load 'lsp
    (custom-set-variables
     '(lsp-ruff-lsp-show-notifications 'onWarning)))
#+end_src

* Rust

* TeX/LaTeX
+Basically all+ Most of this (with the exception of the AUCTeX stuff towards the
top) is pulled from ~legacy-dotemacs.el~ because I liked the way my old
configuration worked with LaTeX. That said, I think a lot of this stuff goes
back to around 2015 when I was relatively new to Emacs, so some of these
options may be deprecated or implemented in a weird way.

** TODO AUCTeX

Encountered warnings with the following:

# #+begin_src emacs-lisp :eval no-export
#   (use-package auctex
#     :straight t)
# #+end_src

Stealing configuration from [[https://github.com/radian-software/straight.el/issues/836#issuecomment-927098560][Straight freezed at Building auctex forever. #836 |
hongyi-zhao reply on 2021-09-25]]

# #+begin_src emacs-lisp :eval no-export
#   (use-package auctex
#     :straight
#     (:type git :host nil :repo "https://git.savannah.gnu.org/git/auctex.git"
#            :pre-build (("./autogen.sh")
#                        ("./configure" "--without-texmf-dir" "--with-lispdir=.")
#                        ("make")))
#     :mode
#     ;; https://www.mail-archive.com/auctex@gnu.org/msg07608.html
#     ;; https://www.gnu.org/software/emacs/manual/html_node/reftex/Installation.html
#     ("\\.tex\\'" . latex-mode) ;; first activate the inferior Emacs latex mode
#     :hook
#     (LaTeX-mode . TeX-PDF-mode)
#     (LaTeX-mode . company-mode)
#     (LaTeX-mode . flyspell-mode)
#     (LaTeX-mode . flycheck-mode)
#     (LaTeX-mode . LaTeX-math-mode)
#     (LaTeX-mode . turn-on-reftex)
#     (LaTeX-mode . turn-on-cdlatex)
#     :init
#     (load "auctex.el" nil t t)
#     (load "preview-latex.el" nil t t)
#     (require 'reftex)
#     (setq-default TeX-master 'dwim)
#     (setq TeX-data-directory (straight--repos-dir "auctex")
#           TeX-lisp-directory TeX-data-directory

#           ;: Or custom-set-variables as follows.
#           ;: M-x describe-variable RET preview-TeX-style-dir RET
#           ;: `(preview-TeX-style-dir ,(concat ".:" (straight--repos-dir "auctex")
#           ;;                                  "latex:"))
#           preview-TeX-style-dir (concat ".:" (straight--repos-dir "auctex")
#                                         "latex:")

#           TeX-parse-self t ;; parse on load
#           TeX-auto-save t  ;; parse on save
#           TeX-auto-untabify t ;; Automatically remove all tabs from a file before
#           ;; saving it.

#                                           ;Type of TeX engine to use.
#                                           ;It should be one of the following symbols:
#                                           ;* ‘default’
#                                           ;* ‘luatex’
#                                           ;* ‘omega’
#                                           ;* ‘xetex’
#           TeX-engine 'xetex
#           TeX-auto-local ".auctex-auto" ;; Directory containing automatically
#           ;; generated TeX information.
#           TeX-style-local ".auctex-style" ;; Directory containing hand generated
#                                           ;; TeX information.

#         ;; ##### Enable synctex correlation.
#         ;; ##### From Okular just press `Shift + Left click' to go to the good
#         ;; ##### line.
#         ;; ##### From Evince just press `Ctrl + Left click' to go to the good
#         ;; ##### line.
#           ;; TeX-source-correlate-mode t
#           ;; TeX-source-correlate-method 'synctex
#           ;; TeX-source-correlate-start-server t

#         ;; automatically insert braces after sub/superscript in math mode
#           TeX-electric-sub-and-superscript t
#         ;; If non-nil, then query the user before saving each file with
#         ;; TeX-save-document.
#           TeX-save-query nil

#           TeX-view-program-selection '((output-pdf "PDF Tools"))
#           ))
# #+end_src

Well, that's not working either.

#+begin_example
  Error (use-package): auctex/:catch: Loading file
  /Users/matlock/.emacs.d/straight/build/auctex/auctex.elc failed to provide
  feature ‘auctex’ Disable showing Disable logging
  Warning (straight): Two different recipes given for "auctex" (:pre-build cannot
  be both nil and (("./autogen.sh") ("./configure" "--without-texmf-dir"
  "--with-lispdir=.") ("make"))) Disable showing Disable logging
  Warning (initialization): An error occurred while loading ‘/Users/matlock/.emacs’:

  error: :pre-build command error in "auctex" recipe in command "(\"./autogen.sh\")"

  To ensure normal operation, you should investigate and remove the
  cause of the error in your initialization file.  Start Emacs with
  the ‘--debug-init’ option to view a complete error backtrace. Disable showing
  Disable logging
#+end_example

It appears =autogen.sh= isn't in =.emacs.d/straight/repos/auctex/=. Per the end
of =*straight-process*=:

#+begin_example
  [Return code: 0]

  $ cd /Users/matlock/.emacs.d/straight/repos/auctex/
  $ ./autogen.sh

  Searching for programPermission denied
  [Return code: file-error]
#+end_example

For some reason, =:eval no= and =:eval no-export= don't seem to be working (in
terms of =org-babel= skipping the evaluation. See [[https://orgmode.org/manual/Evaluating-Code-Blocks.html][Org Mode Manual § 16.5
Evaluating Code Blocks]] for more info.

Let's try [[https://github.com/daviwil/emacs-from-scratch/wiki/LaTeX-config-(AucteX)-in-Emacs-from-scratch#auctex][LaTeX config (AucteX) in Emacs from scratch § auctex]]

#+begin_src emacs-lisp
  (use-package auctex-latexmk
    :straight t
    :config
    (auctex-latexmk-setup)
    (setq auctex-latexmk-inherit-TeX-PDF-mode t))

  (use-package latex
    :straight auctex
    :defer t
    :mode
    ("\\.tex\\'" . latex-mode)
    :hook
    (LaTeX-mode . TeX-PDF-mode)
    (LaTeX-mode . LaTeX-math-mode)

    :config
    (setq TeX-auto-save t)
    (setq-default TeX-master nil)
    (setq TeX-save-query nil)

    ;; latexmk
    (require 'auctex-latexmk)
    (auctex-latexmk-setup)
    (setq auctex-latexmk-inherit-TeX-PDF-mode t))

  (add-hook 'latex-mode-hook 'turn-on-reftex)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-auctex t)
#+end_src

Well, I didn't get any warnings with this.

** Indentation

#+begin_src emacs-lisp
  (setq LaTeX-item-indent 0)
  (setq LaTeX-indent-level 2)
#+end_src

** Word count
The MacTeX (and presumably most LaTeX distributions) comes with a CLI utility
called ~texcount~; see [[http://superuser.com/questions/125027/word-count-for-latex-within-emacs][Word count for LaTeX within emacs | stackexchange]].

#+begin_src emacs-lisp
  (defun latex-word-count ()
    (interactive)
    (shell-command (concat "texcount "
                           ;; options
                           "-brief "
                           ;; use shell-quote-argument to handle buffer names
                           ;; with spaces or other weirdness
                           (shell-quote-argument buffer-file-name))))

  (add-hook 'LaTeX-mode-hook 'latex-word-count)
  (eval-after-load 'latex
    '(define-key LaTeX-mode-map (kbd "C-c w") 'latex-word-count))
#+end_src

** Misc hooks and settings
Didn't find any comments associated with these settings in ~legacy-dotemacs.el~,
but I liked how everything worked before.

#+begin_src emacs-lisp
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
  (setq TeX-PDF-mode t)
#+end_src

** ~C-c C-c~ compilation with ~latexmk~
Note: SyncTeX is setup via ~/.latexmkrc (see below)

#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (push
               '("latexmk"
                 "latexmk -interaction=nonstopmode -f -pdf %s"
                 TeX-run-TeX
                 nil
                 t
                 :help "Run latexmk on file")
               TeX-command-list)))

  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (push
               '("xelatexmk" "latexmk -xelatex -pdf %s" TeX-run-TeX nil t
                 :help "Run latexmk -xelatex on file")
               TeX-command-list)))

  ;; (add-hook 'LaTeX-mode-hook
  ;;           (lambda ()
  ;;             (let* ((shell-cmd (concat "pdflatex "
  ;;                                       ;; "-synctex=1 "
  ;;                                       "-interaction=nonstopmode "
  ;;                                       "-output-format=pdf "
  ;;                                       "-shell-escape "
  ;;                                       "%s"))
  ;;                    (pdflatex-cmd
  ;;                     (list "pdflatex" shell-cmd TeX-run-TeX nil t)))
  ;;               (push pdflatex-cmd TeX-command-list))))
  ;; TeX-command-expand: Wrong type argument: stringp, (concat "pdflatex "
  ;;           "-synctex=1 " "-interaction=nonstopmode " "--shell-escape " "%s")
  ;; ¯\_(ツ)_/¯

  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (let ((shell-cmd  "pdflatex -interaction=nonstopmode -output-format=pd -shell-escape %s")))
              (push (list "new-pdflatex" shell-cmd TeX-run-TeX nil t)
                    TeX-command-list)))

  ;; (add-hook 'LaTeX-mode-hook
  ;;           (lambda ()
  ;;             (push
  ;;              '("pdflatex"
  ;;                (concat "pdflatex "
  ;;                        "-interaction=nonstopmode "
  ;;                        "-output-format=pdf "
  ;;                        "%s")
  ;;                TeX-run-TeX
  ;;                nil
  ;;                t
  ;;                :help "Run pdflatex on file")
  ;;              TeX-command-list)))
  ;; not working ¯\_(ツ)_/¯
  (add-hook 'TeX-mode-hook
            #'(lambda () (setq TeX-command-default "latexmk")))
#+end_src

#+begin_example
  ELISP> (stringp (concat "pdflatex "
                          "-synctex=1 "
                          "-interaction=nonstopmode "
                          "--shell-escape "
                          "%s"))
  t
#+end_example

This is still so confusing.

*** COMMENT possible solution

#+begin_src emacs-lisp :eval no
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (let* ((shell-cmd (concat "pdflatex "
                                        ;; "-synctex=1 "
                                        "-interaction=nonstopmode "
                                        "-output-format=pdf "
                                        "-shell-escape "
                                        "%s"))
                     (pdflatex-cmd
                      (list "pdflatex" shell-cmd 'TeX-run-TeX nil t)))
                (push pdflatex-cmd TeX-command-list))))

#+end_src

For reference, here's one of the entries from =TeX-command-list=:

#+begin_src emacs-lisp
  ("LatexMk" "latexmk %(-PDF)%S%(mode) %(file-line-error) %(extraopts) %t"
   TeX-run-latexmk nil
    (plain-tex-mode latex-mode doctex-mode)
    :help "Run LatexMk")
#+end_src

So it doesn't appear to be a plist because there are 7 elements.

Info on =TeX-command-list=:

#+begin_quote
The second element is the string handed to the shell after being expanded.  The
expansion is done using the information found in ‘TeX-expand-list’.
#+end_quote

** Set Skim as default PDF viewer on MacOS
Skim's displayline is used for forward search (from .tex to .pdf); option -b
highlights the current line; option -g opens Skim in the background (just
checked and displayliine is still there).

#+begin_src emacs-lisp
  (when (memq window-system '(mac ns x))
    (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
    (setq
     TeX-view-program-list
     '(("PDF Viewer"
        (concat "/Applications/Skim.app/Contents/SharedSupport/displayline"
                " -b -g %n %o %b")))))
#+end_src

** Default view?
Comments in ~legacy-dotemacs.el~ pointed me to [[http://alexkrispin.wordpress.com/2010/10/25/writing-with-emacs-and-auctex-part-1/][Writing with Emacs and AucTeX part
1]], an article from 2010, so this might be way out of date. On the other hand,
https://www.gnu.org/software/auctex/ says that the current version is 13.1,
updated on [2022-02-20 Sun].

#+begin_src emacs-lisp
  (setq TeX-output-view-style '(("^pdf$" "." "vince %o")
                                ("^ps$" "." "gv %o")
                                ("^dvi$" "." "xdvi %o")))
  (setq tex-dvi-view-command "xdvi")
  (setq tex-dvi-print-command "dvips")
  (setq tex-alt-dvi-print-command "dvips")
#+end_src

** ~outshine~ ~TAB~ folding à la Org mode
See [[https://github.com/daviwil/emacs-from-scratch/wiki/LaTeX-config-(AucteX)-in-Emacs-from-scratch#latex][LaTeX config (AucteX) in Emacs from scratch]] [Note: contains some minor
modifications.]

#+begin_src emacs-lisp
  (defun outshine-hook-config ()
    (outshine-mode 1)
    (setq outline-level #'LaTeX-outline-level)
    (setq outline-regexp (LaTeX-outline-regexp t))
    (setq outline-heading-alist
          (mapcar #'(lambda (x)
                      (cons (concat "\\" (car x)) (cdr x)))
                  LaTeX-section-alist)))

  (use-package outshine
    :config
    (setq LaTeX-section-alist
          '(("part" . 0)
            ("chapter" . 1)
            ("section" . 2)
            ("subsection" . 3)
            ("subsubsection" . 4)
            ("paragraph" . 5)
            ("subparagraph" . 6)
            ("begin" . 7)))
    :hook (LaTeX-mode . outshine-hook-config))

  ;; this is when using general.el, which you aren't doing
  ;; (general-define-key
  ;;  :states '(normal visual)
  ;;  :keymaps 'LaTeX-mode-map
  ;;  "TAB"  '(outshine-cycle :which-key "outshine-cycle"))

  ;; not needed
  ;; use LaTeX-mode-map for AUCTeX; latex-mode-map for plain latex-mode
  ;; (eval-after-load 'latex
  ;;   (define-key 'LaTeX-mode-map (kbd "<tab>") 'outshine-cycle))
#+end_src

See also [[https://stackoverflow.com/a/5505855][Set custom keybinding for specific Emacs mode | stackoverflow]] for info
on setting key bindings.

#+begin_example :eval no
  ELISP> (keymapp 'global-key-map)
  nil
  ELISP> (keymapp 'latex-mode-map)
  nil
  ELISP> (keymapp 'LaTeX-mode-map)
  nil
  ELISP> (keymapp 'text-mode-map)
  nil
  ELISP> (keymapp 'fundamental-mode-map)
  nil
  ELISP> (keymapp 'esc-map)
  nil
  ELISP> (keymapp 'global-map)
  nil
  ELISP> (keymapp 'prog-mode-map)
  nil
#+end_example

+Ok, well, that's kinda weird. Anyway, =outshine= stuff will have to wait.+
Never mind, =outshine-cycle= is working already.

* Sanity check
Check that bottom of this file was reached and evaluated successfully.

#+begin_src emacs-lisp
  (message "Bottom of core-langs.org reached and evaluated.")
#+end_src
